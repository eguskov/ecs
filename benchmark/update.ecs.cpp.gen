//! GENERATED FILE


#ifndef __CODEGEN__

#include "update.ecs.cpp"

static constexpr ConstCompDesc update_position_components[] = {
  {hash::cstr("vel"), Desc<glm::vec3>::Size},
  {hash::cstr("pos"), Desc<glm::vec3>::Size},
};
static constexpr ConstQueryDesc update_position_query_desc = {
  make_const_array(update_position_components),
  empty_desc_array,
  empty_desc_array,
  empty_desc_array,
  empty_desc_array,
};
static RegSysSpec<1621823280, decltype(update_position)> _reg_sys_update_position("update_position", update_position_query_desc);



template <> __forceinline void RegSysSpec<1621823280, decltype(update_position)>::execImpl(const RawArg &stage_or_event, Query &query) const
{
  static constexpr int compIdx_vel = index_of_component<_countof(update_position_components)>::get(hash::cstr("vel"), update_position_components);
  static constexpr int compIdx_pos = index_of_component<_countof(update_position_components)>::get(hash::cstr("pos"), update_position_components);
  for (int chunkIdx = 0; chunkIdx < query.chunksCount; ++chunkIdx)
  {
    QueryChunk &chunk_vel = query.chunks[compIdx_vel + chunkIdx * query.componentsCount];
    QueryChunk &chunk_pos = query.chunks[compIdx_pos + chunkIdx * query.componentsCount];
    auto it_vel = chunk_vel.begin<glm::vec3>();
    auto it_pos = chunk_pos.begin<glm::vec3>();
    for (int i = 0; i < query.entitiesInChunk[chunkIdx]; ++i, ++it_vel, ++it_pos)
      update_position(*(UpdateStage*)stage_or_event.mem, *it_vel, *it_pos);
  }
}

#endif // __CODEGEN__
