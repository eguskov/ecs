//! GENERATED FILE


#ifndef __CODEGEN__

#include "update.ecs.cpp"

static RegSysSpec<1621823280, decltype(update_position)> _reg_sys_update_position("update_position", update_position, { "stage", "vel", "pos" }, {  }, {  }, {  }, {  }, true); 

template <> template <> __forceinline void RegSysSpec<1621823280, decltype(update_position)>::execImpl<>(const ExtraArguments &args, Query &query, eastl::index_sequence<0, 1, 2>) const
{
  for (int chunkIdx = 0; chunkIdx < query.chunksCount; ++chunkIdx)
  {
    const int compIdx_vel = query.desc.getComponentIndex(hash::cstr("vel"));
    const int compIdx_pos = query.desc.getComponentIndex(hash::cstr("pos"));
    QueryChunk &chunk_vel = query.chunks[compIdx_vel + chunkIdx * query.componentsCount];
    QueryChunk &chunk_pos = query.chunks[compIdx_pos + chunkIdx * query.componentsCount];
    auto it_vel = chunk_vel.begin<glm::vec3>();
    auto it_pos = chunk_pos.begin<glm::vec3>();
    for (int i = 0; i < query.entitiesInChunk[chunkIdx]; ++i, ++it_vel, ++it_pos)
      update_position(*(UpdateStage*)args.stageOrEvent.mem, *it_vel, *it_pos);
  }
}

#endif // __CODEGEN__
