//! GENERATED FILE


#ifndef __CODEGEN__

#include "update.ecs.cpp"

static RegCompSpec<Gravity> _reg_comp_gravity("gravity");
template <> int RegCompSpec<Gravity>::ID = -1;

static RegCompSpec<UserInput> _reg_comp_user_input("user_input");
template <> int RegCompSpec<UserInput>::ID = -1;

static RegCompSpec<Jump> _reg_comp_jump("jump");
template <> int RegCompSpec<Jump>::ID = -1;

static RegCompSpec<TextureComp> _reg_comp_texture("texture");
template <> int RegCompSpec<TextureComp>::ID = -1;

static RegCompSpec<AnimGraph> _reg_comp_anim_graph("anim_graph");
template <> int RegCompSpec<AnimGraph>::ID = -1;

static RegCompSpec<AnimState> _reg_comp_anim_state("anim_state");
template <> int RegCompSpec<AnimState>::ID = -1;

template <> struct Desc<decltype(load_texture_handler)> { constexpr static char* name = "load_texture_handler"; };
static RegSysSpec<decltype(load_texture_handler)> _reg_sys_load_texture_handler("load_texture_handler", load_texture_handler, { "ev", "texture" }, true);

template <> struct Desc<decltype(update_position)> { constexpr static char* name = "update_position"; };
static RegSysSpec<decltype(update_position)> _reg_sys_update_position("update_position", update_position, { "stage", "vel", "pos" }, true);

template <> struct Desc<decltype(update_anim_frame)> { constexpr static char* name = "update_anim_frame"; };
static RegSysSpec<decltype(update_anim_frame)> _reg_sys_update_anim_frame("update_anim_frame", update_anim_frame, { "stage", "anim_graph", "anim_state", "frame" }, true);

template <> struct Desc<decltype(render)> { constexpr static char* name = "render"; };
static RegSysSpec<decltype(render)> _reg_sys_render("render", render, { "stage", "texture", "frame", "pos" }, true);

template <> struct Desc<decltype(read_controls)> { constexpr static char* name = "read_controls"; };
static RegSysSpec<decltype(read_controls)> _reg_sys_read_controls("read_controls", read_controls, { "stage", "user_input", "vel" }, true);

template <> struct Desc<decltype(apply_controls)> { constexpr static char* name = "apply_controls"; };
static RegSysSpec<decltype(apply_controls)> _reg_sys_apply_controls("apply_controls", apply_controls, { "stage", "user_input", "jump", "vel" }, true);

template <> struct Desc<decltype(apply_jump)> { constexpr static char* name = "apply_jump"; };
static RegSysSpec<decltype(apply_jump)> _reg_sys_apply_jump("apply_jump", apply_jump, { "stage", "jump", "vel" }, true);

template <> struct Desc<decltype(apply_gravity)> { constexpr static char* name = "apply_gravity"; };
static RegSysSpec<decltype(apply_gravity)> _reg_sys_apply_gravity("apply_gravity", apply_gravity, { "stage", "gravity", "vel" }, true);

template <> struct Desc<decltype(update_collisions)> { constexpr static char* name = "update_collisions"; };
static RegSysSpec<decltype(update_collisions)> _reg_sys_update_collisions("update_collisions", update_collisions, { "stage", "eid", "user_input", "collision_rect", "pos", "vel" }, true);

template <> struct Desc<decltype(select_current_anim_frame)> { constexpr static char* name = "select_current_anim_frame"; };
static RegSysSpec<decltype(select_current_anim_frame)> _reg_sys_select_current_anim_frame("select_current_anim_frame", select_current_anim_frame, { "stage", "user_input", "vel", "texture", "anim_state" }, true);

template <> struct Desc<decltype(validate_position)> { constexpr static char* name = "validate_position"; };
static RegSysSpec<decltype(validate_position)> _reg_sys_validate_position("validate_position", validate_position, { "stage", "pos" }, true);

static __forceinline void exec_BricksQuery(const EntityId & eid, const glm::vec2 & collision_rect, const glm::vec2 & pos) {}

template <> struct Desc<decltype(exec_BricksQuery)> { constexpr static char* name = "exec_BricksQuery"; };
static RegSysSpec<decltype(exec_BricksQuery)> _reg_sys_exec_BricksQuery("exec_BricksQuery", exec_BricksQuery, { "eid", "collision_rect", "pos" }, false);

template <> template <> __forceinline void RegSysSpec<decltype(exec_BricksQuery)>::execImplSoA<>(const ExtraArguments &args, const RegSys::Remap &remap, const int *offsets, Storage *storage, eastl::index_sequence<0, 1, 2>) const {}

template <typename C> void BricksQuery::exec(C callback)
{
  using SysType = RegSysSpec<decltype(exec_BricksQuery)>;
  const auto &sys = _reg_sys_exec_BricksQuery;
  const auto &components = sys.components;
  const auto &query = g_mgr->queries[sys.id];
  auto *storage = &g_mgr->storagesSoA[0];
  ExtraArguments args;
  for (int i = 0; i < (int)query.eids.size(); ++i)
  {
    EntityId eid = query.eids[i];
    args.eid = eid;
    const auto &entity = g_mgr->entitiesSoA[eid2idx(eid)];
    const auto &templ = g_mgr->templates[entity.templateId];
    const auto &remap = templ.remaps[sys.id];
    const int *offsets = entity.componentOffsets.data();
    const int argId[] = { components[0].nameId, components[1].nameId, components[2].nameId };
    const int argOffset[] = { get_offset(remap[0], offsets), get_offset(remap[1], offsets), get_offset(remap[2], offsets) };
    callback(ValueSoA<SysType::Argument<0>::Type, SysType::Argument<0>::valueType>::get(args, storage, argId[0], argOffset[0]), ValueSoA<SysType::Argument<1>::Type, SysType::Argument<1>::valueType>::get(args, storage, argId[1], argOffset[1]), ValueSoA<SysType::Argument<2>::Type, SysType::Argument<2>::valueType>::get(args, storage, argId[2], argOffset[2]));
  }
}

template <> template <> __forceinline void RegSysSpec<decltype(load_texture_handler)>::execImplSoA<>(const ExtraArguments &args, const RegSys::Remap &remap, const int *offsets, Storage *storage, eastl::index_sequence<0, 1>) const
{
  const int argId[] = { components[0].nameId, components[1].nameId };
  const int argOffset[] = { get_offset(remap[0], offsets), get_offset(remap[1], offsets) };
  load_texture_handler(ValueSoA<Argument<0>::Type, Argument<0>::valueType>::get(args, storage, argId[0], argOffset[0]), ValueSoA<Argument<1>::Type, Argument<1>::valueType>::get(args, storage, argId[1], argOffset[1]));
}

template <> template <> __forceinline void RegSysSpec<decltype(update_position)>::execImplSoA<>(const ExtraArguments &args, const RegSys::Remap &remap, const int *offsets, Storage *storage, eastl::index_sequence<0, 1, 2>) const
{
  const int argId[] = { components[0].nameId, components[1].nameId, components[2].nameId };
  const int argOffset[] = { get_offset(remap[0], offsets), get_offset(remap[1], offsets), get_offset(remap[2], offsets) };
  update_position(ValueSoA<Argument<0>::Type, Argument<0>::valueType>::get(args, storage, argId[0], argOffset[0]), ValueSoA<Argument<1>::Type, Argument<1>::valueType>::get(args, storage, argId[1], argOffset[1]), ValueSoA<Argument<2>::Type, Argument<2>::valueType>::get(args, storage, argId[2], argOffset[2]));
}

template <> template <> __forceinline void RegSysSpec<decltype(update_anim_frame)>::execImplSoA<>(const ExtraArguments &args, const RegSys::Remap &remap, const int *offsets, Storage *storage, eastl::index_sequence<0, 1, 2, 3>) const
{
  const int argId[] = { components[0].nameId, components[1].nameId, components[2].nameId, components[3].nameId };
  const int argOffset[] = { get_offset(remap[0], offsets), get_offset(remap[1], offsets), get_offset(remap[2], offsets), get_offset(remap[3], offsets) };
  update_anim_frame(ValueSoA<Argument<0>::Type, Argument<0>::valueType>::get(args, storage, argId[0], argOffset[0]), ValueSoA<Argument<1>::Type, Argument<1>::valueType>::get(args, storage, argId[1], argOffset[1]), ValueSoA<Argument<2>::Type, Argument<2>::valueType>::get(args, storage, argId[2], argOffset[2]), ValueSoA<Argument<3>::Type, Argument<3>::valueType>::get(args, storage, argId[3], argOffset[3]));
}

template <> template <> __forceinline void RegSysSpec<decltype(render)>::execImplSoA<>(const ExtraArguments &args, const RegSys::Remap &remap, const int *offsets, Storage *storage, eastl::index_sequence<0, 1, 2, 3>) const
{
  const int argId[] = { components[0].nameId, components[1].nameId, components[2].nameId, components[3].nameId };
  const int argOffset[] = { get_offset(remap[0], offsets), get_offset(remap[1], offsets), get_offset(remap[2], offsets), get_offset(remap[3], offsets) };
  render(ValueSoA<Argument<0>::Type, Argument<0>::valueType>::get(args, storage, argId[0], argOffset[0]), ValueSoA<Argument<1>::Type, Argument<1>::valueType>::get(args, storage, argId[1], argOffset[1]), ValueSoA<Argument<2>::Type, Argument<2>::valueType>::get(args, storage, argId[2], argOffset[2]), ValueSoA<Argument<3>::Type, Argument<3>::valueType>::get(args, storage, argId[3], argOffset[3]));
}

template <> template <> __forceinline void RegSysSpec<decltype(read_controls)>::execImplSoA<>(const ExtraArguments &args, const RegSys::Remap &remap, const int *offsets, Storage *storage, eastl::index_sequence<0, 1, 2>) const
{
  const int argId[] = { components[0].nameId, components[1].nameId, components[2].nameId };
  const int argOffset[] = { get_offset(remap[0], offsets), get_offset(remap[1], offsets), get_offset(remap[2], offsets) };
  read_controls(ValueSoA<Argument<0>::Type, Argument<0>::valueType>::get(args, storage, argId[0], argOffset[0]), ValueSoA<Argument<1>::Type, Argument<1>::valueType>::get(args, storage, argId[1], argOffset[1]), ValueSoA<Argument<2>::Type, Argument<2>::valueType>::get(args, storage, argId[2], argOffset[2]));
}

template <> template <> __forceinline void RegSysSpec<decltype(apply_controls)>::execImplSoA<>(const ExtraArguments &args, const RegSys::Remap &remap, const int *offsets, Storage *storage, eastl::index_sequence<0, 1, 2, 3>) const
{
  const int argId[] = { components[0].nameId, components[1].nameId, components[2].nameId, components[3].nameId };
  const int argOffset[] = { get_offset(remap[0], offsets), get_offset(remap[1], offsets), get_offset(remap[2], offsets), get_offset(remap[3], offsets) };
  apply_controls(ValueSoA<Argument<0>::Type, Argument<0>::valueType>::get(args, storage, argId[0], argOffset[0]), ValueSoA<Argument<1>::Type, Argument<1>::valueType>::get(args, storage, argId[1], argOffset[1]), ValueSoA<Argument<2>::Type, Argument<2>::valueType>::get(args, storage, argId[2], argOffset[2]), ValueSoA<Argument<3>::Type, Argument<3>::valueType>::get(args, storage, argId[3], argOffset[3]));
}

template <> template <> __forceinline void RegSysSpec<decltype(apply_jump)>::execImplSoA<>(const ExtraArguments &args, const RegSys::Remap &remap, const int *offsets, Storage *storage, eastl::index_sequence<0, 1, 2>) const
{
  const int argId[] = { components[0].nameId, components[1].nameId, components[2].nameId };
  const int argOffset[] = { get_offset(remap[0], offsets), get_offset(remap[1], offsets), get_offset(remap[2], offsets) };
  apply_jump(ValueSoA<Argument<0>::Type, Argument<0>::valueType>::get(args, storage, argId[0], argOffset[0]), ValueSoA<Argument<1>::Type, Argument<1>::valueType>::get(args, storage, argId[1], argOffset[1]), ValueSoA<Argument<2>::Type, Argument<2>::valueType>::get(args, storage, argId[2], argOffset[2]));
}

template <> template <> __forceinline void RegSysSpec<decltype(apply_gravity)>::execImplSoA<>(const ExtraArguments &args, const RegSys::Remap &remap, const int *offsets, Storage *storage, eastl::index_sequence<0, 1, 2>) const
{
  const int argId[] = { components[0].nameId, components[1].nameId, components[2].nameId };
  const int argOffset[] = { get_offset(remap[0], offsets), get_offset(remap[1], offsets), get_offset(remap[2], offsets) };
  apply_gravity(ValueSoA<Argument<0>::Type, Argument<0>::valueType>::get(args, storage, argId[0], argOffset[0]), ValueSoA<Argument<1>::Type, Argument<1>::valueType>::get(args, storage, argId[1], argOffset[1]), ValueSoA<Argument<2>::Type, Argument<2>::valueType>::get(args, storage, argId[2], argOffset[2]));
}

template <> template <> __forceinline void RegSysSpec<decltype(update_collisions)>::execImplSoA<>(const ExtraArguments &args, const RegSys::Remap &remap, const int *offsets, Storage *storage, eastl::index_sequence<0, 1, 2, 3, 4, 5>) const
{
  const int argId[] = { components[0].nameId, components[1].nameId, components[2].nameId, components[3].nameId, components[4].nameId, components[5].nameId };
  const int argOffset[] = { get_offset(remap[0], offsets), get_offset(remap[1], offsets), get_offset(remap[2], offsets), get_offset(remap[3], offsets), get_offset(remap[4], offsets), get_offset(remap[5], offsets) };
  update_collisions(ValueSoA<Argument<0>::Type, Argument<0>::valueType>::get(args, storage, argId[0], argOffset[0]), ValueSoA<Argument<1>::Type, Argument<1>::valueType>::get(args, storage, argId[1], argOffset[1]), ValueSoA<Argument<2>::Type, Argument<2>::valueType>::get(args, storage, argId[2], argOffset[2]), ValueSoA<Argument<3>::Type, Argument<3>::valueType>::get(args, storage, argId[3], argOffset[3]), ValueSoA<Argument<4>::Type, Argument<4>::valueType>::get(args, storage, argId[4], argOffset[4]), ValueSoA<Argument<5>::Type, Argument<5>::valueType>::get(args, storage, argId[5], argOffset[5]));
}

template <> template <> __forceinline void RegSysSpec<decltype(select_current_anim_frame)>::execImplSoA<>(const ExtraArguments &args, const RegSys::Remap &remap, const int *offsets, Storage *storage, eastl::index_sequence<0, 1, 2, 3, 4>) const
{
  const int argId[] = { components[0].nameId, components[1].nameId, components[2].nameId, components[3].nameId, components[4].nameId };
  const int argOffset[] = { get_offset(remap[0], offsets), get_offset(remap[1], offsets), get_offset(remap[2], offsets), get_offset(remap[3], offsets), get_offset(remap[4], offsets) };
  select_current_anim_frame(ValueSoA<Argument<0>::Type, Argument<0>::valueType>::get(args, storage, argId[0], argOffset[0]), ValueSoA<Argument<1>::Type, Argument<1>::valueType>::get(args, storage, argId[1], argOffset[1]), ValueSoA<Argument<2>::Type, Argument<2>::valueType>::get(args, storage, argId[2], argOffset[2]), ValueSoA<Argument<3>::Type, Argument<3>::valueType>::get(args, storage, argId[3], argOffset[3]), ValueSoA<Argument<4>::Type, Argument<4>::valueType>::get(args, storage, argId[4], argOffset[4]));
}

template <> template <> __forceinline void RegSysSpec<decltype(validate_position)>::execImplSoA<>(const ExtraArguments &args, const RegSys::Remap &remap, const int *offsets, Storage *storage, eastl::index_sequence<0, 1>) const
{
  const int argId[] = { components[0].nameId, components[1].nameId };
  const int argOffset[] = { get_offset(remap[0], offsets), get_offset(remap[1], offsets) };
  validate_position(ValueSoA<Argument<0>::Type, Argument<0>::valueType>::get(args, storage, argId[0], argOffset[0]), ValueSoA<Argument<1>::Type, Argument<1>::valueType>::get(args, storage, argId[1], argOffset[1]));
}

#endif // __CODEGEN__
