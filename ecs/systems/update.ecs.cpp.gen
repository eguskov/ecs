//! GENERATED FILE


#ifndef __CODEGEN__

#include "update.ecs.cpp"

static RegCompSpec<Wall> _reg_comp_wall("wall");
template <> int RegCompSpec<Wall>::ID = -1;

static RegCompSpec<Enemy> _reg_comp_enemy("enemy");
template <> int RegCompSpec<Enemy>::ID = -1;

static RegCompSpec<Gravity> _reg_comp_gravity("gravity");
template <> int RegCompSpec<Gravity>::ID = -1;

static RegCompSpec<UserInput> _reg_comp_user_input("user_input");
template <> int RegCompSpec<UserInput>::ID = -1;

static RegCompSpec<Jump> _reg_comp_jump("jump");
template <> int RegCompSpec<Jump>::ID = -1;

static RegCompSpec<TextureComp> _reg_comp_texture("texture");
template <> int RegCompSpec<TextureComp>::ID = -1;

static RegCompSpec<AnimGraph> _reg_comp_anim_graph("anim_graph");
template <> int RegCompSpec<AnimGraph>::ID = -1;

static RegCompSpec<AnimState> _reg_comp_anim_state("anim_state");
template <> int RegCompSpec<AnimState>::ID = -1;

static RegCompSpec<AutoMove> _reg_comp_auto_move("auto_move");
template <> int RegCompSpec<AutoMove>::ID = -1;

static RegSysSpec<3448512920, decltype(load_texture_handler)> _reg_sys_load_texture_handler("load_texture_handler", load_texture_handler, { "ev", "texture" }, {  }, {  }, {  }, {  }, true); 
static RegSysSpec<1621823280, decltype(update_position)> _reg_sys_update_position("update_position", update_position, { "stage", "vel", "pos" }, {  }, {  }, { "is_alive" }, {  }, true); 
static RegSysSpec<510498044, decltype(update_anim_frame)> _reg_sys_update_anim_frame("update_anim_frame", update_anim_frame, { "stage", "anim_graph", "anim_state", "frame" }, {  }, {  }, {  }, {  }, true); 
static RegSysSpec<1007297635, decltype(render_walls)> _reg_sys_render_walls("render_walls", render_walls, { "stage", "texture", "frame", "pos" }, { "wall" }, {  }, { "is_alive" }, {  }, true); 
static RegSysSpec<1227836588, decltype(render_flipped)> _reg_sys_render_flipped("render_flipped", render_flipped, { "stage", "texture", "frame", "pos" }, {  }, { "wall" }, { "is_flipped", "is_alive" }, {  }, true); 
static RegSysSpec<2012399197, decltype(render_normal)> _reg_sys_render_normal("render_normal", render_normal, { "stage", "texture", "frame", "pos" }, {  }, { "wall" }, { "is_alive" }, { "is_flipped" }, true); 
static RegSysSpec<484250714, decltype(read_controls)> _reg_sys_read_controls("read_controls", read_controls, { "stage", "user_input", "vel" }, {  }, {  }, {  }, {  }, true); 
static RegSysSpec<1920783676, decltype(apply_controls)> _reg_sys_apply_controls("apply_controls", apply_controls, { "stage", "user_input", "jump", "vel", "is_flipped" }, {  }, {  }, {  }, {  }, true); 
static RegSysSpec<3949714102, decltype(apply_jump)> _reg_sys_apply_jump("apply_jump", apply_jump, { "stage", "jump", "vel" }, {  }, {  }, {  }, {  }, true); 
static RegSysSpec<3962763712, decltype(apply_gravity)> _reg_sys_apply_gravity("apply_gravity", apply_gravity, { "stage", "gravity", "vel" }, {  }, {  }, { "is_alive" }, {  }, true); 
static RegSysSpec<3962250550, decltype(update_collisions)> _reg_sys_update_collisions("update_collisions", update_collisions, { "stage", "eid", "collision_rect", "pos", "vel" }, { "user_input" }, {  }, {  }, {  }, true); 
static RegSysSpec<1590712904, decltype(update_auto_move_collisions)> _reg_sys_update_auto_move_collisions("update_auto_move_collisions", update_auto_move_collisions, { "stage", "eid", "collision_rect", "pos", "vel", "is_flipped" }, { "auto_move" }, {  }, { "is_alive" }, {  }, true); 
static RegSysSpec<2354991095, decltype(select_current_anim_frame)> _reg_sys_select_current_anim_frame("select_current_anim_frame", select_current_anim_frame, { "stage", "vel", "texture", "anim_state" }, { "user_input" }, {  }, {  }, {  }, true); 
static RegSysSpec<3007763911, decltype(validate_position)> _reg_sys_validate_position("validate_position", validate_position, { "stage", "pos" }, {  }, {  }, {  }, {  }, true); 
static RegSysSpec<3164460028, decltype(update_auto_move)> _reg_sys_update_auto_move("update_auto_move", update_auto_move, { "stage", "auto_move", "vel" }, { "auto_move" }, {  }, { "is_alive" }, {  }, true); 
static RegSysSpec<917788925, decltype(update_enemies_collisions)> _reg_sys_update_enemies_collisions("update_enemies_collisions", update_enemies_collisions, { "stage", "eid", "user_input", "collision_rect", "pos", "vel", "is_flipped" }, {  }, {  }, { "is_alive" }, {  }, true); 
static RegSysSpec<3441942189, decltype(update_death)> _reg_sys_update_death("update_death", update_death, { "stage", "anim_state", "is_alive" }, {  }, {  }, { "is_alive" }, {  }, true); 
static RegSysSpec<3065729344, decltype(update_spawn_timer)> _reg_sys_update_spawn_timer("update_spawn_timer", update_spawn_timer, { "stage", "spawn_timer", "anim_state", "vel", "is_alive", "is_flipped" }, {  }, {  }, {  }, { "is_alive" }, true); 

static __forceinline void exec_BricksQuery(const EntityId & eid, const glm::vec2 & collision_rect, const glm::vec2 & pos) {}

static RegSysSpec<1315101757, decltype(exec_BricksQuery)> _reg_sys_exec_BricksQuery("exec_BricksQuery", exec_BricksQuery, { "eid", "collision_rect", "pos" }, { "wall" }, {  }, {  }, {  }, false); 

template <> template <> __forceinline void RegSysSpec<1315101757, decltype(exec_BricksQuery)>::execImplSoA<>(const ExtraArguments &args, const RegSys::Remap &remap, const int *offsets, Storage *storage, eastl::index_sequence<0, 1, 2>) const {}

template <typename C> void BricksQuery::exec(C callback)
{
  using SysType = RegSysSpec<1315101757, decltype(exec_BricksQuery)>;
  const auto &sys = _reg_sys_exec_BricksQuery;
  const auto &components = sys.components;
  const auto &query = g_mgr->queries[sys.id];
  auto *storage = &g_mgr->storagesSoA[0];
  ExtraArguments args;
  for (int i = 0; i < (int)query.eids.size(); ++i)
  {
    EntityId eid = query.eids[i];
    args.eid = eid;
    const auto &entity = g_mgr->entitiesSoA[eid2idx(eid)];
    const auto &templ = g_mgr->templates[entity.templateId];
    const auto &remap = templ.remaps[sys.id];
    const int *offsets = entity.componentOffsets.data();
    const int argId[] = { components[0].nameId, components[1].nameId, components[2].nameId };
    const int argOffset[] = { get_offset(remap[0], offsets), get_offset(remap[1], offsets), get_offset(remap[2], offsets) };
    callback(ValueSoA<SysType::Argument<0>::Type, SysType::Argument<0>::valueType>::get(args, storage, argId[0], argOffset[0]), ValueSoA<SysType::Argument<1>::Type, SysType::Argument<1>::valueType>::get(args, storage, argId[1], argOffset[1]), ValueSoA<SysType::Argument<2>::Type, SysType::Argument<2>::valueType>::get(args, storage, argId[2], argOffset[2]));
  }
}

static __forceinline void exec_AliveEnemiesQuery(const EntityId & eid, const glm::vec2 & collision_rect, const glm::vec2 & pos, glm::vec2 & vel, AnimState & anim_state) {}

static RegSysSpec<335811716, decltype(exec_AliveEnemiesQuery)> _reg_sys_exec_AliveEnemiesQuery("exec_AliveEnemiesQuery", exec_AliveEnemiesQuery, { "eid", "collision_rect", "pos", "vel", "anim_state" }, { "enemy" }, {  }, { "is_alive" }, {  }, false); 

template <> template <> __forceinline void RegSysSpec<335811716, decltype(exec_AliveEnemiesQuery)>::execImplSoA<>(const ExtraArguments &args, const RegSys::Remap &remap, const int *offsets, Storage *storage, eastl::index_sequence<0, 1, 2, 3, 4>) const {}

template <typename C> void AliveEnemiesQuery::exec(C callback)
{
  using SysType = RegSysSpec<335811716, decltype(exec_AliveEnemiesQuery)>;
  const auto &sys = _reg_sys_exec_AliveEnemiesQuery;
  const auto &components = sys.components;
  const auto &query = g_mgr->queries[sys.id];
  auto *storage = &g_mgr->storagesSoA[0];
  ExtraArguments args;
  for (int i = 0; i < (int)query.eids.size(); ++i)
  {
    EntityId eid = query.eids[i];
    args.eid = eid;
    const auto &entity = g_mgr->entitiesSoA[eid2idx(eid)];
    const auto &templ = g_mgr->templates[entity.templateId];
    const auto &remap = templ.remaps[sys.id];
    const int *offsets = entity.componentOffsets.data();
    const int argId[] = { components[0].nameId, components[1].nameId, components[2].nameId, components[3].nameId, components[4].nameId };
    const int argOffset[] = { get_offset(remap[0], offsets), get_offset(remap[1], offsets), get_offset(remap[2], offsets), get_offset(remap[3], offsets), get_offset(remap[4], offsets) };
    callback(ValueSoA<SysType::Argument<0>::Type, SysType::Argument<0>::valueType>::get(args, storage, argId[0], argOffset[0]), ValueSoA<SysType::Argument<1>::Type, SysType::Argument<1>::valueType>::get(args, storage, argId[1], argOffset[1]), ValueSoA<SysType::Argument<2>::Type, SysType::Argument<2>::valueType>::get(args, storage, argId[2], argOffset[2]), ValueSoA<SysType::Argument<3>::Type, SysType::Argument<3>::valueType>::get(args, storage, argId[3], argOffset[3]), ValueSoA<SysType::Argument<4>::Type, SysType::Argument<4>::valueType>::get(args, storage, argId[4], argOffset[4]));
  }
}

template <> template <> __forceinline void RegSysSpec<3448512920, decltype(load_texture_handler)>::execImplSoA<>(const ExtraArguments &args, const RegSys::Remap &remap, const int *offsets, Storage *storage, eastl::index_sequence<0, 1>) const
{
  const int argId[] = { components[0].nameId, components[1].nameId };
  const int argOffset[] = { get_offset(remap[0], offsets), get_offset(remap[1], offsets) };
  load_texture_handler(ValueSoA<Argument<0>::Type, Argument<0>::valueType>::get(args, storage, argId[0], argOffset[0]), ValueSoA<Argument<1>::Type, Argument<1>::valueType>::get(args, storage, argId[1], argOffset[1]));
}

template <> template <> __forceinline void RegSysSpec<1621823280, decltype(update_position)>::execImplSoA<>(const ExtraArguments &args, const RegSys::Remap &remap, const int *offsets, Storage *storage, eastl::index_sequence<0, 1, 2>) const
{
  const int argId[] = { components[0].nameId, components[1].nameId, components[2].nameId };
  const int argOffset[] = { get_offset(remap[0], offsets), get_offset(remap[1], offsets), get_offset(remap[2], offsets) };
  update_position(ValueSoA<Argument<0>::Type, Argument<0>::valueType>::get(args, storage, argId[0], argOffset[0]), ValueSoA<Argument<1>::Type, Argument<1>::valueType>::get(args, storage, argId[1], argOffset[1]), ValueSoA<Argument<2>::Type, Argument<2>::valueType>::get(args, storage, argId[2], argOffset[2]));
}

template <> template <> __forceinline void RegSysSpec<510498044, decltype(update_anim_frame)>::execImplSoA<>(const ExtraArguments &args, const RegSys::Remap &remap, const int *offsets, Storage *storage, eastl::index_sequence<0, 1, 2, 3>) const
{
  const int argId[] = { components[0].nameId, components[1].nameId, components[2].nameId, components[3].nameId };
  const int argOffset[] = { get_offset(remap[0], offsets), get_offset(remap[1], offsets), get_offset(remap[2], offsets), get_offset(remap[3], offsets) };
  update_anim_frame(ValueSoA<Argument<0>::Type, Argument<0>::valueType>::get(args, storage, argId[0], argOffset[0]), ValueSoA<Argument<1>::Type, Argument<1>::valueType>::get(args, storage, argId[1], argOffset[1]), ValueSoA<Argument<2>::Type, Argument<2>::valueType>::get(args, storage, argId[2], argOffset[2]), ValueSoA<Argument<3>::Type, Argument<3>::valueType>::get(args, storage, argId[3], argOffset[3]));
}

template <> template <> __forceinline void RegSysSpec<1007297635, decltype(render_walls)>::execImplSoA<>(const ExtraArguments &args, const RegSys::Remap &remap, const int *offsets, Storage *storage, eastl::index_sequence<0, 1, 2, 3>) const
{
  const int argId[] = { components[0].nameId, components[1].nameId, components[2].nameId, components[3].nameId };
  const int argOffset[] = { get_offset(remap[0], offsets), get_offset(remap[1], offsets), get_offset(remap[2], offsets), get_offset(remap[3], offsets) };
  render_walls(ValueSoA<Argument<0>::Type, Argument<0>::valueType>::get(args, storage, argId[0], argOffset[0]), ValueSoA<Argument<1>::Type, Argument<1>::valueType>::get(args, storage, argId[1], argOffset[1]), ValueSoA<Argument<2>::Type, Argument<2>::valueType>::get(args, storage, argId[2], argOffset[2]), ValueSoA<Argument<3>::Type, Argument<3>::valueType>::get(args, storage, argId[3], argOffset[3]));
}

template <> template <> __forceinline void RegSysSpec<1227836588, decltype(render_flipped)>::execImplSoA<>(const ExtraArguments &args, const RegSys::Remap &remap, const int *offsets, Storage *storage, eastl::index_sequence<0, 1, 2, 3>) const
{
  const int argId[] = { components[0].nameId, components[1].nameId, components[2].nameId, components[3].nameId };
  const int argOffset[] = { get_offset(remap[0], offsets), get_offset(remap[1], offsets), get_offset(remap[2], offsets), get_offset(remap[3], offsets) };
  render_flipped(ValueSoA<Argument<0>::Type, Argument<0>::valueType>::get(args, storage, argId[0], argOffset[0]), ValueSoA<Argument<1>::Type, Argument<1>::valueType>::get(args, storage, argId[1], argOffset[1]), ValueSoA<Argument<2>::Type, Argument<2>::valueType>::get(args, storage, argId[2], argOffset[2]), ValueSoA<Argument<3>::Type, Argument<3>::valueType>::get(args, storage, argId[3], argOffset[3]));
}

template <> template <> __forceinline void RegSysSpec<2012399197, decltype(render_normal)>::execImplSoA<>(const ExtraArguments &args, const RegSys::Remap &remap, const int *offsets, Storage *storage, eastl::index_sequence<0, 1, 2, 3>) const
{
  const int argId[] = { components[0].nameId, components[1].nameId, components[2].nameId, components[3].nameId };
  const int argOffset[] = { get_offset(remap[0], offsets), get_offset(remap[1], offsets), get_offset(remap[2], offsets), get_offset(remap[3], offsets) };
  render_normal(ValueSoA<Argument<0>::Type, Argument<0>::valueType>::get(args, storage, argId[0], argOffset[0]), ValueSoA<Argument<1>::Type, Argument<1>::valueType>::get(args, storage, argId[1], argOffset[1]), ValueSoA<Argument<2>::Type, Argument<2>::valueType>::get(args, storage, argId[2], argOffset[2]), ValueSoA<Argument<3>::Type, Argument<3>::valueType>::get(args, storage, argId[3], argOffset[3]));
}

template <> template <> __forceinline void RegSysSpec<484250714, decltype(read_controls)>::execImplSoA<>(const ExtraArguments &args, const RegSys::Remap &remap, const int *offsets, Storage *storage, eastl::index_sequence<0, 1, 2>) const
{
  const int argId[] = { components[0].nameId, components[1].nameId, components[2].nameId };
  const int argOffset[] = { get_offset(remap[0], offsets), get_offset(remap[1], offsets), get_offset(remap[2], offsets) };
  read_controls(ValueSoA<Argument<0>::Type, Argument<0>::valueType>::get(args, storage, argId[0], argOffset[0]), ValueSoA<Argument<1>::Type, Argument<1>::valueType>::get(args, storage, argId[1], argOffset[1]), ValueSoA<Argument<2>::Type, Argument<2>::valueType>::get(args, storage, argId[2], argOffset[2]));
}

template <> template <> __forceinline void RegSysSpec<1920783676, decltype(apply_controls)>::execImplSoA<>(const ExtraArguments &args, const RegSys::Remap &remap, const int *offsets, Storage *storage, eastl::index_sequence<0, 1, 2, 3, 4>) const
{
  const int argId[] = { components[0].nameId, components[1].nameId, components[2].nameId, components[3].nameId, components[4].nameId };
  const int argOffset[] = { get_offset(remap[0], offsets), get_offset(remap[1], offsets), get_offset(remap[2], offsets), get_offset(remap[3], offsets), get_offset(remap[4], offsets) };
  apply_controls(ValueSoA<Argument<0>::Type, Argument<0>::valueType>::get(args, storage, argId[0], argOffset[0]), ValueSoA<Argument<1>::Type, Argument<1>::valueType>::get(args, storage, argId[1], argOffset[1]), ValueSoA<Argument<2>::Type, Argument<2>::valueType>::get(args, storage, argId[2], argOffset[2]), ValueSoA<Argument<3>::Type, Argument<3>::valueType>::get(args, storage, argId[3], argOffset[3]), ValueSoA<Argument<4>::Type, Argument<4>::valueType>::get(args, storage, argId[4], argOffset[4]));
}

template <> template <> __forceinline void RegSysSpec<3949714102, decltype(apply_jump)>::execImplSoA<>(const ExtraArguments &args, const RegSys::Remap &remap, const int *offsets, Storage *storage, eastl::index_sequence<0, 1, 2>) const
{
  const int argId[] = { components[0].nameId, components[1].nameId, components[2].nameId };
  const int argOffset[] = { get_offset(remap[0], offsets), get_offset(remap[1], offsets), get_offset(remap[2], offsets) };
  apply_jump(ValueSoA<Argument<0>::Type, Argument<0>::valueType>::get(args, storage, argId[0], argOffset[0]), ValueSoA<Argument<1>::Type, Argument<1>::valueType>::get(args, storage, argId[1], argOffset[1]), ValueSoA<Argument<2>::Type, Argument<2>::valueType>::get(args, storage, argId[2], argOffset[2]));
}

template <> template <> __forceinline void RegSysSpec<3962763712, decltype(apply_gravity)>::execImplSoA<>(const ExtraArguments &args, const RegSys::Remap &remap, const int *offsets, Storage *storage, eastl::index_sequence<0, 1, 2>) const
{
  const int argId[] = { components[0].nameId, components[1].nameId, components[2].nameId };
  const int argOffset[] = { get_offset(remap[0], offsets), get_offset(remap[1], offsets), get_offset(remap[2], offsets) };
  apply_gravity(ValueSoA<Argument<0>::Type, Argument<0>::valueType>::get(args, storage, argId[0], argOffset[0]), ValueSoA<Argument<1>::Type, Argument<1>::valueType>::get(args, storage, argId[1], argOffset[1]), ValueSoA<Argument<2>::Type, Argument<2>::valueType>::get(args, storage, argId[2], argOffset[2]));
}

template <> template <> __forceinline void RegSysSpec<3962250550, decltype(update_collisions)>::execImplSoA<>(const ExtraArguments &args, const RegSys::Remap &remap, const int *offsets, Storage *storage, eastl::index_sequence<0, 1, 2, 3, 4>) const
{
  const int argId[] = { components[0].nameId, components[1].nameId, components[2].nameId, components[3].nameId, components[4].nameId };
  const int argOffset[] = { get_offset(remap[0], offsets), get_offset(remap[1], offsets), get_offset(remap[2], offsets), get_offset(remap[3], offsets), get_offset(remap[4], offsets) };
  update_collisions(ValueSoA<Argument<0>::Type, Argument<0>::valueType>::get(args, storage, argId[0], argOffset[0]), ValueSoA<Argument<1>::Type, Argument<1>::valueType>::get(args, storage, argId[1], argOffset[1]), ValueSoA<Argument<2>::Type, Argument<2>::valueType>::get(args, storage, argId[2], argOffset[2]), ValueSoA<Argument<3>::Type, Argument<3>::valueType>::get(args, storage, argId[3], argOffset[3]), ValueSoA<Argument<4>::Type, Argument<4>::valueType>::get(args, storage, argId[4], argOffset[4]));
}

template <> template <> __forceinline void RegSysSpec<1590712904, decltype(update_auto_move_collisions)>::execImplSoA<>(const ExtraArguments &args, const RegSys::Remap &remap, const int *offsets, Storage *storage, eastl::index_sequence<0, 1, 2, 3, 4, 5>) const
{
  const int argId[] = { components[0].nameId, components[1].nameId, components[2].nameId, components[3].nameId, components[4].nameId, components[5].nameId };
  const int argOffset[] = { get_offset(remap[0], offsets), get_offset(remap[1], offsets), get_offset(remap[2], offsets), get_offset(remap[3], offsets), get_offset(remap[4], offsets), get_offset(remap[5], offsets) };
  update_auto_move_collisions(ValueSoA<Argument<0>::Type, Argument<0>::valueType>::get(args, storage, argId[0], argOffset[0]), ValueSoA<Argument<1>::Type, Argument<1>::valueType>::get(args, storage, argId[1], argOffset[1]), ValueSoA<Argument<2>::Type, Argument<2>::valueType>::get(args, storage, argId[2], argOffset[2]), ValueSoA<Argument<3>::Type, Argument<3>::valueType>::get(args, storage, argId[3], argOffset[3]), ValueSoA<Argument<4>::Type, Argument<4>::valueType>::get(args, storage, argId[4], argOffset[4]), ValueSoA<Argument<5>::Type, Argument<5>::valueType>::get(args, storage, argId[5], argOffset[5]));
}

template <> template <> __forceinline void RegSysSpec<2354991095, decltype(select_current_anim_frame)>::execImplSoA<>(const ExtraArguments &args, const RegSys::Remap &remap, const int *offsets, Storage *storage, eastl::index_sequence<0, 1, 2, 3>) const
{
  const int argId[] = { components[0].nameId, components[1].nameId, components[2].nameId, components[3].nameId };
  const int argOffset[] = { get_offset(remap[0], offsets), get_offset(remap[1], offsets), get_offset(remap[2], offsets), get_offset(remap[3], offsets) };
  select_current_anim_frame(ValueSoA<Argument<0>::Type, Argument<0>::valueType>::get(args, storage, argId[0], argOffset[0]), ValueSoA<Argument<1>::Type, Argument<1>::valueType>::get(args, storage, argId[1], argOffset[1]), ValueSoA<Argument<2>::Type, Argument<2>::valueType>::get(args, storage, argId[2], argOffset[2]), ValueSoA<Argument<3>::Type, Argument<3>::valueType>::get(args, storage, argId[3], argOffset[3]));
}

template <> template <> __forceinline void RegSysSpec<3007763911, decltype(validate_position)>::execImplSoA<>(const ExtraArguments &args, const RegSys::Remap &remap, const int *offsets, Storage *storage, eastl::index_sequence<0, 1>) const
{
  const int argId[] = { components[0].nameId, components[1].nameId };
  const int argOffset[] = { get_offset(remap[0], offsets), get_offset(remap[1], offsets) };
  validate_position(ValueSoA<Argument<0>::Type, Argument<0>::valueType>::get(args, storage, argId[0], argOffset[0]), ValueSoA<Argument<1>::Type, Argument<1>::valueType>::get(args, storage, argId[1], argOffset[1]));
}

template <> template <> __forceinline void RegSysSpec<3164460028, decltype(update_auto_move)>::execImplSoA<>(const ExtraArguments &args, const RegSys::Remap &remap, const int *offsets, Storage *storage, eastl::index_sequence<0, 1, 2>) const
{
  const int argId[] = { components[0].nameId, components[1].nameId, components[2].nameId };
  const int argOffset[] = { get_offset(remap[0], offsets), get_offset(remap[1], offsets), get_offset(remap[2], offsets) };
  update_auto_move(ValueSoA<Argument<0>::Type, Argument<0>::valueType>::get(args, storage, argId[0], argOffset[0]), ValueSoA<Argument<1>::Type, Argument<1>::valueType>::get(args, storage, argId[1], argOffset[1]), ValueSoA<Argument<2>::Type, Argument<2>::valueType>::get(args, storage, argId[2], argOffset[2]));
}

template <> template <> __forceinline void RegSysSpec<917788925, decltype(update_enemies_collisions)>::execImplSoA<>(const ExtraArguments &args, const RegSys::Remap &remap, const int *offsets, Storage *storage, eastl::index_sequence<0, 1, 2, 3, 4, 5, 6>) const
{
  const int argId[] = { components[0].nameId, components[1].nameId, components[2].nameId, components[3].nameId, components[4].nameId, components[5].nameId, components[6].nameId };
  const int argOffset[] = { get_offset(remap[0], offsets), get_offset(remap[1], offsets), get_offset(remap[2], offsets), get_offset(remap[3], offsets), get_offset(remap[4], offsets), get_offset(remap[5], offsets), get_offset(remap[6], offsets) };
  update_enemies_collisions(ValueSoA<Argument<0>::Type, Argument<0>::valueType>::get(args, storage, argId[0], argOffset[0]), ValueSoA<Argument<1>::Type, Argument<1>::valueType>::get(args, storage, argId[1], argOffset[1]), ValueSoA<Argument<2>::Type, Argument<2>::valueType>::get(args, storage, argId[2], argOffset[2]), ValueSoA<Argument<3>::Type, Argument<3>::valueType>::get(args, storage, argId[3], argOffset[3]), ValueSoA<Argument<4>::Type, Argument<4>::valueType>::get(args, storage, argId[4], argOffset[4]), ValueSoA<Argument<5>::Type, Argument<5>::valueType>::get(args, storage, argId[5], argOffset[5]), ValueSoA<Argument<6>::Type, Argument<6>::valueType>::get(args, storage, argId[6], argOffset[6]));
}

template <> template <> __forceinline void RegSysSpec<3441942189, decltype(update_death)>::execImplSoA<>(const ExtraArguments &args, const RegSys::Remap &remap, const int *offsets, Storage *storage, eastl::index_sequence<0, 1, 2>) const
{
  const int argId[] = { components[0].nameId, components[1].nameId, components[2].nameId };
  const int argOffset[] = { get_offset(remap[0], offsets), get_offset(remap[1], offsets), get_offset(remap[2], offsets) };
  update_death(ValueSoA<Argument<0>::Type, Argument<0>::valueType>::get(args, storage, argId[0], argOffset[0]), ValueSoA<Argument<1>::Type, Argument<1>::valueType>::get(args, storage, argId[1], argOffset[1]), ValueSoA<Argument<2>::Type, Argument<2>::valueType>::get(args, storage, argId[2], argOffset[2]));
}

template <> template <> __forceinline void RegSysSpec<3065729344, decltype(update_spawn_timer)>::execImplSoA<>(const ExtraArguments &args, const RegSys::Remap &remap, const int *offsets, Storage *storage, eastl::index_sequence<0, 1, 2, 3, 4, 5>) const
{
  const int argId[] = { components[0].nameId, components[1].nameId, components[2].nameId, components[3].nameId, components[4].nameId, components[5].nameId };
  const int argOffset[] = { get_offset(remap[0], offsets), get_offset(remap[1], offsets), get_offset(remap[2], offsets), get_offset(remap[3], offsets), get_offset(remap[4], offsets), get_offset(remap[5], offsets) };
  update_spawn_timer(ValueSoA<Argument<0>::Type, Argument<0>::valueType>::get(args, storage, argId[0], argOffset[0]), ValueSoA<Argument<1>::Type, Argument<1>::valueType>::get(args, storage, argId[1], argOffset[1]), ValueSoA<Argument<2>::Type, Argument<2>::valueType>::get(args, storage, argId[2], argOffset[2]), ValueSoA<Argument<3>::Type, Argument<3>::valueType>::get(args, storage, argId[3], argOffset[3]), ValueSoA<Argument<4>::Type, Argument<4>::valueType>::get(args, storage, argId[4], argOffset[4]), ValueSoA<Argument<5>::Type, Argument<5>::valueType>::get(args, storage, argId[5], argOffset[5]));
}

#endif // __CODEGEN__
