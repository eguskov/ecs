//! GENERATED FILE


#ifndef __CODEGEN__

#include "triggers.cpp"

static constexpr ConstComponentDescription update_player_spawner_have_components[] = {
  {HASH("player_spawner"), 0},
};
static constexpr ConstQueryDescription update_player_spawner_query_desc = {
  empty_desc_array,
  make_const_array(update_player_spawner_have_components),
  empty_desc_array,
  empty_desc_array,
};

static constexpr ConstComponentDescription InactiveLift_components[] = {
  {HASH("key"), ComponentType<int>::size, ComponentDescriptionFlags::kNone},
  {HASH("is_active"), ComponentType<bool>::size, ComponentDescriptionFlags::kWrite},
};
static constexpr ConstComponentDescription InactiveLift_have_components[] = {
  {HASH("lift"), 0},
  {HASH("is_active"), 0},
};
static constexpr ConstComponentDescription InactiveLift_track_components[] = {
  {HASH("is_active"), ComponentType<bool>::size},
};
static constexpr ConstQueryDescription InactiveLift_query_desc = {
  make_const_array(InactiveLift_components),
  make_const_array(InactiveLift_have_components),
  empty_desc_array,
  make_const_array(InactiveLift_track_components),
};
static constexpr ConstComponentDescription CageBlock_components[] = {
  {HASH("eid"), ComponentType<EntityId>::size, ComponentDescriptionFlags::kNone},
};
static constexpr ConstComponentDescription CageBlock_have_components[] = {
  {HASH("cage"), 0},
};
static constexpr ConstQueryDescription CageBlock_query_desc = {
  make_const_array(CageBlock_components),
  make_const_array(CageBlock_have_components),
  empty_desc_array,
  empty_desc_array,
};
static constexpr ConstComponentDescription NotBindedTrigger_components[] = {
  {HASH("eid"), ComponentType<EntityId>::size, ComponentDescriptionFlags::kNone},
  {HASH("key"), ComponentType<int>::size, ComponentDescriptionFlags::kNone},
  {HASH("action_key"), ComponentType<int>::size, ComponentDescriptionFlags::kNone},
  {HASH("action_eid"), ComponentType<EntityId>::size, ComponentDescriptionFlags::kWrite},
  {HASH("is_binded"), ComponentType<bool>::size, ComponentDescriptionFlags::kWrite},
};
static constexpr ConstComponentDescription NotBindedTrigger_have_components[] = {
  {HASH("trigger"), 0},
  {HASH("is_binded"), 0},
};
static constexpr ConstComponentDescription NotBindedTrigger_track_components[] = {
  {HASH("is_binded"), ComponentType<bool>::size},
};
static constexpr ConstQueryDescription NotBindedTrigger_query_desc = {
  make_const_array(NotBindedTrigger_components),
  make_const_array(NotBindedTrigger_have_components),
  empty_desc_array,
  make_const_array(NotBindedTrigger_track_components),
};
static constexpr ConstComponentDescription ActiveTrigger_components[] = {
  {HASH("eid"), ComponentType<EntityId>::size, ComponentDescriptionFlags::kNone},
  {HASH("action_eid"), ComponentType<EntityId>::size, ComponentDescriptionFlags::kNone},
  {HASH("key"), ComponentType<int>::size, ComponentDescriptionFlags::kNone},
  {HASH("pos"), ComponentType<glm::vec2>::size, ComponentDescriptionFlags::kNone},
  {HASH("is_active"), ComponentType<bool>::size, ComponentDescriptionFlags::kWrite},
};
static constexpr ConstComponentDescription ActiveTrigger_have_components[] = {
  {HASH("trigger"), 0},
  {HASH("is_active"), 0},
};
static constexpr ConstComponentDescription ActiveTrigger_track_components[] = {
  {HASH("is_active"), ComponentType<bool>::size},
};
static constexpr ConstQueryDescription ActiveTrigger_query_desc = {
  make_const_array(ActiveTrigger_components),
  make_const_array(ActiveTrigger_have_components),
  empty_desc_array,
  make_const_array(ActiveTrigger_track_components),
};
static constexpr ConstComponentDescription InactiveSwitchTrigger_components[] = {
  {HASH("key"), ComponentType<int>::size, ComponentDescriptionFlags::kNone},
  {HASH("pos"), ComponentType<glm::vec2>::size, ComponentDescriptionFlags::kNone},
  {HASH("is_active"), ComponentType<bool>::size, ComponentDescriptionFlags::kWrite},
};
static constexpr ConstComponentDescription InactiveSwitchTrigger_have_components[] = {
  {HASH("switch_trigger"), 0},
  {HASH("is_active"), 0},
};
static constexpr ConstComponentDescription InactiveSwitchTrigger_track_components[] = {
  {HASH("is_active"), ComponentType<bool>::size},
};
static constexpr ConstQueryDescription InactiveSwitchTrigger_query_desc = {
  make_const_array(InactiveSwitchTrigger_components),
  make_const_array(InactiveSwitchTrigger_have_components),
  empty_desc_array,
  make_const_array(InactiveSwitchTrigger_track_components),
};
static constexpr ConstComponentDescription InactiveZoneTrigger_components[] = {
  {HASH("key"), ComponentType<int>::size, ComponentDescriptionFlags::kNone},
  {HASH("pos"), ComponentType<glm::vec2>::size, ComponentDescriptionFlags::kNone},
  {HASH("collision_rect"), ComponentType<glm::vec4>::size, ComponentDescriptionFlags::kNone},
  {HASH("is_active"), ComponentType<bool>::size, ComponentDescriptionFlags::kWrite},
};
static constexpr ConstComponentDescription InactiveZoneTrigger_have_components[] = {
  {HASH("zone_trigger"), 0},
  {HASH("is_active"), 0},
};
static constexpr ConstComponentDescription InactiveZoneTrigger_track_components[] = {
  {HASH("is_active"), ComponentType<bool>::size},
};
static constexpr ConstQueryDescription InactiveZoneTrigger_query_desc = {
  make_const_array(InactiveZoneTrigger_components),
  make_const_array(InactiveZoneTrigger_have_components),
  empty_desc_array,
  make_const_array(InactiveZoneTrigger_track_components),
};
static constexpr ConstComponentDescription Action_components[] = {
  {HASH("eid"), ComponentType<EntityId>::size, ComponentDescriptionFlags::kNone},
  {HASH("key"), ComponentType<int>::size, ComponentDescriptionFlags::kNone},
};
static constexpr ConstComponentDescription Action_have_components[] = {
  {HASH("action"), 0},
};
static constexpr ConstQueryDescription Action_query_desc = {
  make_const_array(Action_components),
  make_const_array(Action_have_components),
  empty_desc_array,
  empty_desc_array,
};
static constexpr ConstComponentDescription InactiveEnableLiftAction_components[] = {
  {HASH("eid"), ComponentType<EntityId>::size, ComponentDescriptionFlags::kNone},
  {HASH("key"), ComponentType<int>::size, ComponentDescriptionFlags::kNone},
  {HASH("lift_key"), ComponentType<int>::size, ComponentDescriptionFlags::kNone},
  {HASH("is_active"), ComponentType<bool>::size, ComponentDescriptionFlags::kWrite},
};
static constexpr ConstComponentDescription InactiveEnableLiftAction_have_components[] = {
  {HASH("enable_lift_action"), 0},
  {HASH("is_active"), 0},
};
static constexpr ConstComponentDescription InactiveEnableLiftAction_track_components[] = {
  {HASH("is_active"), ComponentType<bool>::size},
};
static constexpr ConstQueryDescription InactiveEnableLiftAction_query_desc = {
  make_const_array(InactiveEnableLiftAction_components),
  make_const_array(InactiveEnableLiftAction_have_components),
  empty_desc_array,
  make_const_array(InactiveEnableLiftAction_track_components),
};
static constexpr ConstComponentDescription InactiveOpenCageAction_components[] = {
  {HASH("eid"), ComponentType<EntityId>::size, ComponentDescriptionFlags::kNone},
  {HASH("key"), ComponentType<int>::size, ComponentDescriptionFlags::kNone},
  {HASH("is_active"), ComponentType<bool>::size, ComponentDescriptionFlags::kWrite},
};
static constexpr ConstComponentDescription InactiveOpenCageAction_have_components[] = {
  {HASH("open_cage_action"), 0},
  {HASH("is_active"), 0},
};
static constexpr ConstComponentDescription InactiveOpenCageAction_track_components[] = {
  {HASH("is_active"), ComponentType<bool>::size},
};
static constexpr ConstQueryDescription InactiveOpenCageAction_query_desc = {
  make_const_array(InactiveOpenCageAction_components),
  make_const_array(InactiveOpenCageAction_have_components),
  empty_desc_array,
  make_const_array(InactiveOpenCageAction_track_components),
};
static constexpr ConstComponentDescription InactiveKillPlayerAction_components[] = {
  {HASH("eid"), ComponentType<EntityId>::size, ComponentDescriptionFlags::kNone},
  {HASH("key"), ComponentType<int>::size, ComponentDescriptionFlags::kNone},
  {HASH("is_active"), ComponentType<bool>::size, ComponentDescriptionFlags::kWrite},
};
static constexpr ConstComponentDescription InactiveKillPlayerAction_have_components[] = {
  {HASH("kill_player_action"), 0},
  {HASH("is_active"), 0},
};
static constexpr ConstComponentDescription InactiveKillPlayerAction_track_components[] = {
  {HASH("is_active"), ComponentType<bool>::size},
};
static constexpr ConstQueryDescription InactiveKillPlayerAction_query_desc = {
  make_const_array(InactiveKillPlayerAction_components),
  make_const_array(InactiveKillPlayerAction_have_components),
  empty_desc_array,
  make_const_array(InactiveKillPlayerAction_track_components),
};
static constexpr ConstComponentDescription AlivePlayer_components[] = {
  {HASH("eid"), ComponentType<EntityId>::size, ComponentDescriptionFlags::kNone},
  {HASH("pos"), ComponentType<glm::vec2>::size, ComponentDescriptionFlags::kNone},
};
static constexpr ConstComponentDescription AlivePlayer_have_components[] = {
  {HASH("user_input"), 0},
  {HASH("is_alive"), 0},
};
static constexpr ConstComponentDescription AlivePlayer_track_components[] = {
  {HASH("is_alive"), ComponentType<bool>::size},
};
static constexpr ConstQueryDescription AlivePlayer_query_desc = {
  make_const_array(AlivePlayer_components),
  make_const_array(AlivePlayer_have_components),
  empty_desc_array,
  make_const_array(AlivePlayer_track_components),
};
static constexpr ConstComponentDescription PlayerSpawnZone_components[] = {
  {HASH("pos"), ComponentType<glm::vec2>::size, ComponentDescriptionFlags::kNone},
};
static constexpr ConstComponentDescription PlayerSpawnZone_have_components[] = {
  {HASH("player_spawn_zone"), 0},
};
static constexpr ConstQueryDescription PlayerSpawnZone_query_desc = {
  make_const_array(PlayerSpawnZone_components),
  make_const_array(PlayerSpawnZone_have_components),
  empty_desc_array,
  empty_desc_array,
};
using InactiveLiftBuilder = StructBuilder<
  StructField<int, INDEX_OF_COMPONENT(InactiveLift, key)>,
  StructField<bool, INDEX_OF_COMPONENT(InactiveLift, is_active)>
>;
using CageBlockBuilder = StructBuilder<
  StructField<EntityId, INDEX_OF_COMPONENT(CageBlock, eid)>
>;
using NotBindedTriggerBuilder = StructBuilder<
  StructField<EntityId, INDEX_OF_COMPONENT(NotBindedTrigger, eid)>,
  StructField<int, INDEX_OF_COMPONENT(NotBindedTrigger, key)>,
  StructField<int, INDEX_OF_COMPONENT(NotBindedTrigger, action_key)>,
  StructField<EntityId, INDEX_OF_COMPONENT(NotBindedTrigger, action_eid)>,
  StructField<bool, INDEX_OF_COMPONENT(NotBindedTrigger, is_binded)>
>;
using ActiveTriggerBuilder = StructBuilder<
  StructField<EntityId, INDEX_OF_COMPONENT(ActiveTrigger, eid)>,
  StructField<EntityId, INDEX_OF_COMPONENT(ActiveTrigger, action_eid)>,
  StructField<int, INDEX_OF_COMPONENT(ActiveTrigger, key)>,
  StructField<glm::vec2, INDEX_OF_COMPONENT(ActiveTrigger, pos)>,
  StructField<bool, INDEX_OF_COMPONENT(ActiveTrigger, is_active)>
>;
using InactiveSwitchTriggerBuilder = StructBuilder<
  StructField<int, INDEX_OF_COMPONENT(InactiveSwitchTrigger, key)>,
  StructField<glm::vec2, INDEX_OF_COMPONENT(InactiveSwitchTrigger, pos)>,
  StructField<bool, INDEX_OF_COMPONENT(InactiveSwitchTrigger, is_active)>
>;
using InactiveZoneTriggerBuilder = StructBuilder<
  StructField<int, INDEX_OF_COMPONENT(InactiveZoneTrigger, key)>,
  StructField<glm::vec2, INDEX_OF_COMPONENT(InactiveZoneTrigger, pos)>,
  StructField<glm::vec4, INDEX_OF_COMPONENT(InactiveZoneTrigger, collision_rect)>,
  StructField<bool, INDEX_OF_COMPONENT(InactiveZoneTrigger, is_active)>
>;
using ActionBuilder = StructBuilder<
  StructField<EntityId, INDEX_OF_COMPONENT(Action, eid)>,
  StructField<int, INDEX_OF_COMPONENT(Action, key)>
>;
using InactiveEnableLiftActionBuilder = StructBuilder<
  StructField<EntityId, INDEX_OF_COMPONENT(InactiveEnableLiftAction, eid)>,
  StructField<int, INDEX_OF_COMPONENT(InactiveEnableLiftAction, key)>,
  StructField<int, INDEX_OF_COMPONENT(InactiveEnableLiftAction, lift_key)>,
  StructField<bool, INDEX_OF_COMPONENT(InactiveEnableLiftAction, is_active)>
>;
using InactiveOpenCageActionBuilder = StructBuilder<
  StructField<EntityId, INDEX_OF_COMPONENT(InactiveOpenCageAction, eid)>,
  StructField<int, INDEX_OF_COMPONENT(InactiveOpenCageAction, key)>,
  StructField<bool, INDEX_OF_COMPONENT(InactiveOpenCageAction, is_active)>
>;
using InactiveKillPlayerActionBuilder = StructBuilder<
  StructField<EntityId, INDEX_OF_COMPONENT(InactiveKillPlayerAction, eid)>,
  StructField<int, INDEX_OF_COMPONENT(InactiveKillPlayerAction, key)>,
  StructField<bool, INDEX_OF_COMPONENT(InactiveKillPlayerAction, is_active)>
>;
using AlivePlayerBuilder = StructBuilder<
  StructField<EntityId, INDEX_OF_COMPONENT(AlivePlayer, eid)>,
  StructField<glm::vec2, INDEX_OF_COMPONENT(AlivePlayer, pos)>
>;
using PlayerSpawnZoneBuilder = StructBuilder<
  StructField<glm::vec2, INDEX_OF_COMPONENT(PlayerSpawnZone, pos)>
>;
static constexpr ConstComponentDescription index_by_NotBindedTrigger_action_key_components[] = {
  {HASH("eid"), ComponentType<EntityId>::size, ComponentDescriptionFlags::kNone},
  {HASH("key"), ComponentType<int>::size, ComponentDescriptionFlags::kNone},
  {HASH("action_key"), ComponentType<int>::size, ComponentDescriptionFlags::kNone},
  {HASH("action_eid"), ComponentType<EntityId>::size, ComponentDescriptionFlags::kWrite},
  {HASH("is_binded"), ComponentType<bool>::size, ComponentDescriptionFlags::kWrite},
};
static constexpr ConstQueryDescription index_by_NotBindedTrigger_action_key_query_desc = {
  make_const_array(index_by_NotBindedTrigger_action_key_components),
  empty_desc_array,
  empty_desc_array,
  empty_desc_array,
};
static constexpr ConstComponentDescription index_by_ActiveTrigger_action_eid_components[] = {
  {HASH("eid"), ComponentType<EntityId>::size, ComponentDescriptionFlags::kNone},
  {HASH("action_eid"), ComponentType<EntityId>::size, ComponentDescriptionFlags::kNone},
  {HASH("key"), ComponentType<int>::size, ComponentDescriptionFlags::kNone},
  {HASH("pos"), ComponentType<glm::vec2>::size, ComponentDescriptionFlags::kNone},
  {HASH("is_active"), ComponentType<bool>::size, ComponentDescriptionFlags::kWrite},
};
static constexpr ConstQueryDescription index_by_ActiveTrigger_action_eid_query_desc = {
  make_const_array(index_by_ActiveTrigger_action_eid_components),
  empty_desc_array,
  empty_desc_array,
  empty_desc_array,
};

static PersistentQueryDescription _reg_query_InactiveLift(HASH("triggers.cpp_InactiveLift"), InactiveLift_query_desc, 
[](const Archetype &type, int entity_idx)
{
  GET_COMPONENT_VALUE(is_active, bool);
  return is_active == false;
});
static PersistentQueryDescription _reg_query_CageBlock(HASH("triggers.cpp_CageBlock"), CageBlock_query_desc, nullptr);
static PersistentQueryDescription _reg_query_NotBindedTrigger(HASH("triggers.cpp_NotBindedTrigger"), NotBindedTrigger_query_desc, 
[](const Archetype &type, int entity_idx)
{
  GET_COMPONENT_VALUE(is_binded, bool);
  return is_binded == false;
});
static PersistentQueryDescription _reg_query_ActiveTrigger(HASH("triggers.cpp_ActiveTrigger"), ActiveTrigger_query_desc, 
[](const Archetype &type, int entity_idx)
{
  GET_COMPONENT_VALUE(is_active, bool);
  return is_active == true;
});
static PersistentQueryDescription _reg_query_InactiveSwitchTrigger(HASH("triggers.cpp_InactiveSwitchTrigger"), InactiveSwitchTrigger_query_desc, 
[](const Archetype &type, int entity_idx)
{
  GET_COMPONENT_VALUE(is_active, bool);
  return is_active == false;
});
static PersistentQueryDescription _reg_query_InactiveZoneTrigger(HASH("triggers.cpp_InactiveZoneTrigger"), InactiveZoneTrigger_query_desc, 
[](const Archetype &type, int entity_idx)
{
  GET_COMPONENT_VALUE(is_active, bool);
  return is_active == false;
});
static PersistentQueryDescription _reg_query_Action(HASH("triggers.cpp_Action"), Action_query_desc, nullptr);
static PersistentQueryDescription _reg_query_InactiveEnableLiftAction(HASH("triggers.cpp_InactiveEnableLiftAction"), InactiveEnableLiftAction_query_desc, 
[](const Archetype &type, int entity_idx)
{
  GET_COMPONENT_VALUE(is_active, bool);
  return is_active == false;
});
static PersistentQueryDescription _reg_query_InactiveOpenCageAction(HASH("triggers.cpp_InactiveOpenCageAction"), InactiveOpenCageAction_query_desc, 
[](const Archetype &type, int entity_idx)
{
  GET_COMPONENT_VALUE(is_active, bool);
  return is_active == false;
});
static PersistentQueryDescription _reg_query_InactiveKillPlayerAction(HASH("triggers.cpp_InactiveKillPlayerAction"), InactiveKillPlayerAction_query_desc, 
[](const Archetype &type, int entity_idx)
{
  GET_COMPONENT_VALUE(is_active, bool);
  return is_active == false;
});
static PersistentQueryDescription _reg_query_AlivePlayer(HASH("triggers.cpp_AlivePlayer"), AlivePlayer_query_desc, 
[](const Archetype &type, int entity_idx)
{
  GET_COMPONENT_VALUE(is_alive, bool);
  return is_alive == true;
});
static PersistentQueryDescription _reg_query_PlayerSpawnZone(HASH("triggers.cpp_PlayerSpawnZone"), PlayerSpawnZone_query_desc, nullptr);

static IndexDescription _reg_index_index_by_NotBindedTrigger_action_key(HASH("triggers.cpp_index_by_NotBindedTrigger_action_key"), HASH("action_key"), index_by_NotBindedTrigger_action_key_query_desc, 
[](const Archetype &type, int entity_idx)
{
  GET_COMPONENT_VALUE(is_binded, bool);
  return is_binded == false;
});
static IndexDescription _reg_index_index_by_ActiveTrigger_action_eid(HASH("triggers.cpp_index_by_ActiveTrigger_action_eid"), HASH("action_eid"), index_by_ActiveTrigger_action_eid_query_desc, 
[](const Archetype &type, int entity_idx)
{
  GET_COMPONENT_VALUE(is_active, bool);
  return is_active == true;
});

int InactiveLift::count()
{
  return ecs::get_entities_count(_reg_query_InactiveLift.queryId);
}
template <typename Callable> void InactiveLift::foreach(Callable callback)
{
  Query &query = ecs::get_query(_reg_query_InactiveLift.queryId);
  for (auto q = query.begin(), e = query.end(); q != e; ++q)
    callback(
    {
      GET_COMPONENT(InactiveLift, q, int, key),
      GET_COMPONENT(InactiveLift, q, bool, is_active)
    });
}
Index* InactiveLift::index()
{
  return nullptr;
}
InactiveLift InactiveLift::get(QueryIterator &iter)
{
  return {
      GET_COMPONENT(InactiveLift, iter, int, key),
      GET_COMPONENT(InactiveLift, iter, bool, is_active)
    };
}
int CageBlock::count()
{
  return ecs::get_entities_count(_reg_query_CageBlock.queryId);
}
template <typename Callable> void CageBlock::foreach(Callable callback)
{
  Query &query = ecs::get_query(_reg_query_CageBlock.queryId);
  for (auto q = query.begin(), e = query.end(); q != e; ++q)
    callback(
    {
      GET_COMPONENT(CageBlock, q, EntityId, eid)
    });
}
Index* CageBlock::index()
{
  return nullptr;
}
CageBlock CageBlock::get(QueryIterator &iter)
{
  return {
      GET_COMPONENT(CageBlock, iter, EntityId, eid)
    };
}
int NotBindedTrigger::count()
{
  return ecs::get_entities_count(_reg_query_NotBindedTrigger.queryId);
}
template <typename Callable> void NotBindedTrigger::foreach(Callable callback)
{
  Query &query = ecs::get_query(_reg_query_NotBindedTrigger.queryId);
  for (auto q = query.begin(), e = query.end(); q != e; ++q)
    callback(
    {
      GET_COMPONENT(NotBindedTrigger, q, EntityId, eid),
      GET_COMPONENT(NotBindedTrigger, q, int, key),
      GET_COMPONENT(NotBindedTrigger, q, int, action_key),
      GET_COMPONENT(NotBindedTrigger, q, EntityId, action_eid),
      GET_COMPONENT(NotBindedTrigger, q, bool, is_binded)
    });
}
Index* NotBindedTrigger::index()
{
  return nullptr;
}
NotBindedTrigger NotBindedTrigger::get(QueryIterator &iter)
{
  return {
      GET_COMPONENT(NotBindedTrigger, iter, EntityId, eid),
      GET_COMPONENT(NotBindedTrigger, iter, int, key),
      GET_COMPONENT(NotBindedTrigger, iter, int, action_key),
      GET_COMPONENT(NotBindedTrigger, iter, EntityId, action_eid),
      GET_COMPONENT(NotBindedTrigger, iter, bool, is_binded)
    };
}
int ActiveTrigger::count()
{
  return ecs::get_entities_count(_reg_query_ActiveTrigger.queryId);
}
template <typename Callable> void ActiveTrigger::foreach(Callable callback)
{
  Query &query = ecs::get_query(_reg_query_ActiveTrigger.queryId);
  for (auto q = query.begin(), e = query.end(); q != e; ++q)
    callback(
    {
      GET_COMPONENT(ActiveTrigger, q, EntityId, eid),
      GET_COMPONENT(ActiveTrigger, q, EntityId, action_eid),
      GET_COMPONENT(ActiveTrigger, q, int, key),
      GET_COMPONENT(ActiveTrigger, q, glm::vec2, pos),
      GET_COMPONENT(ActiveTrigger, q, bool, is_active)
    });
}
Index* ActiveTrigger::index()
{
  return nullptr;
}
ActiveTrigger ActiveTrigger::get(QueryIterator &iter)
{
  return {
      GET_COMPONENT(ActiveTrigger, iter, EntityId, eid),
      GET_COMPONENT(ActiveTrigger, iter, EntityId, action_eid),
      GET_COMPONENT(ActiveTrigger, iter, int, key),
      GET_COMPONENT(ActiveTrigger, iter, glm::vec2, pos),
      GET_COMPONENT(ActiveTrigger, iter, bool, is_active)
    };
}
int InactiveSwitchTrigger::count()
{
  return ecs::get_entities_count(_reg_query_InactiveSwitchTrigger.queryId);
}
template <typename Callable> void InactiveSwitchTrigger::foreach(Callable callback)
{
  Query &query = ecs::get_query(_reg_query_InactiveSwitchTrigger.queryId);
  for (auto q = query.begin(), e = query.end(); q != e; ++q)
    callback(
    {
      GET_COMPONENT(InactiveSwitchTrigger, q, int, key),
      GET_COMPONENT(InactiveSwitchTrigger, q, glm::vec2, pos),
      GET_COMPONENT(InactiveSwitchTrigger, q, bool, is_active)
    });
}
Index* InactiveSwitchTrigger::index()
{
  return nullptr;
}
InactiveSwitchTrigger InactiveSwitchTrigger::get(QueryIterator &iter)
{
  return {
      GET_COMPONENT(InactiveSwitchTrigger, iter, int, key),
      GET_COMPONENT(InactiveSwitchTrigger, iter, glm::vec2, pos),
      GET_COMPONENT(InactiveSwitchTrigger, iter, bool, is_active)
    };
}
int InactiveZoneTrigger::count()
{
  return ecs::get_entities_count(_reg_query_InactiveZoneTrigger.queryId);
}
template <typename Callable> void InactiveZoneTrigger::foreach(Callable callback)
{
  Query &query = ecs::get_query(_reg_query_InactiveZoneTrigger.queryId);
  for (auto q = query.begin(), e = query.end(); q != e; ++q)
    callback(
    {
      GET_COMPONENT(InactiveZoneTrigger, q, int, key),
      GET_COMPONENT(InactiveZoneTrigger, q, glm::vec2, pos),
      GET_COMPONENT(InactiveZoneTrigger, q, glm::vec4, collision_rect),
      GET_COMPONENT(InactiveZoneTrigger, q, bool, is_active)
    });
}
Index* InactiveZoneTrigger::index()
{
  return nullptr;
}
InactiveZoneTrigger InactiveZoneTrigger::get(QueryIterator &iter)
{
  return {
      GET_COMPONENT(InactiveZoneTrigger, iter, int, key),
      GET_COMPONENT(InactiveZoneTrigger, iter, glm::vec2, pos),
      GET_COMPONENT(InactiveZoneTrigger, iter, glm::vec4, collision_rect),
      GET_COMPONENT(InactiveZoneTrigger, iter, bool, is_active)
    };
}
int Action::count()
{
  return ecs::get_entities_count(_reg_query_Action.queryId);
}
template <typename Callable> void Action::foreach(Callable callback)
{
  Query &query = ecs::get_query(_reg_query_Action.queryId);
  for (auto q = query.begin(), e = query.end(); q != e; ++q)
    callback(
    {
      GET_COMPONENT(Action, q, EntityId, eid),
      GET_COMPONENT(Action, q, int, key)
    });
}
Index* Action::index()
{
  return nullptr;
}
Action Action::get(QueryIterator &iter)
{
  return {
      GET_COMPONENT(Action, iter, EntityId, eid),
      GET_COMPONENT(Action, iter, int, key)
    };
}
int InactiveEnableLiftAction::count()
{
  return ecs::get_entities_count(_reg_query_InactiveEnableLiftAction.queryId);
}
template <typename Callable> void InactiveEnableLiftAction::foreach(Callable callback)
{
  Query &query = ecs::get_query(_reg_query_InactiveEnableLiftAction.queryId);
  for (auto q = query.begin(), e = query.end(); q != e; ++q)
    callback(
    {
      GET_COMPONENT(InactiveEnableLiftAction, q, EntityId, eid),
      GET_COMPONENT(InactiveEnableLiftAction, q, int, key),
      GET_COMPONENT(InactiveEnableLiftAction, q, int, lift_key),
      GET_COMPONENT(InactiveEnableLiftAction, q, bool, is_active)
    });
}
Index* InactiveEnableLiftAction::index()
{
  return nullptr;
}
InactiveEnableLiftAction InactiveEnableLiftAction::get(QueryIterator &iter)
{
  return {
      GET_COMPONENT(InactiveEnableLiftAction, iter, EntityId, eid),
      GET_COMPONENT(InactiveEnableLiftAction, iter, int, key),
      GET_COMPONENT(InactiveEnableLiftAction, iter, int, lift_key),
      GET_COMPONENT(InactiveEnableLiftAction, iter, bool, is_active)
    };
}
int InactiveOpenCageAction::count()
{
  return ecs::get_entities_count(_reg_query_InactiveOpenCageAction.queryId);
}
template <typename Callable> void InactiveOpenCageAction::foreach(Callable callback)
{
  Query &query = ecs::get_query(_reg_query_InactiveOpenCageAction.queryId);
  for (auto q = query.begin(), e = query.end(); q != e; ++q)
    callback(
    {
      GET_COMPONENT(InactiveOpenCageAction, q, EntityId, eid),
      GET_COMPONENT(InactiveOpenCageAction, q, int, key),
      GET_COMPONENT(InactiveOpenCageAction, q, bool, is_active)
    });
}
Index* InactiveOpenCageAction::index()
{
  return nullptr;
}
InactiveOpenCageAction InactiveOpenCageAction::get(QueryIterator &iter)
{
  return {
      GET_COMPONENT(InactiveOpenCageAction, iter, EntityId, eid),
      GET_COMPONENT(InactiveOpenCageAction, iter, int, key),
      GET_COMPONENT(InactiveOpenCageAction, iter, bool, is_active)
    };
}
int InactiveKillPlayerAction::count()
{
  return ecs::get_entities_count(_reg_query_InactiveKillPlayerAction.queryId);
}
template <typename Callable> void InactiveKillPlayerAction::foreach(Callable callback)
{
  Query &query = ecs::get_query(_reg_query_InactiveKillPlayerAction.queryId);
  for (auto q = query.begin(), e = query.end(); q != e; ++q)
    callback(
    {
      GET_COMPONENT(InactiveKillPlayerAction, q, EntityId, eid),
      GET_COMPONENT(InactiveKillPlayerAction, q, int, key),
      GET_COMPONENT(InactiveKillPlayerAction, q, bool, is_active)
    });
}
Index* InactiveKillPlayerAction::index()
{
  return nullptr;
}
InactiveKillPlayerAction InactiveKillPlayerAction::get(QueryIterator &iter)
{
  return {
      GET_COMPONENT(InactiveKillPlayerAction, iter, EntityId, eid),
      GET_COMPONENT(InactiveKillPlayerAction, iter, int, key),
      GET_COMPONENT(InactiveKillPlayerAction, iter, bool, is_active)
    };
}
int AlivePlayer::count()
{
  return ecs::get_entities_count(_reg_query_AlivePlayer.queryId);
}
template <typename Callable> void AlivePlayer::foreach(Callable callback)
{
  Query &query = ecs::get_query(_reg_query_AlivePlayer.queryId);
  for (auto q = query.begin(), e = query.end(); q != e; ++q)
    callback(
    {
      GET_COMPONENT(AlivePlayer, q, EntityId, eid),
      GET_COMPONENT(AlivePlayer, q, glm::vec2, pos)
    });
}
Index* AlivePlayer::index()
{
  return nullptr;
}
AlivePlayer AlivePlayer::get(QueryIterator &iter)
{
  return {
      GET_COMPONENT(AlivePlayer, iter, EntityId, eid),
      GET_COMPONENT(AlivePlayer, iter, glm::vec2, pos)
    };
}
int PlayerSpawnZone::count()
{
  return ecs::get_entities_count(_reg_query_PlayerSpawnZone.queryId);
}
template <typename Callable> void PlayerSpawnZone::foreach(Callable callback)
{
  Query &query = ecs::get_query(_reg_query_PlayerSpawnZone.queryId);
  for (auto q = query.begin(), e = query.end(); q != e; ++q)
    callback(
    {
      GET_COMPONENT(PlayerSpawnZone, q, glm::vec2, pos)
    });
}
Index* PlayerSpawnZone::index()
{
  return nullptr;
}
PlayerSpawnZone PlayerSpawnZone::get(QueryIterator &iter)
{
  return {
      GET_COMPONENT(PlayerSpawnZone, iter, glm::vec2, pos)
    };
}
static void bind_trigger_to_action_run(const RawArg &stage_or_event, Query&)
{
  ecs::wait_system_dependencies(HASH("bind_trigger_to_action"));
  Index &index = *ecs::find_index(HASH("triggers.cpp_index_by_NotBindedTrigger_action_key"));
  Query &query1 = ecs::get_query(_reg_query_Action.queryId);
  for (auto q1 = query1.begin(), e = query1.end(); q1 != e; ++q1)
  {
    Action action =
    {
      GET_COMPONENT(Action, q1, EntityId, eid),
      GET_COMPONENT(Action, q1, int, key)
    };
    if (Query *pquery2 = index.find(*(uint32_t*)(uint8_t*)&action.key))
    {
      Query &query2 = *pquery2;
      for (auto q2 = query2.begin(), e = query2.end(); q2 != e; ++q2)
      {
        NotBindedTrigger trigger =
        {
          GET_COMPONENT(NotBindedTrigger, q2, EntityId, eid),
          GET_COMPONENT(NotBindedTrigger, q2, int, key),
          GET_COMPONENT(NotBindedTrigger, q2, int, action_key),
          GET_COMPONENT(NotBindedTrigger, q2, EntityId, action_eid),
          GET_COMPONENT(NotBindedTrigger, q2, bool, is_binded)
        };
        bind_trigger_to_action::run(*(EventUpdate*)stage_or_event.mem, eastl::move(action), eastl::move(trigger));
      }
    }
  }
}
static SystemDescription _reg_sys_bind_trigger_to_action(HASH("bind_trigger_to_action"), &bind_trigger_to_action_run, HASH("EventUpdate"), "*", "*");

static void update_active_switch_triggers_run(const RawArg &stage_or_event, Query&)
{
  ecs::wait_system_dependencies(HASH("update_active_switch_triggers"));
  Index &index = *ecs::find_index(HASH("triggers.cpp_index_by_ActiveTrigger_action_eid"));
  Query &query1 = ecs::get_query(_reg_query_InactiveEnableLiftAction.queryId);
  for (auto q1 = query1.begin(), e = query1.end(); q1 != e; ++q1)
  {
    InactiveEnableLiftAction action =
    {
      GET_COMPONENT(InactiveEnableLiftAction, q1, EntityId, eid),
      GET_COMPONENT(InactiveEnableLiftAction, q1, int, key),
      GET_COMPONENT(InactiveEnableLiftAction, q1, int, lift_key),
      GET_COMPONENT(InactiveEnableLiftAction, q1, bool, is_active)
    };
    if (Query *pquery2 = index.find(*(uint32_t*)(uint8_t*)&action.eid))
    {
      Query &query2 = *pquery2;
      for (auto q2 = query2.begin(), e = query2.end(); q2 != e; ++q2)
      {
        ActiveTrigger trigger =
        {
          GET_COMPONENT(ActiveTrigger, q2, EntityId, eid),
          GET_COMPONENT(ActiveTrigger, q2, EntityId, action_eid),
          GET_COMPONENT(ActiveTrigger, q2, int, key),
          GET_COMPONENT(ActiveTrigger, q2, glm::vec2, pos),
          GET_COMPONENT(ActiveTrigger, q2, bool, is_active)
        };
        update_active_switch_triggers::run(*(EventUpdate*)stage_or_event.mem, eastl::move(action), eastl::move(trigger));
      }
    }
  }
}
static SystemDescription _reg_sys_update_active_switch_triggers(HASH("update_active_switch_triggers"), &update_active_switch_triggers_run, HASH("EventUpdate"), "*", "*");

static void update_active_open_cage_triggers_run(const RawArg &stage_or_event, Query&)
{
  ecs::wait_system_dependencies(HASH("update_active_open_cage_triggers"));
  Index &index = *ecs::find_index(HASH("triggers.cpp_index_by_ActiveTrigger_action_eid"));
  Query &query1 = ecs::get_query(_reg_query_InactiveOpenCageAction.queryId);
  for (auto q1 = query1.begin(), e = query1.end(); q1 != e; ++q1)
  {
    InactiveOpenCageAction action =
    {
      GET_COMPONENT(InactiveOpenCageAction, q1, EntityId, eid),
      GET_COMPONENT(InactiveOpenCageAction, q1, int, key),
      GET_COMPONENT(InactiveOpenCageAction, q1, bool, is_active)
    };
    if (Query *pquery2 = index.find(*(uint32_t*)(uint8_t*)&action.eid))
    {
      Query &query2 = *pquery2;
      for (auto q2 = query2.begin(), e = query2.end(); q2 != e; ++q2)
      {
        ActiveTrigger trigger =
        {
          GET_COMPONENT(ActiveTrigger, q2, EntityId, eid),
          GET_COMPONENT(ActiveTrigger, q2, EntityId, action_eid),
          GET_COMPONENT(ActiveTrigger, q2, int, key),
          GET_COMPONENT(ActiveTrigger, q2, glm::vec2, pos),
          GET_COMPONENT(ActiveTrigger, q2, bool, is_active)
        };
        update_active_open_cage_triggers::run(*(EventUpdate*)stage_or_event.mem, eastl::move(action), eastl::move(trigger));
      }
    }
  }
}
static SystemDescription _reg_sys_update_active_open_cage_triggers(HASH("update_active_open_cage_triggers"), &update_active_open_cage_triggers_run, HASH("EventUpdate"), "*", "*");

static void update_active_zone_triggers_run(const RawArg &stage_or_event, Query&)
{
  ecs::wait_system_dependencies(HASH("update_active_zone_triggers"));
  Index &index = *ecs::find_index(HASH("triggers.cpp_index_by_ActiveTrigger_action_eid"));
  Query &query1 = ecs::get_query(_reg_query_InactiveKillPlayerAction.queryId);
  for (auto q1 = query1.begin(), e = query1.end(); q1 != e; ++q1)
  {
    InactiveKillPlayerAction action =
    {
      GET_COMPONENT(InactiveKillPlayerAction, q1, EntityId, eid),
      GET_COMPONENT(InactiveKillPlayerAction, q1, int, key),
      GET_COMPONENT(InactiveKillPlayerAction, q1, bool, is_active)
    };
    if (Query *pquery2 = index.find(*(uint32_t*)(uint8_t*)&action.eid))
    {
      Query &query2 = *pquery2;
      for (auto q2 = query2.begin(), e = query2.end(); q2 != e; ++q2)
      {
        ActiveTrigger trigger =
        {
          GET_COMPONENT(ActiveTrigger, q2, EntityId, eid),
          GET_COMPONENT(ActiveTrigger, q2, EntityId, action_eid),
          GET_COMPONENT(ActiveTrigger, q2, int, key),
          GET_COMPONENT(ActiveTrigger, q2, glm::vec2, pos),
          GET_COMPONENT(ActiveTrigger, q2, bool, is_active)
        };
        update_active_zone_triggers::run(*(EventUpdate*)stage_or_event.mem, eastl::move(action), eastl::move(trigger));
      }
    }
  }
}
static SystemDescription _reg_sys_update_active_zone_triggers(HASH("update_active_zone_triggers"), &update_active_zone_triggers_run, HASH("EventUpdate"), "*", "*");

static void update_inactive_switch_triggers_run(const RawArg &stage_or_event, Query&)
{
  ecs::wait_system_dependencies(HASH("update_inactive_switch_triggers"));
  Query &query1 = ecs::get_query(_reg_query_AlivePlayer.queryId);
  Query &query2 = ecs::get_query(_reg_query_InactiveSwitchTrigger.queryId);
  for (auto q1 = query1.begin(), e = query1.end(); q1 != e; ++q1)
  {
    AlivePlayer player =
    {
      GET_COMPONENT(AlivePlayer, q1, EntityId, eid),
      GET_COMPONENT(AlivePlayer, q1, glm::vec2, pos)
    };
    for (auto q2 = query2.begin(), e = query2.end(); q2 != e; ++q2)
    {
      InactiveSwitchTrigger trigger =
      {
        GET_COMPONENT(InactiveSwitchTrigger, q2, int, key),
        GET_COMPONENT(InactiveSwitchTrigger, q2, glm::vec2, pos),
        GET_COMPONENT(InactiveSwitchTrigger, q2, bool, is_active)
      };
      update_inactive_switch_triggers::run(*(EventUpdate*)stage_or_event.mem, eastl::move(player), eastl::move(trigger));
    }
  }
}
static SystemDescription _reg_sys_update_inactive_switch_triggers(HASH("update_inactive_switch_triggers"), &update_inactive_switch_triggers_run, HASH("EventUpdate"), "*", "*");

static void update_inactive_zone_triggers_run(const RawArg &stage_or_event, Query&)
{
  ecs::wait_system_dependencies(HASH("update_inactive_zone_triggers"));
  Query &query1 = ecs::get_query(_reg_query_AlivePlayer.queryId);
  Query &query2 = ecs::get_query(_reg_query_InactiveZoneTrigger.queryId);
  for (auto q1 = query1.begin(), e = query1.end(); q1 != e; ++q1)
  {
    AlivePlayer player =
    {
      GET_COMPONENT(AlivePlayer, q1, EntityId, eid),
      GET_COMPONENT(AlivePlayer, q1, glm::vec2, pos)
    };
    for (auto q2 = query2.begin(), e = query2.end(); q2 != e; ++q2)
    {
      InactiveZoneTrigger trigger =
      {
        GET_COMPONENT(InactiveZoneTrigger, q2, int, key),
        GET_COMPONENT(InactiveZoneTrigger, q2, glm::vec2, pos),
        GET_COMPONENT(InactiveZoneTrigger, q2, glm::vec4, collision_rect),
        GET_COMPONENT(InactiveZoneTrigger, q2, bool, is_active)
      };
      update_inactive_zone_triggers::run(*(EventUpdate*)stage_or_event.mem, eastl::move(player), eastl::move(trigger));
    }
  }
}
static SystemDescription _reg_sys_update_inactive_zone_triggers(HASH("update_inactive_zone_triggers"), &update_inactive_zone_triggers_run, HASH("EventUpdate"), "*", "*");

static void update_player_spawner_run(const RawArg &stage_or_event, Query &query)
{
  ecs::wait_system_dependencies(HASH("update_player_spawner"));
  for (auto q = query.begin(), e = query.end(); q != e; ++q)
    update_player_spawner::run(*(EventUpdate*)stage_or_event.mem);
}
static SystemDescription _reg_sys_update_player_spawner(HASH("update_player_spawner"), &update_player_spawner_run, HASH("EventUpdate"), update_player_spawner_query_desc, "*", "*", nullptr);


#endif // __CODEGEN__
