//! GENERATED FILE


#ifndef __CODEGEN__

#include "update.ecs.cpp"

static RegCompSpec<HUD> _reg_comp_hud("hud");
template <> int RegCompSpec<HUD>::ID = -1;

static RegCompSpec<UserInput> _reg_comp_user_input("user_input");
template <> int RegCompSpec<UserInput>::ID = -1;

static RegCompSpec<TextureAtlas> _reg_comp_texture("texture");
template <> int RegCompSpec<TextureAtlas>::ID = -1;

static RegCompSpec<AnimGraph> _reg_comp_anim_graph("anim_graph");
template <> int RegCompSpec<AnimGraph>::ID = -1;

static RegCompSpec<AnimState> _reg_comp_anim_state("anim_state");
template <> int RegCompSpec<AnimState>::ID = -1;

static RegSysSpec<3448512920, decltype(load_texture_handler)> _reg_sys_load_texture_handler("load_texture_handler", load_texture_handler, { "texture" }, {  }, {  }, {  }, {  }, true); 
static RegSysSpec<1621823280, decltype(update_position)> _reg_sys_update_position("update_position", update_position, { "vel", "pos" }, {  }, { "is_active" }, { "is_alive" }, {  }, true); 
static RegSysSpec<4245480229, decltype(update_position_for_active)> _reg_sys_update_position_for_active("update_position_for_active", update_position_for_active, { "vel", "pos" }, {  }, {  }, { "is_active", "is_alive" }, {  }, true); 
static RegSysSpec<510498044, decltype(update_anim_frame)> _reg_sys_update_anim_frame("update_anim_frame", update_anim_frame, { "anim_graph", "anim_state", "frame" }, {  }, {  }, {  }, {  }, true); 
static RegSysSpec<1007297635, decltype(render_walls)> _reg_sys_render_walls("render_walls", render_walls, { "texture", "frame", "pos" }, { "wall" }, {  }, { "is_alive" }, {  }, true); 
static RegSysSpec<2012399197, decltype(render_normal)> _reg_sys_render_normal("render_normal", render_normal, { "texture", "frame", "pos", "dir" }, {  }, { "wall" }, { "is_alive" }, {  }, true); 
static RegSysSpec<484250714, decltype(read_controls)> _reg_sys_read_controls("read_controls", read_controls, { "user_input", "vel" }, {  }, {  }, {  }, {  }, true); 
static RegSysSpec<1920783676, decltype(apply_controls)> _reg_sys_apply_controls("apply_controls", apply_controls, { "user_input", "is_on_ground", "jump", "vel", "dir" }, {  }, {  }, {  }, {  }, true); 
static RegSysSpec<3949714102, decltype(apply_jump)> _reg_sys_apply_jump("apply_jump", apply_jump, { "jump", "is_on_ground", "vel" }, {  }, {  }, {  }, {  }, true); 
static RegSysSpec<3962763712, decltype(apply_gravity)> _reg_sys_apply_gravity("apply_gravity", apply_gravity, { "gravity", "vel" }, {  }, {  }, { "is_alive" }, {  }, true); 
static RegSysSpec<3962250550, decltype(update_collisions)> _reg_sys_update_collisions("update_collisions", update_collisions, { "collision_rect", "is_on_ground", "pos", "vel" }, { "user_input" }, {  }, {  }, {  }, true); 
static RegSysSpec<1590712904, decltype(update_auto_move_collisions)> _reg_sys_update_auto_move_collisions("update_auto_move_collisions", update_auto_move_collisions, { "eid", "collision_rect", "pos", "vel", "dir" }, { "enemy" }, {  }, { "is_alive" }, {  }, true); 
static RegSysSpec<2354991095, decltype(select_current_anim_frame)> _reg_sys_select_current_anim_frame("select_current_anim_frame", select_current_anim_frame, { "vel", "anim_graph", "is_on_ground", "texture", "anim_state" }, {  }, { "user_input" }, {  }, {  }, true); 
static RegSysSpec<948899453, decltype(select_current_anim_frame_for_player)> _reg_sys_select_current_anim_frame_for_player("select_current_anim_frame_for_player", select_current_anim_frame_for_player, { "vel", "anim_graph", "user_input", "is_on_ground", "texture", "anim_state" }, {  }, {  }, {  }, {  }, true); 
static RegSysSpec<3007763911, decltype(validate_position)> _reg_sys_validate_position("validate_position", validate_position, { "pos" }, {  }, {  }, {  }, {  }, true); 
static RegSysSpec<917788925, decltype(update_enemies_collisions)> _reg_sys_update_enemies_collisions("update_enemies_collisions", update_enemies_collisions, { "eid", "jump", "collision_rect", "pos", "vel", "dir" }, { "user_input" }, {  }, { "is_alive" }, {  }, true); 
static RegSysSpec<1963192783, decltype(remove_death_fx)> _reg_sys_remove_death_fx("remove_death_fx", remove_death_fx, { "eid", "anim_state", "is_alive" }, {  }, {  }, { "is_alive" }, {  }, true); 
static RegSysSpec<1506347756, decltype(update_camera)> _reg_sys_update_camera("update_camera", update_camera, { "pos" }, { "user_input" }, {  }, {  }, {  }, true); 
static RegSysSpec<1381440062, decltype(process_on_kill_event)> _reg_sys_process_on_kill_event("process_on_kill_event", process_on_kill_event, { "hud" }, {  }, {  }, {  }, {  }, true); 

static __forceinline void exec_BricksQuery(const glm::vec4 & collision_rect, const glm::vec2 & pos) {}

static RegSysSpec<1315101757, decltype(exec_BricksQuery)> _reg_sys_exec_BricksQuery("exec_BricksQuery", exec_BricksQuery, { "collision_rect", "pos" }, { "wall" }, {  }, {  }, {  }, false); 

template <> template <> __forceinline void RegSysSpec<1315101757, decltype(exec_BricksQuery)>::execImpl<>(const ExtraArguments &args, Query &query, eastl::index_sequence<0, 1>) const {}

template <typename C> void BricksQuery::exec(C callback)
{
  using SysType = RegSysSpec<1315101757, decltype(exec_BricksQuery)>;
  const auto &sys = _reg_sys_exec_BricksQuery;
  const auto &components = sys.queryDesc.components;
  auto &query = g_mgr->queries[sys.id];
  for (int chunkIdx = 0; chunkIdx < query.chunksCount; ++chunkIdx)
  {
    const int compIdx_collision_rect = query.desc.getComponentIndex(hash::cstr("collision_rect"));
    const int compIdx_pos = query.desc.getComponentIndex(hash::cstr("pos"));
    QueryChunk &chunk_collision_rect = query.chunks[compIdx_collision_rect + chunkIdx * query.componentsCount];
    QueryChunk &chunk_pos = query.chunks[compIdx_pos + chunkIdx * query.componentsCount];
    auto it_collision_rect = chunk_collision_rect.begin<glm::vec4>();
    auto it_pos = chunk_pos.begin<glm::vec2>();
    for (int i = 0; i < query.entitiesInChunk[chunkIdx]; ++i, ++it_collision_rect, ++it_pos)
      callback(*it_collision_rect, *it_pos);
  }
}

static __forceinline void exec_AliveEnemiesQuery(EntityId eid, const glm::vec4 & collision_rect, const glm::vec2 & pos, bool & is_alive, glm::vec2 & vel, AnimState & anim_state) {}

static RegSysSpec<335811716, decltype(exec_AliveEnemiesQuery)> _reg_sys_exec_AliveEnemiesQuery("exec_AliveEnemiesQuery", exec_AliveEnemiesQuery, { "eid", "collision_rect", "pos", "is_alive", "vel", "anim_state" }, { "enemy" }, {  }, { "is_alive" }, {  }, false); 

template <> template <> __forceinline void RegSysSpec<335811716, decltype(exec_AliveEnemiesQuery)>::execImpl<>(const ExtraArguments &args, Query &query, eastl::index_sequence<0, 1, 2, 3, 4, 5>) const {}

template <typename C> void AliveEnemiesQuery::exec(C callback)
{
  using SysType = RegSysSpec<335811716, decltype(exec_AliveEnemiesQuery)>;
  const auto &sys = _reg_sys_exec_AliveEnemiesQuery;
  const auto &components = sys.queryDesc.components;
  auto &query = g_mgr->queries[sys.id];
  for (int chunkIdx = 0; chunkIdx < query.chunksCount; ++chunkIdx)
  {
    const int compIdx_eid = query.desc.getComponentIndex(hash::cstr("eid"));
    const int compIdx_collision_rect = query.desc.getComponentIndex(hash::cstr("collision_rect"));
    const int compIdx_pos = query.desc.getComponentIndex(hash::cstr("pos"));
    const int compIdx_is_alive = query.desc.getComponentIndex(hash::cstr("is_alive"));
    const int compIdx_vel = query.desc.getComponentIndex(hash::cstr("vel"));
    const int compIdx_anim_state = query.desc.getComponentIndex(hash::cstr("anim_state"));
    QueryChunk &chunk_eid = query.chunks[compIdx_eid + chunkIdx * query.componentsCount];
    QueryChunk &chunk_collision_rect = query.chunks[compIdx_collision_rect + chunkIdx * query.componentsCount];
    QueryChunk &chunk_pos = query.chunks[compIdx_pos + chunkIdx * query.componentsCount];
    QueryChunk &chunk_is_alive = query.chunks[compIdx_is_alive + chunkIdx * query.componentsCount];
    QueryChunk &chunk_vel = query.chunks[compIdx_vel + chunkIdx * query.componentsCount];
    QueryChunk &chunk_anim_state = query.chunks[compIdx_anim_state + chunkIdx * query.componentsCount];
    auto it_eid = chunk_eid.begin<EntityId>();
    auto it_collision_rect = chunk_collision_rect.begin<glm::vec4>();
    auto it_pos = chunk_pos.begin<glm::vec2>();
    auto it_is_alive = chunk_is_alive.begin<bool>();
    auto it_vel = chunk_vel.begin<glm::vec2>();
    auto it_anim_state = chunk_anim_state.begin<AnimState>();
    for (int i = 0; i < query.entitiesInChunk[chunkIdx]; ++i, ++it_eid, ++it_collision_rect, ++it_pos, ++it_is_alive, ++it_vel, ++it_anim_state)
      callback(*it_eid, *it_collision_rect, *it_pos, *it_is_alive, *it_vel, *it_anim_state);
  }
}

template <> template <> __forceinline void RegSysSpec<3448512920, decltype(load_texture_handler)>::execImpl<>(const ExtraArguments &args, Query &query, eastl::index_sequence<0, 1>) const
{
  for (int chunkIdx = 0; chunkIdx < query.chunksCount; ++chunkIdx)
  {
    const int compIdx_texture = query.desc.getComponentIndex(hash::cstr("texture"));
    QueryChunk &chunk_texture = query.chunks[compIdx_texture + chunkIdx * query.componentsCount];
    auto it_texture = chunk_texture.begin<TextureAtlas>();
    for (int i = 0; i < query.entitiesInChunk[chunkIdx]; ++i, ++it_texture)
      load_texture_handler(*(EventOnEntityCreate*)args.stageOrEvent.mem, *it_texture);
  }
}

template <> template <> __forceinline void RegSysSpec<1621823280, decltype(update_position)>::execImpl<>(const ExtraArguments &args, Query &query, eastl::index_sequence<0, 1, 2>) const
{
  for (int chunkIdx = 0; chunkIdx < query.chunksCount; ++chunkIdx)
  {
    const int compIdx_vel = query.desc.getComponentIndex(hash::cstr("vel"));
    const int compIdx_pos = query.desc.getComponentIndex(hash::cstr("pos"));
    QueryChunk &chunk_vel = query.chunks[compIdx_vel + chunkIdx * query.componentsCount];
    QueryChunk &chunk_pos = query.chunks[compIdx_pos + chunkIdx * query.componentsCount];
    auto it_vel = chunk_vel.begin<glm::vec2>();
    auto it_pos = chunk_pos.begin<glm::vec2>();
    for (int i = 0; i < query.entitiesInChunk[chunkIdx]; ++i, ++it_vel, ++it_pos)
      update_position(*(UpdateStage*)args.stageOrEvent.mem, *it_vel, *it_pos);
  }
}

template <> template <> __forceinline void RegSysSpec<4245480229, decltype(update_position_for_active)>::execImpl<>(const ExtraArguments &args, Query &query, eastl::index_sequence<0, 1, 2>) const
{
  for (int chunkIdx = 0; chunkIdx < query.chunksCount; ++chunkIdx)
  {
    const int compIdx_vel = query.desc.getComponentIndex(hash::cstr("vel"));
    const int compIdx_pos = query.desc.getComponentIndex(hash::cstr("pos"));
    QueryChunk &chunk_vel = query.chunks[compIdx_vel + chunkIdx * query.componentsCount];
    QueryChunk &chunk_pos = query.chunks[compIdx_pos + chunkIdx * query.componentsCount];
    auto it_vel = chunk_vel.begin<glm::vec2>();
    auto it_pos = chunk_pos.begin<glm::vec2>();
    for (int i = 0; i < query.entitiesInChunk[chunkIdx]; ++i, ++it_vel, ++it_pos)
      update_position_for_active(*(UpdateStage*)args.stageOrEvent.mem, *it_vel, *it_pos);
  }
}

template <> template <> __forceinline void RegSysSpec<510498044, decltype(update_anim_frame)>::execImpl<>(const ExtraArguments &args, Query &query, eastl::index_sequence<0, 1, 2, 3>) const
{
  for (int chunkIdx = 0; chunkIdx < query.chunksCount; ++chunkIdx)
  {
    const int compIdx_anim_graph = query.desc.getComponentIndex(hash::cstr("anim_graph"));
    const int compIdx_anim_state = query.desc.getComponentIndex(hash::cstr("anim_state"));
    const int compIdx_frame = query.desc.getComponentIndex(hash::cstr("frame"));
    QueryChunk &chunk_anim_graph = query.chunks[compIdx_anim_graph + chunkIdx * query.componentsCount];
    QueryChunk &chunk_anim_state = query.chunks[compIdx_anim_state + chunkIdx * query.componentsCount];
    QueryChunk &chunk_frame = query.chunks[compIdx_frame + chunkIdx * query.componentsCount];
    auto it_anim_graph = chunk_anim_graph.begin<AnimGraph>();
    auto it_anim_state = chunk_anim_state.begin<AnimState>();
    auto it_frame = chunk_frame.begin<glm::vec4>();
    for (int i = 0; i < query.entitiesInChunk[chunkIdx]; ++i, ++it_anim_graph, ++it_anim_state, ++it_frame)
      update_anim_frame(*(UpdateStage*)args.stageOrEvent.mem, *it_anim_graph, *it_anim_state, *it_frame);
  }
}

template <> template <> __forceinline void RegSysSpec<1007297635, decltype(render_walls)>::execImpl<>(const ExtraArguments &args, Query &query, eastl::index_sequence<0, 1, 2, 3>) const
{
  for (int chunkIdx = 0; chunkIdx < query.chunksCount; ++chunkIdx)
  {
    const int compIdx_texture = query.desc.getComponentIndex(hash::cstr("texture"));
    const int compIdx_frame = query.desc.getComponentIndex(hash::cstr("frame"));
    const int compIdx_pos = query.desc.getComponentIndex(hash::cstr("pos"));
    QueryChunk &chunk_texture = query.chunks[compIdx_texture + chunkIdx * query.componentsCount];
    QueryChunk &chunk_frame = query.chunks[compIdx_frame + chunkIdx * query.componentsCount];
    QueryChunk &chunk_pos = query.chunks[compIdx_pos + chunkIdx * query.componentsCount];
    auto it_texture = chunk_texture.begin<TextureAtlas>();
    auto it_frame = chunk_frame.begin<glm::vec4>();
    auto it_pos = chunk_pos.begin<glm::vec2>();
    for (int i = 0; i < query.entitiesInChunk[chunkIdx]; ++i, ++it_texture, ++it_frame, ++it_pos)
      render_walls(*(RenderStage*)args.stageOrEvent.mem, *it_texture, *it_frame, *it_pos);
  }
}

template <> template <> __forceinline void RegSysSpec<2012399197, decltype(render_normal)>::execImpl<>(const ExtraArguments &args, Query &query, eastl::index_sequence<0, 1, 2, 3, 4>) const
{
  for (int chunkIdx = 0; chunkIdx < query.chunksCount; ++chunkIdx)
  {
    const int compIdx_texture = query.desc.getComponentIndex(hash::cstr("texture"));
    const int compIdx_frame = query.desc.getComponentIndex(hash::cstr("frame"));
    const int compIdx_pos = query.desc.getComponentIndex(hash::cstr("pos"));
    const int compIdx_dir = query.desc.getComponentIndex(hash::cstr("dir"));
    QueryChunk &chunk_texture = query.chunks[compIdx_texture + chunkIdx * query.componentsCount];
    QueryChunk &chunk_frame = query.chunks[compIdx_frame + chunkIdx * query.componentsCount];
    QueryChunk &chunk_pos = query.chunks[compIdx_pos + chunkIdx * query.componentsCount];
    QueryChunk &chunk_dir = query.chunks[compIdx_dir + chunkIdx * query.componentsCount];
    auto it_texture = chunk_texture.begin<TextureAtlas>();
    auto it_frame = chunk_frame.begin<glm::vec4>();
    auto it_pos = chunk_pos.begin<glm::vec2>();
    auto it_dir = chunk_dir.begin<float>();
    for (int i = 0; i < query.entitiesInChunk[chunkIdx]; ++i, ++it_texture, ++it_frame, ++it_pos, ++it_dir)
      render_normal(*(RenderStage*)args.stageOrEvent.mem, *it_texture, *it_frame, *it_pos, *it_dir);
  }
}

template <> template <> __forceinline void RegSysSpec<484250714, decltype(read_controls)>::execImpl<>(const ExtraArguments &args, Query &query, eastl::index_sequence<0, 1, 2>) const
{
  for (int chunkIdx = 0; chunkIdx < query.chunksCount; ++chunkIdx)
  {
    const int compIdx_user_input = query.desc.getComponentIndex(hash::cstr("user_input"));
    const int compIdx_vel = query.desc.getComponentIndex(hash::cstr("vel"));
    QueryChunk &chunk_user_input = query.chunks[compIdx_user_input + chunkIdx * query.componentsCount];
    QueryChunk &chunk_vel = query.chunks[compIdx_vel + chunkIdx * query.componentsCount];
    auto it_user_input = chunk_user_input.begin<UserInput>();
    auto it_vel = chunk_vel.begin<glm::vec2>();
    for (int i = 0; i < query.entitiesInChunk[chunkIdx]; ++i, ++it_user_input, ++it_vel)
      read_controls(*(UpdateStage*)args.stageOrEvent.mem, *it_user_input, *it_vel);
  }
}

template <> template <> __forceinline void RegSysSpec<1920783676, decltype(apply_controls)>::execImpl<>(const ExtraArguments &args, Query &query, eastl::index_sequence<0, 1, 2, 3, 4, 5>) const
{
  for (int chunkIdx = 0; chunkIdx < query.chunksCount; ++chunkIdx)
  {
    const int compIdx_user_input = query.desc.getComponentIndex(hash::cstr("user_input"));
    const int compIdx_is_on_ground = query.desc.getComponentIndex(hash::cstr("is_on_ground"));
    const int compIdx_jump = query.desc.getComponentIndex(hash::cstr("jump"));
    const int compIdx_vel = query.desc.getComponentIndex(hash::cstr("vel"));
    const int compIdx_dir = query.desc.getComponentIndex(hash::cstr("dir"));
    QueryChunk &chunk_user_input = query.chunks[compIdx_user_input + chunkIdx * query.componentsCount];
    QueryChunk &chunk_is_on_ground = query.chunks[compIdx_is_on_ground + chunkIdx * query.componentsCount];
    QueryChunk &chunk_jump = query.chunks[compIdx_jump + chunkIdx * query.componentsCount];
    QueryChunk &chunk_vel = query.chunks[compIdx_vel + chunkIdx * query.componentsCount];
    QueryChunk &chunk_dir = query.chunks[compIdx_dir + chunkIdx * query.componentsCount];
    auto it_user_input = chunk_user_input.begin<UserInput>();
    auto it_is_on_ground = chunk_is_on_ground.begin<bool>();
    auto it_jump = chunk_jump.begin<Jump>();
    auto it_vel = chunk_vel.begin<glm::vec2>();
    auto it_dir = chunk_dir.begin<float>();
    for (int i = 0; i < query.entitiesInChunk[chunkIdx]; ++i, ++it_user_input, ++it_is_on_ground, ++it_jump, ++it_vel, ++it_dir)
      apply_controls(*(UpdateStage*)args.stageOrEvent.mem, *it_user_input, *it_is_on_ground, *it_jump, *it_vel, *it_dir);
  }
}

template <> template <> __forceinline void RegSysSpec<3949714102, decltype(apply_jump)>::execImpl<>(const ExtraArguments &args, Query &query, eastl::index_sequence<0, 1, 2, 3>) const
{
  for (int chunkIdx = 0; chunkIdx < query.chunksCount; ++chunkIdx)
  {
    const int compIdx_jump = query.desc.getComponentIndex(hash::cstr("jump"));
    const int compIdx_is_on_ground = query.desc.getComponentIndex(hash::cstr("is_on_ground"));
    const int compIdx_vel = query.desc.getComponentIndex(hash::cstr("vel"));
    QueryChunk &chunk_jump = query.chunks[compIdx_jump + chunkIdx * query.componentsCount];
    QueryChunk &chunk_is_on_ground = query.chunks[compIdx_is_on_ground + chunkIdx * query.componentsCount];
    QueryChunk &chunk_vel = query.chunks[compIdx_vel + chunkIdx * query.componentsCount];
    auto it_jump = chunk_jump.begin<Jump>();
    auto it_is_on_ground = chunk_is_on_ground.begin<bool>();
    auto it_vel = chunk_vel.begin<glm::vec2>();
    for (int i = 0; i < query.entitiesInChunk[chunkIdx]; ++i, ++it_jump, ++it_is_on_ground, ++it_vel)
      apply_jump(*(UpdateStage*)args.stageOrEvent.mem, *it_jump, *it_is_on_ground, *it_vel);
  }
}

template <> template <> __forceinline void RegSysSpec<3962763712, decltype(apply_gravity)>::execImpl<>(const ExtraArguments &args, Query &query, eastl::index_sequence<0, 1, 2>) const
{
  for (int chunkIdx = 0; chunkIdx < query.chunksCount; ++chunkIdx)
  {
    const int compIdx_gravity = query.desc.getComponentIndex(hash::cstr("gravity"));
    const int compIdx_vel = query.desc.getComponentIndex(hash::cstr("vel"));
    QueryChunk &chunk_gravity = query.chunks[compIdx_gravity + chunkIdx * query.componentsCount];
    QueryChunk &chunk_vel = query.chunks[compIdx_vel + chunkIdx * query.componentsCount];
    auto it_gravity = chunk_gravity.begin<Gravity>();
    auto it_vel = chunk_vel.begin<glm::vec2>();
    for (int i = 0; i < query.entitiesInChunk[chunkIdx]; ++i, ++it_gravity, ++it_vel)
      apply_gravity(*(UpdateStage*)args.stageOrEvent.mem, *it_gravity, *it_vel);
  }
}

template <> template <> __forceinline void RegSysSpec<3962250550, decltype(update_collisions)>::execImpl<>(const ExtraArguments &args, Query &query, eastl::index_sequence<0, 1, 2, 3, 4>) const
{
  for (int chunkIdx = 0; chunkIdx < query.chunksCount; ++chunkIdx)
  {
    const int compIdx_collision_rect = query.desc.getComponentIndex(hash::cstr("collision_rect"));
    const int compIdx_is_on_ground = query.desc.getComponentIndex(hash::cstr("is_on_ground"));
    const int compIdx_pos = query.desc.getComponentIndex(hash::cstr("pos"));
    const int compIdx_vel = query.desc.getComponentIndex(hash::cstr("vel"));
    QueryChunk &chunk_collision_rect = query.chunks[compIdx_collision_rect + chunkIdx * query.componentsCount];
    QueryChunk &chunk_is_on_ground = query.chunks[compIdx_is_on_ground + chunkIdx * query.componentsCount];
    QueryChunk &chunk_pos = query.chunks[compIdx_pos + chunkIdx * query.componentsCount];
    QueryChunk &chunk_vel = query.chunks[compIdx_vel + chunkIdx * query.componentsCount];
    auto it_collision_rect = chunk_collision_rect.begin<glm::vec4>();
    auto it_is_on_ground = chunk_is_on_ground.begin<bool>();
    auto it_pos = chunk_pos.begin<glm::vec2>();
    auto it_vel = chunk_vel.begin<glm::vec2>();
    for (int i = 0; i < query.entitiesInChunk[chunkIdx]; ++i, ++it_collision_rect, ++it_is_on_ground, ++it_pos, ++it_vel)
      update_collisions(*(UpdateStage*)args.stageOrEvent.mem, *it_collision_rect, *it_is_on_ground, *it_pos, *it_vel);
  }
}

template <> template <> __forceinline void RegSysSpec<1590712904, decltype(update_auto_move_collisions)>::execImpl<>(const ExtraArguments &args, Query &query, eastl::index_sequence<0, 1, 2, 3, 4, 5>) const
{
  for (int chunkIdx = 0; chunkIdx < query.chunksCount; ++chunkIdx)
  {
    const int compIdx_eid = query.desc.getComponentIndex(hash::cstr("eid"));
    const int compIdx_collision_rect = query.desc.getComponentIndex(hash::cstr("collision_rect"));
    const int compIdx_pos = query.desc.getComponentIndex(hash::cstr("pos"));
    const int compIdx_vel = query.desc.getComponentIndex(hash::cstr("vel"));
    const int compIdx_dir = query.desc.getComponentIndex(hash::cstr("dir"));
    QueryChunk &chunk_eid = query.chunks[compIdx_eid + chunkIdx * query.componentsCount];
    QueryChunk &chunk_collision_rect = query.chunks[compIdx_collision_rect + chunkIdx * query.componentsCount];
    QueryChunk &chunk_pos = query.chunks[compIdx_pos + chunkIdx * query.componentsCount];
    QueryChunk &chunk_vel = query.chunks[compIdx_vel + chunkIdx * query.componentsCount];
    QueryChunk &chunk_dir = query.chunks[compIdx_dir + chunkIdx * query.componentsCount];
    auto it_eid = chunk_eid.begin<EntityId>();
    auto it_collision_rect = chunk_collision_rect.begin<glm::vec4>();
    auto it_pos = chunk_pos.begin<glm::vec2>();
    auto it_vel = chunk_vel.begin<glm::vec2>();
    auto it_dir = chunk_dir.begin<float>();
    for (int i = 0; i < query.entitiesInChunk[chunkIdx]; ++i, ++it_eid, ++it_collision_rect, ++it_pos, ++it_vel, ++it_dir)
      update_auto_move_collisions(*(UpdateStage*)args.stageOrEvent.mem, *it_eid, *it_collision_rect, *it_pos, *it_vel, *it_dir);
  }
}

template <> template <> __forceinline void RegSysSpec<2354991095, decltype(select_current_anim_frame)>::execImpl<>(const ExtraArguments &args, Query &query, eastl::index_sequence<0, 1, 2, 3, 4, 5>) const
{
  for (int chunkIdx = 0; chunkIdx < query.chunksCount; ++chunkIdx)
  {
    const int compIdx_vel = query.desc.getComponentIndex(hash::cstr("vel"));
    const int compIdx_anim_graph = query.desc.getComponentIndex(hash::cstr("anim_graph"));
    const int compIdx_is_on_ground = query.desc.getComponentIndex(hash::cstr("is_on_ground"));
    const int compIdx_texture = query.desc.getComponentIndex(hash::cstr("texture"));
    const int compIdx_anim_state = query.desc.getComponentIndex(hash::cstr("anim_state"));
    QueryChunk &chunk_vel = query.chunks[compIdx_vel + chunkIdx * query.componentsCount];
    QueryChunk &chunk_anim_graph = query.chunks[compIdx_anim_graph + chunkIdx * query.componentsCount];
    QueryChunk &chunk_is_on_ground = query.chunks[compIdx_is_on_ground + chunkIdx * query.componentsCount];
    QueryChunk &chunk_texture = query.chunks[compIdx_texture + chunkIdx * query.componentsCount];
    QueryChunk &chunk_anim_state = query.chunks[compIdx_anim_state + chunkIdx * query.componentsCount];
    auto it_vel = chunk_vel.begin<glm::vec2>();
    auto it_anim_graph = chunk_anim_graph.begin<AnimGraph>();
    auto it_is_on_ground = chunk_is_on_ground.begin<bool>();
    auto it_texture = chunk_texture.begin<TextureAtlas>();
    auto it_anim_state = chunk_anim_state.begin<AnimState>();
    for (int i = 0; i < query.entitiesInChunk[chunkIdx]; ++i, ++it_vel, ++it_anim_graph, ++it_is_on_ground, ++it_texture, ++it_anim_state)
      select_current_anim_frame(*(UpdateStage*)args.stageOrEvent.mem, *it_vel, *it_anim_graph, *it_is_on_ground, *it_texture, *it_anim_state);
  }
}

template <> template <> __forceinline void RegSysSpec<948899453, decltype(select_current_anim_frame_for_player)>::execImpl<>(const ExtraArguments &args, Query &query, eastl::index_sequence<0, 1, 2, 3, 4, 5, 6>) const
{
  for (int chunkIdx = 0; chunkIdx < query.chunksCount; ++chunkIdx)
  {
    const int compIdx_vel = query.desc.getComponentIndex(hash::cstr("vel"));
    const int compIdx_anim_graph = query.desc.getComponentIndex(hash::cstr("anim_graph"));
    const int compIdx_user_input = query.desc.getComponentIndex(hash::cstr("user_input"));
    const int compIdx_is_on_ground = query.desc.getComponentIndex(hash::cstr("is_on_ground"));
    const int compIdx_texture = query.desc.getComponentIndex(hash::cstr("texture"));
    const int compIdx_anim_state = query.desc.getComponentIndex(hash::cstr("anim_state"));
    QueryChunk &chunk_vel = query.chunks[compIdx_vel + chunkIdx * query.componentsCount];
    QueryChunk &chunk_anim_graph = query.chunks[compIdx_anim_graph + chunkIdx * query.componentsCount];
    QueryChunk &chunk_user_input = query.chunks[compIdx_user_input + chunkIdx * query.componentsCount];
    QueryChunk &chunk_is_on_ground = query.chunks[compIdx_is_on_ground + chunkIdx * query.componentsCount];
    QueryChunk &chunk_texture = query.chunks[compIdx_texture + chunkIdx * query.componentsCount];
    QueryChunk &chunk_anim_state = query.chunks[compIdx_anim_state + chunkIdx * query.componentsCount];
    auto it_vel = chunk_vel.begin<glm::vec2>();
    auto it_anim_graph = chunk_anim_graph.begin<AnimGraph>();
    auto it_user_input = chunk_user_input.begin<UserInput>();
    auto it_is_on_ground = chunk_is_on_ground.begin<bool>();
    auto it_texture = chunk_texture.begin<TextureAtlas>();
    auto it_anim_state = chunk_anim_state.begin<AnimState>();
    for (int i = 0; i < query.entitiesInChunk[chunkIdx]; ++i, ++it_vel, ++it_anim_graph, ++it_user_input, ++it_is_on_ground, ++it_texture, ++it_anim_state)
      select_current_anim_frame_for_player(*(UpdateStage*)args.stageOrEvent.mem, *it_vel, *it_anim_graph, *it_user_input, *it_is_on_ground, *it_texture, *it_anim_state);
  }
}

template <> template <> __forceinline void RegSysSpec<3007763911, decltype(validate_position)>::execImpl<>(const ExtraArguments &args, Query &query, eastl::index_sequence<0, 1>) const
{
  for (int chunkIdx = 0; chunkIdx < query.chunksCount; ++chunkIdx)
  {
    const int compIdx_pos = query.desc.getComponentIndex(hash::cstr("pos"));
    QueryChunk &chunk_pos = query.chunks[compIdx_pos + chunkIdx * query.componentsCount];
    auto it_pos = chunk_pos.begin<glm::vec2>();
    for (int i = 0; i < query.entitiesInChunk[chunkIdx]; ++i, ++it_pos)
      validate_position(*(UpdateStage*)args.stageOrEvent.mem, *it_pos);
  }
}

template <> template <> __forceinline void RegSysSpec<917788925, decltype(update_enemies_collisions)>::execImpl<>(const ExtraArguments &args, Query &query, eastl::index_sequence<0, 1, 2, 3, 4, 5, 6>) const
{
  for (int chunkIdx = 0; chunkIdx < query.chunksCount; ++chunkIdx)
  {
    const int compIdx_eid = query.desc.getComponentIndex(hash::cstr("eid"));
    const int compIdx_jump = query.desc.getComponentIndex(hash::cstr("jump"));
    const int compIdx_collision_rect = query.desc.getComponentIndex(hash::cstr("collision_rect"));
    const int compIdx_pos = query.desc.getComponentIndex(hash::cstr("pos"));
    const int compIdx_vel = query.desc.getComponentIndex(hash::cstr("vel"));
    const int compIdx_dir = query.desc.getComponentIndex(hash::cstr("dir"));
    QueryChunk &chunk_eid = query.chunks[compIdx_eid + chunkIdx * query.componentsCount];
    QueryChunk &chunk_jump = query.chunks[compIdx_jump + chunkIdx * query.componentsCount];
    QueryChunk &chunk_collision_rect = query.chunks[compIdx_collision_rect + chunkIdx * query.componentsCount];
    QueryChunk &chunk_pos = query.chunks[compIdx_pos + chunkIdx * query.componentsCount];
    QueryChunk &chunk_vel = query.chunks[compIdx_vel + chunkIdx * query.componentsCount];
    QueryChunk &chunk_dir = query.chunks[compIdx_dir + chunkIdx * query.componentsCount];
    auto it_eid = chunk_eid.begin<EntityId>();
    auto it_jump = chunk_jump.begin<Jump>();
    auto it_collision_rect = chunk_collision_rect.begin<glm::vec4>();
    auto it_pos = chunk_pos.begin<glm::vec2>();
    auto it_vel = chunk_vel.begin<glm::vec2>();
    auto it_dir = chunk_dir.begin<float>();
    for (int i = 0; i < query.entitiesInChunk[chunkIdx]; ++i, ++it_eid, ++it_jump, ++it_collision_rect, ++it_pos, ++it_vel, ++it_dir)
      update_enemies_collisions(*(UpdateStage*)args.stageOrEvent.mem, *it_eid, *it_jump, *it_collision_rect, *it_pos, *it_vel, *it_dir);
  }
}

template <> template <> __forceinline void RegSysSpec<1963192783, decltype(remove_death_fx)>::execImpl<>(const ExtraArguments &args, Query &query, eastl::index_sequence<0, 1, 2, 3>) const
{
  for (int chunkIdx = 0; chunkIdx < query.chunksCount; ++chunkIdx)
  {
    const int compIdx_eid = query.desc.getComponentIndex(hash::cstr("eid"));
    const int compIdx_anim_state = query.desc.getComponentIndex(hash::cstr("anim_state"));
    const int compIdx_is_alive = query.desc.getComponentIndex(hash::cstr("is_alive"));
    QueryChunk &chunk_eid = query.chunks[compIdx_eid + chunkIdx * query.componentsCount];
    QueryChunk &chunk_anim_state = query.chunks[compIdx_anim_state + chunkIdx * query.componentsCount];
    QueryChunk &chunk_is_alive = query.chunks[compIdx_is_alive + chunkIdx * query.componentsCount];
    auto it_eid = chunk_eid.begin<EntityId>();
    auto it_anim_state = chunk_anim_state.begin<AnimState>();
    auto it_is_alive = chunk_is_alive.begin<bool>();
    for (int i = 0; i < query.entitiesInChunk[chunkIdx]; ++i, ++it_eid, ++it_anim_state, ++it_is_alive)
      remove_death_fx(*(UpdateStage*)args.stageOrEvent.mem, *it_eid, *it_anim_state, *it_is_alive);
  }
}

template <> template <> __forceinline void RegSysSpec<1506347756, decltype(update_camera)>::execImpl<>(const ExtraArguments &args, Query &query, eastl::index_sequence<0, 1>) const
{
  for (int chunkIdx = 0; chunkIdx < query.chunksCount; ++chunkIdx)
  {
    const int compIdx_pos = query.desc.getComponentIndex(hash::cstr("pos"));
    QueryChunk &chunk_pos = query.chunks[compIdx_pos + chunkIdx * query.componentsCount];
    auto it_pos = chunk_pos.begin<glm::vec2>();
    for (int i = 0; i < query.entitiesInChunk[chunkIdx]; ++i, ++it_pos)
      update_camera(*(UpdateStage*)args.stageOrEvent.mem, *it_pos);
  }
}

template <> template <> __forceinline void RegSysSpec<1381440062, decltype(process_on_kill_event)>::execImpl<>(const ExtraArguments &args, Query &query, eastl::index_sequence<0, 1>) const
{
  for (int chunkIdx = 0; chunkIdx < query.chunksCount; ++chunkIdx)
  {
    const int compIdx_hud = query.desc.getComponentIndex(hash::cstr("hud"));
    QueryChunk &chunk_hud = query.chunks[compIdx_hud + chunkIdx * query.componentsCount];
    auto it_hud = chunk_hud.begin<HUD>();
    for (int i = 0; i < query.entitiesInChunk[chunkIdx]; ++i, ++it_hud)
      process_on_kill_event(*(EventOnKillEnemy*)args.stageOrEvent.mem, *it_hud);
  }
}

#endif // __CODEGEN__
