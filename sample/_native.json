{
  "funcs": [
    {
      "name": "formatInt",
      "decl": "string formatInt(int64, const string&in = \"\", uint = 0)",
      "return": "string",
      "params": [
        {
          "type": "int64"
        },
        {
          "type": "string"
        },
        {
          "type": "uint32"
        }
      ]
    },
    {
      "name": "formatUInt",
      "decl": "string formatUInt(uint64, const string&in = \"\", uint = 0)",
      "return": "string",
      "params": [
        {
          "type": "uint64"
        },
        {
          "type": "string"
        },
        {
          "type": "uint32"
        }
      ]
    },
    {
      "name": "formatFloat",
      "decl": "string formatFloat(double, const string&in = \"\", uint = 0, uint = 0)",
      "return": "string",
      "params": [
        {
          "type": "double"
        },
        {
          "type": "string"
        },
        {
          "type": "uint32"
        },
        {
          "type": "uint32"
        }
      ]
    },
    {
      "name": "parseInt",
      "decl": "int64 parseInt(const string&in, uint = 10, uint&out = 0)",
      "return": "int64",
      "params": [
        {
          "type": "string"
        },
        {
          "type": "uint32"
        },
        {
          "type": "uint32"
        }
      ]
    },
    {
      "name": "parseUInt",
      "decl": "uint64 parseUInt(const string&in, uint = 10, uint&out = 0)",
      "return": "uint64",
      "params": [
        {
          "type": "string"
        },
        {
          "type": "uint32"
        },
        {
          "type": "uint32"
        }
      ]
    },
    {
      "name": "parseFloat",
      "decl": "double parseFloat(const string&in, uint&out = 0)",
      "return": "double",
      "params": [
        {
          "type": "string"
        },
        {
          "type": "uint32"
        }
      ]
    },
    {
      "name": "join",
      "decl": "string join(const string[]&in, const string&in)",
      "return": "string",
      "params": [
        {
          "type": "array"
        },
        {
          "type": "string"
        }
      ]
    },
    {
      "name": "fpFromIEEE",
      "decl": "float fpFromIEEE(uint)",
      "return": "float",
      "params": [
        {
          "type": "uint32"
        }
      ]
    },
    {
      "name": "fpToIEEE",
      "decl": "uint fpToIEEE(float)",
      "return": "uint32",
      "params": [
        {
          "type": "float"
        }
      ]
    },
    {
      "name": "fpFromIEEE",
      "decl": "double fpFromIEEE(uint64)",
      "return": "double",
      "params": [
        {
          "type": "uint64"
        }
      ]
    },
    {
      "name": "fpToIEEE",
      "decl": "uint64 fpToIEEE(double)",
      "return": "uint64",
      "params": [
        {
          "type": "double"
        }
      ]
    },
    {
      "name": "closeTo",
      "decl": "bool closeTo(float, float, float = 0.00001f)",
      "return": "bool",
      "params": [
        {
          "type": "float"
        },
        {
          "type": "float"
        },
        {
          "type": "float"
        }
      ]
    },
    {
      "name": "closeTo",
      "decl": "bool closeTo(double, double, double = 0.0000000001)",
      "return": "bool",
      "params": [
        {
          "type": "double"
        },
        {
          "type": "double"
        },
        {
          "type": "double"
        }
      ]
    },
    {
      "name": "cos",
      "decl": "float cos(float)",
      "return": "float",
      "params": [
        {
          "type": "float"
        }
      ]
    },
    {
      "name": "sin",
      "decl": "float sin(float)",
      "return": "float",
      "params": [
        {
          "type": "float"
        }
      ]
    },
    {
      "name": "tan",
      "decl": "float tan(float)",
      "return": "float",
      "params": [
        {
          "type": "float"
        }
      ]
    },
    {
      "name": "acos",
      "decl": "float acos(float)",
      "return": "float",
      "params": [
        {
          "type": "float"
        }
      ]
    },
    {
      "name": "asin",
      "decl": "float asin(float)",
      "return": "float",
      "params": [
        {
          "type": "float"
        }
      ]
    },
    {
      "name": "atan",
      "decl": "float atan(float)",
      "return": "float",
      "params": [
        {
          "type": "float"
        }
      ]
    },
    {
      "name": "atan2",
      "decl": "float atan2(float, float)",
      "return": "float",
      "params": [
        {
          "type": "float"
        },
        {
          "type": "float"
        }
      ]
    },
    {
      "name": "cosh",
      "decl": "float cosh(float)",
      "return": "float",
      "params": [
        {
          "type": "float"
        }
      ]
    },
    {
      "name": "sinh",
      "decl": "float sinh(float)",
      "return": "float",
      "params": [
        {
          "type": "float"
        }
      ]
    },
    {
      "name": "tanh",
      "decl": "float tanh(float)",
      "return": "float",
      "params": [
        {
          "type": "float"
        }
      ]
    },
    {
      "name": "log",
      "decl": "float log(float)",
      "return": "float",
      "params": [
        {
          "type": "float"
        }
      ]
    },
    {
      "name": "log10",
      "decl": "float log10(float)",
      "return": "float",
      "params": [
        {
          "type": "float"
        }
      ]
    },
    {
      "name": "pow",
      "decl": "float pow(float, float)",
      "return": "float",
      "params": [
        {
          "type": "float"
        },
        {
          "type": "float"
        }
      ]
    },
    {
      "name": "sqrt",
      "decl": "float sqrt(float)",
      "return": "float",
      "params": [
        {
          "type": "float"
        }
      ]
    },
    {
      "name": "ceil",
      "decl": "float ceil(float)",
      "return": "float",
      "params": [
        {
          "type": "float"
        }
      ]
    },
    {
      "name": "abs",
      "decl": "float abs(float)",
      "return": "float",
      "params": [
        {
          "type": "float"
        }
      ]
    },
    {
      "name": "floor",
      "decl": "float floor(float)",
      "return": "float",
      "params": [
        {
          "type": "float"
        }
      ]
    },
    {
      "name": "fraction",
      "decl": "float fraction(float)",
      "return": "float",
      "params": [
        {
          "type": "float"
        }
      ]
    },
    {
      "name": "dot",
      "decl": "float dot(const vec2&in, const vec2&in)",
      "return": "float",
      "params": [
        {
          "type": "vec2"
        },
        {
          "type": "vec2"
        }
      ]
    },
    {
      "name": "length",
      "decl": "float length(const vec2&in)",
      "return": "float",
      "params": [
        {
          "type": "vec2"
        }
      ]
    },
    {
      "name": "normalize",
      "decl": "vec2@ normalize(const vec2&in)",
      "return": "vec2",
      "params": [
        {
          "type": "vec2"
        }
      ]
    },
    {
      "name": "cross",
      "decl": "vec3@ cross(const vec3&in, const vec3&in)",
      "return": "vec3",
      "params": [
        {
          "type": "vec3"
        },
        {
          "type": "vec3"
        }
      ]
    },
    {
      "name": "dot",
      "decl": "float dot(const vec3&in, const vec3&in)",
      "return": "float",
      "params": [
        {
          "type": "vec3"
        },
        {
          "type": "vec3"
        }
      ]
    },
    {
      "name": "length",
      "decl": "float length(const vec3&in)",
      "return": "float",
      "params": [
        {
          "type": "vec3"
        }
      ]
    },
    {
      "name": "normalize",
      "decl": "vec3@ normalize(const vec3&in)",
      "return": "vec3",
      "params": [
        {
          "type": "vec3"
        }
      ]
    },
    {
      "name": "dot",
      "decl": "float dot(const vec4&in, const vec4&in)",
      "return": "float",
      "params": [
        {
          "type": "vec4"
        },
        {
          "type": "vec4"
        }
      ]
    },
    {
      "name": "length",
      "decl": "float length(const vec4&in)",
      "return": "float",
      "params": [
        {
          "type": "vec4"
        }
      ]
    },
    {
      "name": "normalize",
      "decl": "vec4@ normalize(const vec4&in)",
      "return": "vec4",
      "params": [
        {
          "type": "vec4"
        }
      ]
    },
    {
      "name": "print",
      "decl": "void print(string&in)",
      "return": "void",
      "params": [
        {
          "type": "string"
        }
      ]
    },
    {
      "name": "print_release",
      "decl": "void print_release(string&in)",
      "return": "void",
      "params": [
        {
          "type": "string"
        }
      ]
    },
    {
      "name": "create_entity",
      "decl": "void create_entity(string&in, Map@)",
      "return": "void",
      "params": [
        {
          "type": "string"
        },
        {
          "type": "Map"
        }
      ]
    },
    {
      "name": "create_entities_from_file",
      "decl": "void create_entities_from_file(string&in)",
      "return": "void",
      "params": [
        {
          "type": "string"
        }
      ]
    },
    {
      "name": "delete_entity",
      "decl": "void delete_entity(const EntityId@)",
      "return": "void",
      "params": [
        {
          "type": "EntityId"
        }
      ]
    }
  ],
  "types": [
    {
      "name": "array",
      "flags": 69,
      "props": [],
      "methods": [
        {
          "name": "opIndex",
          "decl": "T& opIndex(uint)",
          "return": "T",
          "params": [
            {
              "type": "uint32"
            }
          ]
        },
        {
          "name": "opIndex",
          "decl": "const T& opIndex(uint) const",
          "return": "T",
          "params": [
            {
              "type": "uint32"
            }
          ]
        },
        {
          "name": "opAssign",
          "decl": "T[]& opAssign(const T[]&in)",
          "return": "array",
          "params": [
            {
              "type": "array"
            }
          ]
        },
        {
          "name": "insertAt",
          "decl": "void insertAt(uint, const T&in)",
          "return": "void",
          "params": [
            {
              "type": "uint32"
            },
            {
              "type": "T"
            }
          ]
        },
        {
          "name": "insertAt",
          "decl": "void insertAt(uint, const T[]&inout)",
          "return": "void",
          "params": [
            {
              "type": "uint32"
            },
            {
              "type": "array"
            }
          ]
        },
        {
          "name": "insertLast",
          "decl": "void insertLast(const T&in)",
          "return": "void",
          "params": [
            {
              "type": "T"
            }
          ]
        },
        {
          "name": "removeAt",
          "decl": "void removeAt(uint)",
          "return": "void",
          "params": [
            {
              "type": "uint32"
            }
          ]
        },
        {
          "name": "removeLast",
          "decl": "void removeLast()",
          "return": "void",
          "params": []
        },
        {
          "name": "removeRange",
          "decl": "void removeRange(uint, uint)",
          "return": "void",
          "params": [
            {
              "type": "uint32"
            },
            {
              "type": "uint32"
            }
          ]
        },
        {
          "name": "length",
          "decl": "uint length() const",
          "return": "uint32",
          "params": []
        },
        {
          "name": "reserve",
          "decl": "void reserve(uint)",
          "return": "void",
          "params": [
            {
              "type": "uint32"
            }
          ]
        },
        {
          "name": "resize",
          "decl": "void resize(uint)",
          "return": "void",
          "params": [
            {
              "type": "uint32"
            }
          ]
        },
        {
          "name": "sortAsc",
          "decl": "void sortAsc()",
          "return": "void",
          "params": []
        },
        {
          "name": "sortAsc",
          "decl": "void sortAsc(uint, uint)",
          "return": "void",
          "params": [
            {
              "type": "uint32"
            },
            {
              "type": "uint32"
            }
          ]
        },
        {
          "name": "sortDesc",
          "decl": "void sortDesc()",
          "return": "void",
          "params": []
        },
        {
          "name": "sortDesc",
          "decl": "void sortDesc(uint, uint)",
          "return": "void",
          "params": [
            {
              "type": "uint32"
            },
            {
              "type": "uint32"
            }
          ]
        },
        {
          "name": "reverse",
          "decl": "void reverse()",
          "return": "void",
          "params": []
        },
        {
          "name": "find",
          "decl": "int find(const T&in) const",
          "return": "int32",
          "params": [
            {
              "type": "T"
            }
          ]
        },
        {
          "name": "find",
          "decl": "int find(uint, const T&in) const",
          "return": "int32",
          "params": [
            {
              "type": "uint32"
            },
            {
              "type": "T"
            }
          ]
        },
        {
          "name": "findByRef",
          "decl": "int findByRef(const T&in) const",
          "return": "int32",
          "params": [
            {
              "type": "T"
            }
          ]
        },
        {
          "name": "findByRef",
          "decl": "int findByRef(uint, const T&in) const",
          "return": "int32",
          "params": [
            {
              "type": "uint32"
            },
            {
              "type": "T"
            }
          ]
        },
        {
          "name": "opEquals",
          "decl": "bool opEquals(const T[]&in) const",
          "return": "bool",
          "params": [
            {
              "type": "array"
            }
          ]
        },
        {
          "name": "isEmpty",
          "decl": "bool isEmpty() const",
          "return": "bool",
          "params": []
        },
        {
          "name": "sort",
          "decl": "void sort(array::less&in, uint = 0, uint = uint ( - 1 ))",
          "return": "void",
          "params": [
            {
              "type": "less"
            },
            {
              "type": "uint32"
            },
            {
              "type": "uint32"
            }
          ]
        },
        {
          "name": "get_length",
          "decl": "uint get_length() const",
          "return": "uint32",
          "params": []
        },
        {
          "name": "set_length",
          "decl": "void set_length(uint)",
          "return": "void",
          "params": [
            {
              "type": "uint32"
            }
          ]
        }
      ]
    },
    {
      "name": "string",
      "flags": 7938,
      "props": [],
      "methods": [
        {
          "name": "opAssign",
          "decl": "string& opAssign(const string&in)",
          "return": "string",
          "params": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "opAddAssign",
          "decl": "string& opAddAssign(const string&in)",
          "return": "string",
          "params": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "opEquals",
          "decl": "bool opEquals(const string&in) const",
          "return": "bool",
          "params": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "opCmp",
          "decl": "int opCmp(const string&in) const",
          "return": "int32",
          "params": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "opAdd",
          "decl": "string opAdd(const string&in) const",
          "return": "string",
          "params": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "length",
          "decl": "uint length() const",
          "return": "uint32",
          "params": []
        },
        {
          "name": "resize",
          "decl": "void resize(uint)",
          "return": "void",
          "params": [
            {
              "type": "uint32"
            }
          ]
        },
        {
          "name": "get_length",
          "decl": "uint get_length() const",
          "return": "uint32",
          "params": []
        },
        {
          "name": "set_length",
          "decl": "void set_length(uint)",
          "return": "void",
          "params": [
            {
              "type": "uint32"
            }
          ]
        },
        {
          "name": "isEmpty",
          "decl": "bool isEmpty() const",
          "return": "bool",
          "params": []
        },
        {
          "name": "opIndex",
          "decl": "uint8& opIndex(uint)",
          "return": "uint8",
          "params": [
            {
              "type": "uint32"
            }
          ]
        },
        {
          "name": "opIndex",
          "decl": "const uint8& opIndex(uint) const",
          "return": "uint8",
          "params": [
            {
              "type": "uint32"
            }
          ]
        },
        {
          "name": "opAssign",
          "decl": "string& opAssign(double)",
          "return": "string",
          "params": [
            {
              "type": "double"
            }
          ]
        },
        {
          "name": "opAddAssign",
          "decl": "string& opAddAssign(double)",
          "return": "string",
          "params": [
            {
              "type": "double"
            }
          ]
        },
        {
          "name": "opAdd",
          "decl": "string opAdd(double) const",
          "return": "string",
          "params": [
            {
              "type": "double"
            }
          ]
        },
        {
          "name": "opAdd_r",
          "decl": "string opAdd_r(double) const",
          "return": "string",
          "params": [
            {
              "type": "double"
            }
          ]
        },
        {
          "name": "opAssign",
          "decl": "string& opAssign(float)",
          "return": "string",
          "params": [
            {
              "type": "float"
            }
          ]
        },
        {
          "name": "opAddAssign",
          "decl": "string& opAddAssign(float)",
          "return": "string",
          "params": [
            {
              "type": "float"
            }
          ]
        },
        {
          "name": "opAdd",
          "decl": "string opAdd(float) const",
          "return": "string",
          "params": [
            {
              "type": "float"
            }
          ]
        },
        {
          "name": "opAdd_r",
          "decl": "string opAdd_r(float) const",
          "return": "string",
          "params": [
            {
              "type": "float"
            }
          ]
        },
        {
          "name": "opAssign",
          "decl": "string& opAssign(int64)",
          "return": "string",
          "params": [
            {
              "type": "int64"
            }
          ]
        },
        {
          "name": "opAddAssign",
          "decl": "string& opAddAssign(int64)",
          "return": "string",
          "params": [
            {
              "type": "int64"
            }
          ]
        },
        {
          "name": "opAdd",
          "decl": "string opAdd(int64) const",
          "return": "string",
          "params": [
            {
              "type": "int64"
            }
          ]
        },
        {
          "name": "opAdd_r",
          "decl": "string opAdd_r(int64) const",
          "return": "string",
          "params": [
            {
              "type": "int64"
            }
          ]
        },
        {
          "name": "opAssign",
          "decl": "string& opAssign(uint64)",
          "return": "string",
          "params": [
            {
              "type": "uint64"
            }
          ]
        },
        {
          "name": "opAddAssign",
          "decl": "string& opAddAssign(uint64)",
          "return": "string",
          "params": [
            {
              "type": "uint64"
            }
          ]
        },
        {
          "name": "opAdd",
          "decl": "string opAdd(uint64) const",
          "return": "string",
          "params": [
            {
              "type": "uint64"
            }
          ]
        },
        {
          "name": "opAdd_r",
          "decl": "string opAdd_r(uint64) const",
          "return": "string",
          "params": [
            {
              "type": "uint64"
            }
          ]
        },
        {
          "name": "opAssign",
          "decl": "string& opAssign(bool)",
          "return": "string",
          "params": [
            {
              "type": "bool"
            }
          ]
        },
        {
          "name": "opAddAssign",
          "decl": "string& opAddAssign(bool)",
          "return": "string",
          "params": [
            {
              "type": "bool"
            }
          ]
        },
        {
          "name": "opAdd",
          "decl": "string opAdd(bool) const",
          "return": "string",
          "params": [
            {
              "type": "bool"
            }
          ]
        },
        {
          "name": "opAdd_r",
          "decl": "string opAdd_r(bool) const",
          "return": "string",
          "params": [
            {
              "type": "bool"
            }
          ]
        },
        {
          "name": "substr",
          "decl": "string substr(uint = 0, int = - 1) const",
          "return": "string",
          "params": [
            {
              "type": "uint32"
            },
            {
              "type": "int32"
            }
          ]
        },
        {
          "name": "findFirst",
          "decl": "int findFirst(const string&in, uint = 0) const",
          "return": "int32",
          "params": [
            {
              "type": "string"
            },
            {
              "type": "uint32"
            }
          ]
        },
        {
          "name": "findFirstOf",
          "decl": "int findFirstOf(const string&in, uint = 0) const",
          "return": "int32",
          "params": [
            {
              "type": "string"
            },
            {
              "type": "uint32"
            }
          ]
        },
        {
          "name": "findFirstNotOf",
          "decl": "int findFirstNotOf(const string&in, uint = 0) const",
          "return": "int32",
          "params": [
            {
              "type": "string"
            },
            {
              "type": "uint32"
            }
          ]
        },
        {
          "name": "findLast",
          "decl": "int findLast(const string&in, int = - 1) const",
          "return": "int32",
          "params": [
            {
              "type": "string"
            },
            {
              "type": "int32"
            }
          ]
        },
        {
          "name": "findLastOf",
          "decl": "int findLastOf(const string&in, int = - 1) const",
          "return": "int32",
          "params": [
            {
              "type": "string"
            },
            {
              "type": "int32"
            }
          ]
        },
        {
          "name": "findLastNotOf",
          "decl": "int findLastNotOf(const string&in, int = - 1) const",
          "return": "int32",
          "params": [
            {
              "type": "string"
            },
            {
              "type": "int32"
            }
          ]
        },
        {
          "name": "insert",
          "decl": "void insert(uint, const string&in)",
          "return": "void",
          "params": [
            {
              "type": "uint32"
            },
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "erase",
          "decl": "void erase(uint, int = - 1)",
          "return": "void",
          "params": [
            {
              "type": "uint32"
            },
            {
              "type": "int32"
            }
          ]
        },
        {
          "name": "split",
          "decl": "string[]@ split(const string&in) const",
          "return": "array",
          "params": [
            {
              "type": "string"
            }
          ]
        }
      ]
    },
    {
      "name": "QueryIterator",
      "flags": 2882,
      "props": [],
      "methods": [
        {
          "name": "opAssign",
          "decl": "QueryIterator<T>& opAssign(const QueryIterator<T>&in)",
          "return": "QueryIterator",
          "params": [
            {
              "type": "QueryIterator"
            }
          ]
        },
        {
          "name": "hasNext",
          "decl": "bool hasNext() const",
          "return": "bool",
          "params": []
        },
        {
          "name": "opPreInc",
          "decl": "void opPreInc()",
          "return": "void",
          "params": []
        },
        {
          "name": "get",
          "decl": "T@ get()",
          "return": "T",
          "params": []
        }
      ]
    },
    {
      "name": "Count",
      "flags": 262209,
      "props": [],
      "methods": [
        {
          "name": "get",
          "decl": "int get()",
          "return": "int32",
          "params": []
        }
      ]
    },
    {
      "name": "Map",
      "flags": 262145,
      "props": [],
      "methods": [
        {
          "name": "set",
          "decl": "Map@ set(string&in, bool)",
          "return": "Map",
          "params": [
            {
              "type": "string"
            },
            {
              "type": "bool"
            }
          ]
        },
        {
          "name": "set",
          "decl": "Map@ set(string&in, int)",
          "return": "Map",
          "params": [
            {
              "type": "string"
            },
            {
              "type": "int32"
            }
          ]
        },
        {
          "name": "set",
          "decl": "Map@ set(string&in, float)",
          "return": "Map",
          "params": [
            {
              "type": "string"
            },
            {
              "type": "float"
            }
          ]
        },
        {
          "name": "set",
          "decl": "Map@ set(string&in, string&in)",
          "return": "Map",
          "params": [
            {
              "type": "string"
            },
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "set",
          "decl": "Map@ set(string&in, Map@)",
          "return": "Map",
          "params": [
            {
              "type": "string"
            },
            {
              "type": "Map"
            }
          ]
        },
        {
          "name": "set",
          "decl": "Map@ set(string&in, Array@)",
          "return": "Map",
          "params": [
            {
              "type": "string"
            },
            {
              "type": "Array"
            }
          ]
        },
        {
          "name": "getBool",
          "decl": "bool getBool(string&in)",
          "return": "bool",
          "params": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "getInt",
          "decl": "int getInt(string&in)",
          "return": "int32",
          "params": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "getFloat",
          "decl": "float getFloat(string&in)",
          "return": "float",
          "params": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "getString",
          "decl": "string getString(string&in)",
          "return": "string",
          "params": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "getMap",
          "decl": "Map@ getMap(string&in)",
          "return": "Map",
          "params": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "getArray",
          "decl": "Array@ getArray(string&in)",
          "return": "Array",
          "params": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "opImplConv",
          "decl": "Array@ opImplConv() const",
          "return": "Array",
          "params": []
        },
        {
          "name": "isMap",
          "decl": "bool isMap() const",
          "return": "bool",
          "params": []
        },
        {
          "name": "isArray",
          "decl": "bool isArray() const",
          "return": "bool",
          "params": []
        }
      ]
    },
    {
      "name": "Array",
      "flags": 262145,
      "props": [],
      "methods": [
        {
          "name": "push",
          "decl": "Array@ push(bool)",
          "return": "Array",
          "params": [
            {
              "type": "bool"
            }
          ]
        },
        {
          "name": "push",
          "decl": "Array@ push(int)",
          "return": "Array",
          "params": [
            {
              "type": "int32"
            }
          ]
        },
        {
          "name": "push",
          "decl": "Array@ push(float)",
          "return": "Array",
          "params": [
            {
              "type": "float"
            }
          ]
        },
        {
          "name": "push",
          "decl": "Array@ push(string&in)",
          "return": "Array",
          "params": [
            {
              "type": "string"
            }
          ]
        },
        {
          "name": "push",
          "decl": "Array@ push(Map@)",
          "return": "Array",
          "params": [
            {
              "type": "Map"
            }
          ]
        },
        {
          "name": "push",
          "decl": "Array@ push(Array@)",
          "return": "Array",
          "params": [
            {
              "type": "Array"
            }
          ]
        },
        {
          "name": "size",
          "decl": "int size()",
          "return": "int32",
          "params": []
        },
        {
          "name": "getBool",
          "decl": "bool getBool(int)",
          "return": "bool",
          "params": [
            {
              "type": "int32"
            }
          ]
        },
        {
          "name": "getInt",
          "decl": "int getInt(int)",
          "return": "int32",
          "params": [
            {
              "type": "int32"
            }
          ]
        },
        {
          "name": "getFloat",
          "decl": "float getFloat(int)",
          "return": "float",
          "params": [
            {
              "type": "int32"
            }
          ]
        },
        {
          "name": "getString",
          "decl": "string getString(int)",
          "return": "string",
          "params": [
            {
              "type": "int32"
            }
          ]
        },
        {
          "name": "getMap",
          "decl": "Map@ getMap(int)",
          "return": "Map",
          "params": [
            {
              "type": "int32"
            }
          ]
        },
        {
          "name": "getArray",
          "decl": "Array@ getArray(int)",
          "return": "Array",
          "params": [
            {
              "type": "int32"
            }
          ]
        },
        {
          "name": "opImplConv",
          "decl": "Map@ opImplConv() const",
          "return": "Map",
          "params": []
        },
        {
          "name": "isMap",
          "decl": "bool isMap() const",
          "return": "bool",
          "params": []
        },
        {
          "name": "isArray",
          "decl": "bool isArray() const",
          "return": "bool",
          "params": []
        }
      ]
    },
    {
      "name": "Query",
      "flags": 262209,
      "props": [],
      "methods": [
        {
          "name": "perform",
          "decl": "QueryIterator<T> perform()",
          "return": "QueryIterator",
          "params": []
        }
      ]
    },
    {
      "name": "EntityId",
      "flags": 262145,
      "props": [
        {
          "name": "handle",
          "type": "uint32"
        }
      ],
      "methods": [
        {
          "name": "opAssign",
          "decl": "EntityId& opAssign(const EntityId&in)",
          "return": "EntityId",
          "params": [
            {
              "type": "EntityId"
            }
          ]
        }
      ]
    },
    {
      "name": "boolean",
      "flags": 262145,
      "props": [
        {
          "name": "v",
          "type": "bool"
        }
      ],
      "methods": [
        {
          "name": "opAssign",
          "decl": "boolean& opAssign(const boolean&in)",
          "return": "boolean",
          "params": [
            {
              "type": "boolean"
            }
          ]
        },
        {
          "name": "opAssign",
          "decl": "boolean& opAssign(const bool&in)",
          "return": "boolean",
          "params": [
            {
              "type": "bool"
            }
          ]
        },
        {
          "name": "opImplConv",
          "decl": "bool opImplConv() const",
          "return": "bool",
          "params": []
        }
      ]
    },
    {
      "name": "real",
      "flags": 262145,
      "props": [
        {
          "name": "v",
          "type": "float"
        }
      ],
      "methods": [
        {
          "name": "opAssign",
          "decl": "real& opAssign(const real&in)",
          "return": "real",
          "params": [
            {
              "type": "real"
            }
          ]
        },
        {
          "name": "opAssign",
          "decl": "real& opAssign(const float&in)",
          "return": "real",
          "params": [
            {
              "type": "float"
            }
          ]
        },
        {
          "name": "opImplConv",
          "decl": "float opImplConv() const",
          "return": "float",
          "params": []
        }
      ]
    },
    {
      "name": "vec2",
      "flags": 262145,
      "props": [
        {
          "name": "x",
          "type": "float"
        },
        {
          "name": "y",
          "type": "float"
        }
      ],
      "methods": [
        {
          "name": "opAssign",
          "decl": "vec2& opAssign(const vec2&in)",
          "return": "vec2",
          "params": [
            {
              "type": "vec2"
            }
          ]
        },
        {
          "name": "opAddAssign",
          "decl": "vec2& opAddAssign(const vec2&in)",
          "return": "vec2",
          "params": [
            {
              "type": "vec2"
            }
          ]
        },
        {
          "name": "opSubAssign",
          "decl": "vec2& opSubAssign(const vec2&in)",
          "return": "vec2",
          "params": [
            {
              "type": "vec2"
            }
          ]
        },
        {
          "name": "opAdd",
          "decl": "vec2@ opAdd(const vec2&in) const",
          "return": "vec2",
          "params": [
            {
              "type": "vec2"
            }
          ]
        },
        {
          "name": "opSub",
          "decl": "vec2@ opSub(const vec2&in) const",
          "return": "vec2",
          "params": [
            {
              "type": "vec2"
            }
          ]
        },
        {
          "name": "opMul",
          "decl": "float opMul(const vec2&in) const",
          "return": "float",
          "params": [
            {
              "type": "vec2"
            }
          ]
        },
        {
          "name": "opMul",
          "decl": "vec2@ opMul(float) const",
          "return": "vec2",
          "params": [
            {
              "type": "float"
            }
          ]
        },
        {
          "name": "opMul_r",
          "decl": "vec2@ opMul_r(float) const",
          "return": "vec2",
          "params": [
            {
              "type": "float"
            }
          ]
        },
        {
          "name": "opMulAssign",
          "decl": "vec2@ opMulAssign(float) const",
          "return": "vec2",
          "params": [
            {
              "type": "float"
            }
          ]
        },
        {
          "name": "opNeg",
          "decl": "vec2@ opNeg() const",
          "return": "vec2",
          "params": []
        }
      ]
    },
    {
      "name": "vec3",
      "flags": 262145,
      "props": [
        {
          "name": "x",
          "type": "float"
        },
        {
          "name": "y",
          "type": "float"
        },
        {
          "name": "z",
          "type": "float"
        }
      ],
      "methods": [
        {
          "name": "opAssign",
          "decl": "vec3& opAssign(const vec3&in)",
          "return": "vec3",
          "params": [
            {
              "type": "vec3"
            }
          ]
        },
        {
          "name": "opAddAssign",
          "decl": "vec3& opAddAssign(const vec3&in)",
          "return": "vec3",
          "params": [
            {
              "type": "vec3"
            }
          ]
        },
        {
          "name": "opSubAssign",
          "decl": "vec3& opSubAssign(const vec3&in)",
          "return": "vec3",
          "params": [
            {
              "type": "vec3"
            }
          ]
        },
        {
          "name": "opAdd",
          "decl": "vec3@ opAdd(const vec3&in) const",
          "return": "vec3",
          "params": [
            {
              "type": "vec3"
            }
          ]
        },
        {
          "name": "opSub",
          "decl": "vec3@ opSub(const vec3&in) const",
          "return": "vec3",
          "params": [
            {
              "type": "vec3"
            }
          ]
        },
        {
          "name": "opMul",
          "decl": "float opMul(const vec3&in) const",
          "return": "float",
          "params": [
            {
              "type": "vec3"
            }
          ]
        },
        {
          "name": "opMod",
          "decl": "vec3@ opMod(const vec3&in) const",
          "return": "vec3",
          "params": [
            {
              "type": "vec3"
            }
          ]
        },
        {
          "name": "opMul",
          "decl": "vec3@ opMul(float) const",
          "return": "vec3",
          "params": [
            {
              "type": "float"
            }
          ]
        },
        {
          "name": "opMul_r",
          "decl": "vec3@ opMul_r(float) const",
          "return": "vec3",
          "params": [
            {
              "type": "float"
            }
          ]
        },
        {
          "name": "opMulAssign",
          "decl": "vec3@ opMulAssign(float) const",
          "return": "vec3",
          "params": [
            {
              "type": "float"
            }
          ]
        },
        {
          "name": "opNeg",
          "decl": "vec3@ opNeg() const",
          "return": "vec3",
          "params": []
        }
      ]
    },
    {
      "name": "vec4",
      "flags": 262145,
      "props": [
        {
          "name": "x",
          "type": "float"
        },
        {
          "name": "y",
          "type": "float"
        },
        {
          "name": "z",
          "type": "float"
        },
        {
          "name": "w",
          "type": "float"
        }
      ],
      "methods": [
        {
          "name": "opAssign",
          "decl": "vec4& opAssign(const vec4&in)",
          "return": "vec4",
          "params": [
            {
              "type": "vec4"
            }
          ]
        },
        {
          "name": "opAddAssign",
          "decl": "vec4& opAddAssign(const vec4&in)",
          "return": "vec4",
          "params": [
            {
              "type": "vec4"
            }
          ]
        },
        {
          "name": "opSubAssign",
          "decl": "vec4& opSubAssign(const vec4&in)",
          "return": "vec4",
          "params": [
            {
              "type": "vec4"
            }
          ]
        },
        {
          "name": "opAdd",
          "decl": "vec4@ opAdd(const vec4&in) const",
          "return": "vec4",
          "params": [
            {
              "type": "vec4"
            }
          ]
        },
        {
          "name": "opSub",
          "decl": "vec4@ opSub(const vec4&in) const",
          "return": "vec4",
          "params": [
            {
              "type": "vec4"
            }
          ]
        },
        {
          "name": "opMul",
          "decl": "float opMul(const vec4&in) const",
          "return": "float",
          "params": [
            {
              "type": "vec4"
            }
          ]
        },
        {
          "name": "opMul",
          "decl": "vec4@ opMul(float) const",
          "return": "vec4",
          "params": [
            {
              "type": "float"
            }
          ]
        },
        {
          "name": "opMul_r",
          "decl": "vec4@ opMul_r(float) const",
          "return": "vec4",
          "params": [
            {
              "type": "float"
            }
          ]
        },
        {
          "name": "opMulAssign",
          "decl": "vec4@ opMulAssign(float) const",
          "return": "vec4",
          "params": [
            {
              "type": "float"
            }
          ]
        },
        {
          "name": "opNeg",
          "decl": "vec4@ opNeg() const",
          "return": "vec4",
          "params": []
        }
      ]
    },
    {
      "name": "EventOnKillEnemy",
      "flags": 262145,
      "props": [
        {
          "name": "pos",
          "type": "vec2"
        }
      ],
      "methods": []
    },
    {
      "name": "EventOnWallHit",
      "flags": 262145,
      "props": [
        {
          "name": "d",
          "type": "float"
        },
        {
          "name": "normal",
          "type": "vec2"
        },
        {
          "name": "vel",
          "type": "vec2"
        }
      ],
      "methods": []
    },
    {
      "name": "UpdateStage",
      "flags": 262145,
      "props": [
        {
          "name": "dt",
          "type": "float"
        },
        {
          "name": "total",
          "type": "float"
        }
      ],
      "methods": []
    },
    {
      "name": "AutoMove",
      "flags": 262145,
      "props": [
        {
          "name": "jump",
          "type": "bool"
        },
        {
          "name": "time",
          "type": "float"
        },
        {
          "name": "duration",
          "type": "float"
        },
        {
          "name": "length",
          "type": "float"
        }
      ],
      "methods": []
    },
    {
      "name": "Jump",
      "flags": 262145,
      "props": [
        {
          "name": "active",
          "type": "bool"
        },
        {
          "name": "startTime",
          "type": "float"
        },
        {
          "name": "height",
          "type": "float"
        },
        {
          "name": "duration",
          "type": "float"
        }
      ],
      "methods": []
    },
    {
      "name": "TimerComponent",
      "flags": 262145,
      "props": [
        {
          "name": "time",
          "type": "float"
        },
        {
          "name": "period",
          "type": "float"
        }
      ],
      "methods": []
    },
    {
      "name": "HashedString",
      "flags": 262145,
      "props": [
        {
          "name": "hash",
          "type": "uint32"
        }
      ],
      "methods": [
        {
          "name": "str",
          "decl": "string str() const",
          "return": "string",
          "params": []
        }
      ]
    }
  ]
}
