//! GENERATED FILE


#ifndef __CODEGEN__

#include "update.cpp"

static ComponentDescriptionDetails<HUD> _reg_comp_HUD("HUD");
static ComponentDescriptionDetails<UserInput> _reg_comp_UserInput("UserInput");
static constexpr ConstComponentDescription load_texture_handler_components[] = {
  {HASH("texture"), ComponentType<TextureAtlas>::size, ComponentDescriptionFlags::kWrite},
};
static constexpr ConstQueryDescription load_texture_handler_query_desc = {
  make_const_array(load_texture_handler_components),
  empty_desc_array,
  empty_desc_array,
  empty_desc_array,
};
static constexpr ConstComponentDescription update_position_components[] = {
  {HASH("vel"), ComponentType<glm::vec2>::size, ComponentDescriptionFlags::kNone},
  {HASH("pos"), ComponentType<glm::vec2>::size, ComponentDescriptionFlags::kWrite},
};
static constexpr ConstComponentDescription update_position_have_components[] = {
  {HASH("is_alive"), 0},
};
static constexpr ConstComponentDescription update_position_not_have_components[] = {
  {HASH("is_active"), 0},
};
static constexpr ConstComponentDescription update_position_track_components[] = {
  {HASH("is_alive"), ComponentType<bool>::size},
};
static constexpr ConstQueryDescription update_position_query_desc = {
  make_const_array(update_position_components),
  make_const_array(update_position_have_components),
  make_const_array(update_position_not_have_components),
  make_const_array(update_position_track_components),
};
static constexpr ConstComponentDescription update_position_for_active_components[] = {
  {HASH("vel"), ComponentType<glm::vec2>::size, ComponentDescriptionFlags::kNone},
  {HASH("pos"), ComponentType<glm::vec2>::size, ComponentDescriptionFlags::kWrite},
};
static constexpr ConstComponentDescription update_position_for_active_have_components[] = {
  {HASH("is_alive"), 0},
  {HASH("is_active"), 0},
};
static constexpr ConstComponentDescription update_position_for_active_track_components[] = {
  {HASH("is_alive"), ComponentType<bool>::size},
  {HASH("is_active"), ComponentType<bool>::size},
};
static constexpr ConstQueryDescription update_position_for_active_query_desc = {
  make_const_array(update_position_for_active_components),
  make_const_array(update_position_for_active_have_components),
  empty_desc_array,
  make_const_array(update_position_for_active_track_components),
};
static constexpr ConstComponentDescription update_anim_frame_components[] = {
  {HASH("anim_graph"), ComponentType<AnimGraph>::size, ComponentDescriptionFlags::kNone},
  {HASH("anim_state"), ComponentType<AnimState>::size, ComponentDescriptionFlags::kWrite},
  {HASH("frame"), ComponentType<glm::vec4>::size, ComponentDescriptionFlags::kWrite},
};
static constexpr ConstQueryDescription update_anim_frame_query_desc = {
  make_const_array(update_anim_frame_components),
  empty_desc_array,
  empty_desc_array,
  empty_desc_array,
};
static constexpr ConstComponentDescription render_walls_components[] = {
  {HASH("texture"), ComponentType<TextureAtlas>::size, ComponentDescriptionFlags::kNone},
  {HASH("frame"), ComponentType<glm::vec4>::size, ComponentDescriptionFlags::kNone},
  {HASH("pos"), ComponentType<glm::vec2>::size, ComponentDescriptionFlags::kNone},
};
static constexpr ConstComponentDescription render_walls_have_components[] = {
  {HASH("wall"), 0},
  {HASH("is_alive"), 0},
};
static constexpr ConstComponentDescription render_walls_track_components[] = {
  {HASH("is_alive"), ComponentType<bool>::size},
};
static constexpr ConstQueryDescription render_walls_query_desc = {
  make_const_array(render_walls_components),
  make_const_array(render_walls_have_components),
  empty_desc_array,
  make_const_array(render_walls_track_components),
};
static constexpr ConstComponentDescription render_normal_components[] = {
  {HASH("texture"), ComponentType<TextureAtlas>::size, ComponentDescriptionFlags::kNone},
  {HASH("frame"), ComponentType<glm::vec4>::size, ComponentDescriptionFlags::kNone},
  {HASH("pos"), ComponentType<glm::vec2>::size, ComponentDescriptionFlags::kNone},
  {HASH("dir"), ComponentType<float>::size, ComponentDescriptionFlags::kNone},
};
static constexpr ConstComponentDescription render_normal_have_components[] = {
  {HASH("is_alive"), 0},
};
static constexpr ConstComponentDescription render_normal_not_have_components[] = {
  {HASH("wall"), 0},
};
static constexpr ConstComponentDescription render_normal_track_components[] = {
  {HASH("is_alive"), ComponentType<bool>::size},
};
static constexpr ConstQueryDescription render_normal_query_desc = {
  make_const_array(render_normal_components),
  make_const_array(render_normal_have_components),
  make_const_array(render_normal_not_have_components),
  make_const_array(render_normal_track_components),
};
static constexpr ConstComponentDescription read_controls_components[] = {
  {HASH("user_input"), ComponentType<UserInput>::size, ComponentDescriptionFlags::kWrite},
};
static constexpr ConstQueryDescription read_controls_query_desc = {
  make_const_array(read_controls_components),
  empty_desc_array,
  empty_desc_array,
  empty_desc_array,
};
static constexpr ConstComponentDescription apply_controls_components[] = {
  {HASH("user_input"), ComponentType<UserInput>::size, ComponentDescriptionFlags::kNone},
  {HASH("is_on_ground"), ComponentType<bool>::size, ComponentDescriptionFlags::kNone},
  {HASH("jump"), ComponentType<Jump>::size, ComponentDescriptionFlags::kWrite},
  {HASH("vel"), ComponentType<glm::vec2>::size, ComponentDescriptionFlags::kWrite},
  {HASH("dir"), ComponentType<float>::size, ComponentDescriptionFlags::kWrite},
};
static constexpr ConstQueryDescription apply_controls_query_desc = {
  make_const_array(apply_controls_components),
  empty_desc_array,
  empty_desc_array,
  empty_desc_array,
};
static constexpr ConstComponentDescription apply_jump_components[] = {
  {HASH("jump"), ComponentType<Jump>::size, ComponentDescriptionFlags::kWrite},
  {HASH("is_on_ground"), ComponentType<bool>::size, ComponentDescriptionFlags::kWrite},
  {HASH("vel"), ComponentType<glm::vec2>::size, ComponentDescriptionFlags::kWrite},
};
static constexpr ConstQueryDescription apply_jump_query_desc = {
  make_const_array(apply_jump_components),
  empty_desc_array,
  empty_desc_array,
  empty_desc_array,
};
static constexpr ConstComponentDescription apply_gravity_components[] = {
  {HASH("gravity"), ComponentType<Gravity>::size, ComponentDescriptionFlags::kNone},
  {HASH("vel"), ComponentType<glm::vec2>::size, ComponentDescriptionFlags::kWrite},
};
static constexpr ConstComponentDescription apply_gravity_have_components[] = {
  {HASH("is_alive"), 0},
};
static constexpr ConstComponentDescription apply_gravity_track_components[] = {
  {HASH("is_alive"), ComponentType<bool>::size},
};
static constexpr ConstQueryDescription apply_gravity_query_desc = {
  make_const_array(apply_gravity_components),
  make_const_array(apply_gravity_have_components),
  empty_desc_array,
  make_const_array(apply_gravity_track_components),
};
static constexpr ConstComponentDescription select_current_anim_frame_components[] = {
  {HASH("vel"), ComponentType<glm::vec2>::size, ComponentDescriptionFlags::kNone},
  {HASH("anim_graph"), ComponentType<AnimGraph>::size, ComponentDescriptionFlags::kNone},
  {HASH("is_on_ground"), ComponentType<bool>::size, ComponentDescriptionFlags::kNone},
  {HASH("texture"), ComponentType<TextureAtlas>::size, ComponentDescriptionFlags::kWrite},
  {HASH("anim_state"), ComponentType<AnimState>::size, ComponentDescriptionFlags::kWrite},
};
static constexpr ConstComponentDescription select_current_anim_frame_not_have_components[] = {
  {HASH("user_input"), 0},
};
static constexpr ConstQueryDescription select_current_anim_frame_query_desc = {
  make_const_array(select_current_anim_frame_components),
  empty_desc_array,
  make_const_array(select_current_anim_frame_not_have_components),
  empty_desc_array,
};
static constexpr ConstComponentDescription select_current_anim_frame_for_player_components[] = {
  {HASH("vel"), ComponentType<glm::vec2>::size, ComponentDescriptionFlags::kNone},
  {HASH("anim_graph"), ComponentType<AnimGraph>::size, ComponentDescriptionFlags::kNone},
  {HASH("user_input"), ComponentType<UserInput>::size, ComponentDescriptionFlags::kNone},
  {HASH("is_on_ground"), ComponentType<bool>::size, ComponentDescriptionFlags::kNone},
  {HASH("texture"), ComponentType<TextureAtlas>::size, ComponentDescriptionFlags::kWrite},
  {HASH("anim_state"), ComponentType<AnimState>::size, ComponentDescriptionFlags::kWrite},
};
static constexpr ConstQueryDescription select_current_anim_frame_for_player_query_desc = {
  make_const_array(select_current_anim_frame_for_player_components),
  empty_desc_array,
  empty_desc_array,
  empty_desc_array,
};
static constexpr ConstComponentDescription remove_death_fx_components[] = {
  {HASH("eid"), ComponentType<EntityId>::size, ComponentDescriptionFlags::kNone},
  {HASH("anim_state"), ComponentType<AnimState>::size, ComponentDescriptionFlags::kNone},
  {HASH("is_alive"), ComponentType<bool>::size, ComponentDescriptionFlags::kWrite},
};
static constexpr ConstComponentDescription remove_death_fx_have_components[] = {
  {HASH("death_fx"), 0},
  {HASH("is_alive"), 0},
};
static constexpr ConstComponentDescription remove_death_fx_track_components[] = {
  {HASH("is_alive"), ComponentType<bool>::size},
};
static constexpr ConstQueryDescription remove_death_fx_query_desc = {
  make_const_array(remove_death_fx_components),
  make_const_array(remove_death_fx_have_components),
  empty_desc_array,
  make_const_array(remove_death_fx_track_components),
};
static constexpr ConstComponentDescription update_camera_components[] = {
  {HASH("pos"), ComponentType<glm::vec2>::size, ComponentDescriptionFlags::kNone},
};
static constexpr ConstComponentDescription update_camera_have_components[] = {
  {HASH("user_input"), 0},
};
static constexpr ConstQueryDescription update_camera_query_desc = {
  make_const_array(update_camera_components),
  make_const_array(update_camera_have_components),
  empty_desc_array,
  empty_desc_array,
};
static constexpr ConstComponentDescription process_on_kill_event_components[] = {
  {HASH("hud"), ComponentType<HUD>::size, ComponentDescriptionFlags::kWrite},
};
static constexpr ConstQueryDescription process_on_kill_event_query_desc = {
  make_const_array(process_on_kill_event_components),
  empty_desc_array,
  empty_desc_array,
  empty_desc_array,
};
static constexpr ConstComponentDescription update_active_auto_move_components[] = {
  {HASH("auto_move"), ComponentType<AutoMove>::size, ComponentDescriptionFlags::kWrite},
  {HASH("vel"), ComponentType<glm::vec2>::size, ComponentDescriptionFlags::kWrite},
  {HASH("dir"), ComponentType<float>::size, ComponentDescriptionFlags::kWrite},
};
static constexpr ConstComponentDescription update_active_auto_move_have_components[] = {
  {HASH("is_alive"), 0},
  {HASH("is_active"), 0},
};
static constexpr ConstComponentDescription update_active_auto_move_track_components[] = {
  {HASH("is_alive"), ComponentType<bool>::size},
  {HASH("is_active"), ComponentType<bool>::size},
};
static constexpr ConstQueryDescription update_active_auto_move_query_desc = {
  make_const_array(update_active_auto_move_components),
  make_const_array(update_active_auto_move_have_components),
  empty_desc_array,
  make_const_array(update_active_auto_move_track_components),
};
static constexpr ConstComponentDescription update_always_active_auto_move_components[] = {
  {HASH("auto_move"), ComponentType<AutoMove>::size, ComponentDescriptionFlags::kWrite},
  {HASH("vel"), ComponentType<glm::vec2>::size, ComponentDescriptionFlags::kWrite},
  {HASH("dir"), ComponentType<float>::size, ComponentDescriptionFlags::kWrite},
};
static constexpr ConstComponentDescription update_always_active_auto_move_have_components[] = {
  {HASH("is_alive"), 0},
};
static constexpr ConstComponentDescription update_always_active_auto_move_not_have_components[] = {
  {HASH("is_active"), 0},
};
static constexpr ConstComponentDescription update_always_active_auto_move_track_components[] = {
  {HASH("is_alive"), ComponentType<bool>::size},
};
static constexpr ConstQueryDescription update_always_active_auto_move_query_desc = {
  make_const_array(update_always_active_auto_move_components),
  make_const_array(update_always_active_auto_move_have_components),
  make_const_array(update_always_active_auto_move_not_have_components),
  make_const_array(update_always_active_auto_move_track_components),
};
static constexpr ConstComponentDescription on_enenmy_kill_handler_have_components[] = {
  {HASH("enemy"), 0},
};
static constexpr ConstQueryDescription on_enenmy_kill_handler_query_desc = {
  empty_desc_array,
  make_const_array(on_enenmy_kill_handler_have_components),
  empty_desc_array,
  empty_desc_array,
};
static constexpr ConstComponentDescription update_auto_jump_components[] = {
  {HASH("is_alive"), ComponentType<bool>::size, ComponentDescriptionFlags::kNone},
  {HASH("jump"), ComponentType<Jump>::size, ComponentDescriptionFlags::kWrite},
  {HASH("auto_move"), ComponentType<AutoMove>::size, ComponentDescriptionFlags::kWrite},
  {HASH("vel"), ComponentType<glm::vec2>::size, ComponentDescriptionFlags::kWrite},
  {HASH("dir"), ComponentType<float>::size, ComponentDescriptionFlags::kWrite},
};
static constexpr ConstComponentDescription update_auto_jump_have_components[] = {
  {HASH("is_alive"), 0},
};
static constexpr ConstComponentDescription update_auto_jump_track_components[] = {
  {HASH("is_alive"), ComponentType<bool>::size},
};
static constexpr ConstQueryDescription update_auto_jump_query_desc = {
  make_const_array(update_auto_jump_components),
  make_const_array(update_auto_jump_have_components),
  empty_desc_array,
  make_const_array(update_auto_jump_track_components),
};




static void load_texture_handler_run(const RawArg &stage_or_event, Query &query)
{
  ecs::wait_system_dependencies(HASH("load_texture_handler"));
  for (auto q = query.begin(), e = query.end(); q != e; ++q)
    load_texture_handler::run(*(EventOnEntityCreate*)stage_or_event.mem,
      GET_COMPONENT(load_texture_handler, q, TextureAtlas, texture));
}
static SystemDescription _reg_sys_load_texture_handler(HASH("load_texture_handler"), &load_texture_handler_run, HASH("EventOnEntityCreate"), load_texture_handler_query_desc, "*", "*", nullptr);

static void update_position_run(const RawArg &stage_or_event, Query &query)
{
  ecs::wait_system_dependencies(HASH("update_position"));
  for (auto q = query.begin(), e = query.end(); q != e; ++q)
    update_position::run(*(EventUpdate*)stage_or_event.mem,
      GET_COMPONENT(update_position, q, glm::vec2, vel),
      GET_COMPONENT(update_position, q, glm::vec2, pos));
}
static SystemDescription _reg_sys_update_position(HASH("update_position"), &update_position_run, HASH("EventUpdate"), update_position_query_desc, "before_render", "after_phys_update", 
[](const Archetype &type, int entity_idx)
{
  GET_COMPONENT_VALUE(is_alive, bool);
  return is_alive == true;
});

static void update_position_for_active_run(const RawArg &stage_or_event, Query &query)
{
  ecs::wait_system_dependencies(HASH("update_position_for_active"));
  for (auto q = query.begin(), e = query.end(); q != e; ++q)
    update_position_for_active::run(*(EventUpdate*)stage_or_event.mem,
      GET_COMPONENT(update_position_for_active, q, glm::vec2, vel),
      GET_COMPONENT(update_position_for_active, q, glm::vec2, pos));
}
static SystemDescription _reg_sys_update_position_for_active(HASH("update_position_for_active"), &update_position_for_active_run, HASH("EventUpdate"), update_position_for_active_query_desc, "update_position", "after_phys_update", 
[](const Archetype &type, int entity_idx)
{
  GET_COMPONENT_VALUE(is_alive, bool);
  GET_COMPONENT_VALUE(is_active, bool);
  return is_alive == true && is_active == true;
});

static void update_anim_frame_run(const RawArg &stage_or_event, Query &query)
{
  ecs::wait_system_dependencies(HASH("update_anim_frame"));
  for (auto q = query.begin(), e = query.end(); q != e; ++q)
    update_anim_frame::run(*(EventUpdate*)stage_or_event.mem,
      GET_COMPONENT(update_anim_frame, q, AnimGraph, anim_graph),
      GET_COMPONENT(update_anim_frame, q, AnimState, anim_state),
      GET_COMPONENT(update_anim_frame, q, glm::vec4, frame));
}
static SystemDescription _reg_sys_update_anim_frame(HASH("update_anim_frame"), &update_anim_frame_run, HASH("EventUpdate"), update_anim_frame_query_desc, "after_anim_update", "before_anim_update", nullptr);

static void render_walls_run(const RawArg &stage_or_event, Query &query)
{
  ecs::wait_system_dependencies(HASH("render_walls"));
  for (auto q = query.begin(), e = query.end(); q != e; ++q)
    render_walls::run(*(EventRender*)stage_or_event.mem,
      GET_COMPONENT(render_walls, q, TextureAtlas, texture),
      GET_COMPONENT(render_walls, q, glm::vec4, frame),
      GET_COMPONENT(render_walls, q, glm::vec2, pos));
}
static SystemDescription _reg_sys_render_walls(HASH("render_walls"), &render_walls_run, HASH("EventRender"), render_walls_query_desc, "after_render", "before_render", 
[](const Archetype &type, int entity_idx)
{
  GET_COMPONENT_VALUE(is_alive, bool);
  return is_alive == true;
});

static void render_normal_run(const RawArg &stage_or_event, Query &query)
{
  ecs::wait_system_dependencies(HASH("render_normal"));
  for (auto q = query.begin(), e = query.end(); q != e; ++q)
    render_normal::run(*(EventRender*)stage_or_event.mem,
      GET_COMPONENT(render_normal, q, TextureAtlas, texture),
      GET_COMPONENT(render_normal, q, glm::vec4, frame),
      GET_COMPONENT(render_normal, q, glm::vec2, pos),
      GET_COMPONENT(render_normal, q, float, dir));
}
static SystemDescription _reg_sys_render_normal(HASH("render_normal"), &render_normal_run, HASH("EventRender"), render_normal_query_desc, "after_render", "before_render", 
[](const Archetype &type, int entity_idx)
{
  GET_COMPONENT_VALUE(is_alive, bool);
  return is_alive == true;
});

static void read_controls_run(const RawArg &stage_or_event, Query &query)
{
  ecs::wait_system_dependencies(HASH("read_controls"));
  for (auto q = query.begin(), e = query.end(); q != e; ++q)
    read_controls::run(*(EventUpdate*)stage_or_event.mem,
      GET_COMPONENT(read_controls, q, UserInput, user_input));
}
static SystemDescription _reg_sys_read_controls(HASH("read_controls"), &read_controls_run, HASH("EventUpdate"), read_controls_query_desc, "after_input", "before_input", nullptr);

static void apply_controls_run(const RawArg &stage_or_event, Query &query)
{
  ecs::wait_system_dependencies(HASH("apply_controls"));
  for (auto q = query.begin(), e = query.end(); q != e; ++q)
    apply_controls::run(*(EventUpdate*)stage_or_event.mem,
      GET_COMPONENT(apply_controls, q, UserInput, user_input),
      GET_COMPONENT(apply_controls, q, bool, is_on_ground),
      GET_COMPONENT(apply_controls, q, Jump, jump),
      GET_COMPONENT(apply_controls, q, glm::vec2, vel),
      GET_COMPONENT(apply_controls, q, float, dir));
}
static SystemDescription _reg_sys_apply_controls(HASH("apply_controls"), &apply_controls_run, HASH("EventUpdate"), apply_controls_query_desc, "*", "read_controls", nullptr);

static void apply_jump_run(const RawArg &stage_or_event, Query &query)
{
  ecs::wait_system_dependencies(HASH("apply_jump"));
  for (auto q = query.begin(), e = query.end(); q != e; ++q)
    apply_jump::run(*(EventUpdate*)stage_or_event.mem,
      GET_COMPONENT(apply_jump, q, Jump, jump),
      GET_COMPONENT(apply_jump, q, bool, is_on_ground),
      GET_COMPONENT(apply_jump, q, glm::vec2, vel));
}
static SystemDescription _reg_sys_apply_jump(HASH("apply_jump"), &apply_jump_run, HASH("EventUpdate"), apply_jump_query_desc, "*", "apply_gravity", nullptr);

static void apply_gravity_run(const RawArg &stage_or_event, Query &query)
{
  ecs::wait_system_dependencies(HASH("apply_gravity"));
  for (auto q = query.begin(), e = query.end(); q != e; ++q)
    apply_gravity::run(*(EventUpdate*)stage_or_event.mem,
      GET_COMPONENT(apply_gravity, q, Gravity, gravity),
      GET_COMPONENT(apply_gravity, q, glm::vec2, vel));
}
static SystemDescription _reg_sys_apply_gravity(HASH("apply_gravity"), &apply_gravity_run, HASH("EventUpdate"), apply_gravity_query_desc, "*", "apply_controls", 
[](const Archetype &type, int entity_idx)
{
  GET_COMPONENT_VALUE(is_alive, bool);
  return is_alive == true;
});

static void select_current_anim_frame_run(const RawArg &stage_or_event, Query &query)
{
  ecs::wait_system_dependencies(HASH("select_current_anim_frame"));
  for (auto q = query.begin(), e = query.end(); q != e; ++q)
    select_current_anim_frame::run(*(EventUpdate*)stage_or_event.mem,
      GET_COMPONENT(select_current_anim_frame, q, glm::vec2, vel),
      GET_COMPONENT(select_current_anim_frame, q, AnimGraph, anim_graph),
      GET_COMPONENT(select_current_anim_frame, q, bool, is_on_ground),
      GET_COMPONENT(select_current_anim_frame, q, TextureAtlas, texture),
      GET_COMPONENT(select_current_anim_frame, q, AnimState, anim_state));
}
static SystemDescription _reg_sys_select_current_anim_frame(HASH("select_current_anim_frame"), &select_current_anim_frame_run, HASH("EventUpdate"), select_current_anim_frame_query_desc, "update_anim_frame", "before_anim_update", nullptr);

static void select_current_anim_frame_for_player_run(const RawArg &stage_or_event, Query &query)
{
  ecs::wait_system_dependencies(HASH("select_current_anim_frame_for_player"));
  for (auto q = query.begin(), e = query.end(); q != e; ++q)
    select_current_anim_frame_for_player::run(*(EventUpdate*)stage_or_event.mem,
      GET_COMPONENT(select_current_anim_frame_for_player, q, glm::vec2, vel),
      GET_COMPONENT(select_current_anim_frame_for_player, q, AnimGraph, anim_graph),
      GET_COMPONENT(select_current_anim_frame_for_player, q, UserInput, user_input),
      GET_COMPONENT(select_current_anim_frame_for_player, q, bool, is_on_ground),
      GET_COMPONENT(select_current_anim_frame_for_player, q, TextureAtlas, texture),
      GET_COMPONENT(select_current_anim_frame_for_player, q, AnimState, anim_state));
}
static SystemDescription _reg_sys_select_current_anim_frame_for_player(HASH("select_current_anim_frame_for_player"), &select_current_anim_frame_for_player_run, HASH("EventUpdate"), select_current_anim_frame_for_player_query_desc, "update_anim_frame", "before_anim_update", nullptr);

static void remove_death_fx_run(const RawArg &stage_or_event, Query &query)
{
  ecs::wait_system_dependencies(HASH("remove_death_fx"));
  for (auto q = query.begin(), e = query.end(); q != e; ++q)
    remove_death_fx::run(*(EventUpdate*)stage_or_event.mem,
      GET_COMPONENT(remove_death_fx, q, EntityId, eid),
      GET_COMPONENT(remove_death_fx, q, AnimState, anim_state),
      GET_COMPONENT(remove_death_fx, q, bool, is_alive));
}
static SystemDescription _reg_sys_remove_death_fx(HASH("remove_death_fx"), &remove_death_fx_run, HASH("EventUpdate"), remove_death_fx_query_desc, "*", "*", 
[](const Archetype &type, int entity_idx)
{
  GET_COMPONENT_VALUE(is_alive, bool);
  return is_alive == true;
});

static void update_camera_run(const RawArg &stage_or_event, Query &query)
{
  ecs::wait_system_dependencies(HASH("update_camera"));
  for (auto q = query.begin(), e = query.end(); q != e; ++q)
    update_camera::run(*(EventUpdate*)stage_or_event.mem,
      GET_COMPONENT(update_camera, q, glm::vec2, pos));
}
static SystemDescription _reg_sys_update_camera(HASH("update_camera"), &update_camera_run, HASH("EventUpdate"), update_camera_query_desc, "before_render", "camera_update", nullptr);

static void process_on_kill_event_run(const RawArg &stage_or_event, Query &query)
{
  ecs::wait_system_dependencies(HASH("process_on_kill_event"));
  for (auto q = query.begin(), e = query.end(); q != e; ++q)
    process_on_kill_event::run(*(EventOnKillEnemy*)stage_or_event.mem,
      GET_COMPONENT(process_on_kill_event, q, HUD, hud));
}
static SystemDescription _reg_sys_process_on_kill_event(HASH("process_on_kill_event"), &process_on_kill_event_run, HASH("EventOnKillEnemy"), process_on_kill_event_query_desc, "*", "*", nullptr);

static void update_active_auto_move_run(const RawArg &stage_or_event, Query &query)
{
  ecs::wait_system_dependencies(HASH("update_active_auto_move"));
  for (auto q = query.begin(), e = query.end(); q != e; ++q)
    update_active_auto_move::run(*(EventUpdate*)stage_or_event.mem,
      GET_COMPONENT(update_active_auto_move, q, AutoMove, auto_move),
      GET_COMPONENT(update_active_auto_move, q, glm::vec2, vel),
      GET_COMPONENT(update_active_auto_move, q, float, dir));
}
static SystemDescription _reg_sys_update_active_auto_move(HASH("update_active_auto_move"), &update_active_auto_move_run, HASH("EventUpdate"), update_active_auto_move_query_desc, "collisions_update", "after_input", 
[](const Archetype &type, int entity_idx)
{
  GET_COMPONENT_VALUE(is_alive, bool);
  GET_COMPONENT_VALUE(is_active, bool);
  return is_alive == true && is_active == true;
});

static void update_always_active_auto_move_run(const RawArg &stage_or_event, Query &query)
{
  ecs::wait_system_dependencies(HASH("update_always_active_auto_move"));
  for (auto q = query.begin(), e = query.end(); q != e; ++q)
    update_always_active_auto_move::run(*(EventUpdate*)stage_or_event.mem,
      GET_COMPONENT(update_always_active_auto_move, q, AutoMove, auto_move),
      GET_COMPONENT(update_always_active_auto_move, q, glm::vec2, vel),
      GET_COMPONENT(update_always_active_auto_move, q, float, dir));
}
static SystemDescription _reg_sys_update_always_active_auto_move(HASH("update_always_active_auto_move"), &update_always_active_auto_move_run, HASH("EventUpdate"), update_always_active_auto_move_query_desc, "collisions_update", "after_input", 
[](const Archetype &type, int entity_idx)
{
  GET_COMPONENT_VALUE(is_alive, bool);
  return is_alive == true;
});

static void on_enenmy_kill_handler_run(const RawArg &stage_or_event, Query &query)
{
  ecs::wait_system_dependencies(HASH("on_enenmy_kill_handler"));
  for (auto q = query.begin(), e = query.end(); q != e; ++q)
    on_enenmy_kill_handler::run(*(EventOnKillEnemy*)stage_or_event.mem);
}
static SystemDescription _reg_sys_on_enenmy_kill_handler(HASH("on_enenmy_kill_handler"), &on_enenmy_kill_handler_run, HASH("EventOnKillEnemy"), on_enenmy_kill_handler_query_desc, "*", "*", nullptr);

static void update_auto_jump_run(const RawArg &stage_or_event, Query &query)
{
  ecs::wait_system_dependencies(HASH("update_auto_jump"));
  for (auto q = query.begin(), e = query.end(); q != e; ++q)
    update_auto_jump::run(*(EventUpdate*)stage_or_event.mem,
      GET_COMPONENT(update_auto_jump, q, bool, is_alive),
      GET_COMPONENT(update_auto_jump, q, Jump, jump),
      GET_COMPONENT(update_auto_jump, q, AutoMove, auto_move),
      GET_COMPONENT(update_auto_jump, q, glm::vec2, vel),
      GET_COMPONENT(update_auto_jump, q, float, dir));
}
static SystemDescription _reg_sys_update_auto_jump(HASH("update_auto_jump"), &update_auto_jump_run, HASH("EventUpdate"), update_auto_jump_query_desc, "collisions_update", "after_input", 
[](const Archetype &type, int entity_idx)
{
  GET_COMPONENT_VALUE(is_alive, bool);
  return is_alive == true;
});

static void test_empty_run(const RawArg &stage_or_event, Query &)
{
  test_empty::run(*(EventUpdate*)stage_or_event.mem);
}
static SystemDescription _reg_sys_test_empty(HASH("test_empty"), &test_empty_run, HASH("EventUpdate"), empty_query_desc, "after_input", "*");

static SystemDescription _reg_sys_before_input(HASH("before_input"), "after_input", "*");
static SystemDescription _reg_sys_after_input(HASH("after_input"), "*", "before_input");
static SystemDescription _reg_sys_collisions_update(HASH("collisions_update"), "*", "after_input");
static SystemDescription _reg_sys_before_phys_update(HASH("before_phys_update"), "*", "collisions_update");
static SystemDescription _reg_sys_after_phys_update(HASH("after_phys_update"), "*", "before_phys_update");
static SystemDescription _reg_sys_before_anim_update(HASH("before_anim_update"), "*", "after_phys_update");
static SystemDescription _reg_sys_after_anim_update(HASH("after_anim_update"), "*", "before_anim_update");
static SystemDescription _reg_sys_camera_update(HASH("camera_update"), "*", "after_anim_update");
static SystemDescription _reg_sys_before_render(HASH("before_render"), "*", "camera_update");
static SystemDescription _reg_sys_after_render(HASH("after_render"), "*", "before_render");

struct UserInputAnnotation final : das::ManagedStructureAnnotation<UserInput, false>
{
  UserInputAnnotation(das::ModuleLibrary &lib) : das::ManagedStructureAnnotation<UserInput, false>("UserInput", lib)
  {
    cppName = " ::UserInput";
  }
  bool isLocal() const override { return true; }
};
static void sample_auto_bind(das::Module &module, das::ModuleLibrary &lib)
{
  module.addAnnotation(das::make_smart<UserInputAnnotation>(lib));
}
static AutoBindDescription _reg_auto_bind_sample(HASH("sample"), &sample_auto_bind);
#endif // __CODEGEN__
