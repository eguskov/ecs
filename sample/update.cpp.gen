//! GENERATED FILE


#ifndef __CODEGEN__

#include "update.cpp"

static RegCompSpec<HUD> _reg_comp_hud("hud");
template <> int RegCompSpec<HUD>::ID = -1;

static RegCompSpec<UserInput> _reg_comp_user_input("user_input");
template <> int RegCompSpec<UserInput>::ID = -1;

static RegCompSpec<AnimGraph> _reg_comp_anim_graph("anim_graph");
template <> int RegCompSpec<AnimGraph>::ID = -1;

static RegCompSpec<AnimState> _reg_comp_anim_state("anim_state");
template <> int RegCompSpec<AnimState>::ID = -1;

static constexpr ConstCompDesc load_texture_handler_components[] = {
  {HASH("texture"), Desc<TextureAtlas>::Size, CompDescFlags::kWrite},
};
static constexpr ConstQueryDesc load_texture_handler_query_desc = {
  make_const_array(load_texture_handler_components),
  empty_desc_array,
  empty_desc_array,
  empty_desc_array,
  empty_desc_array,
  empty_desc_array,
};
static constexpr ConstCompDesc update_position_components[] = {
  {HASH("vel"), Desc<glm::vec2>::Size, CompDescFlags::kNone},
  {HASH("pos"), Desc<glm::vec2>::Size, CompDescFlags::kWrite},
};
static constexpr ConstCompDesc update_position_have_components[] = {
  {HASH("is_alive"), 0},
};
static constexpr ConstCompDesc update_position_not_have_components[] = {
  {HASH("is_active"), 0},
};
static constexpr ConstCompDesc update_position_track_components[] = {
  {HASH("is_alive"), Desc<bool>::Size},
};
static constexpr ConstQueryDesc update_position_query_desc = {
  make_const_array(update_position_components),
  make_const_array(update_position_have_components),
  make_const_array(update_position_not_have_components),
  empty_desc_array,
  empty_desc_array,
  make_const_array(update_position_track_components),
};
static constexpr ConstCompDesc update_position_for_active_components[] = {
  {HASH("vel"), Desc<glm::vec2>::Size, CompDescFlags::kNone},
  {HASH("pos"), Desc<glm::vec2>::Size, CompDescFlags::kWrite},
};
static constexpr ConstCompDesc update_position_for_active_have_components[] = {
  {HASH("is_alive"), 0},
  {HASH("is_active"), 0},
};
static constexpr ConstCompDesc update_position_for_active_track_components[] = {
  {HASH("is_alive"), Desc<bool>::Size},
  {HASH("is_active"), Desc<bool>::Size},
};
static constexpr ConstQueryDesc update_position_for_active_query_desc = {
  make_const_array(update_position_for_active_components),
  make_const_array(update_position_for_active_have_components),
  empty_desc_array,
  empty_desc_array,
  empty_desc_array,
  make_const_array(update_position_for_active_track_components),
};
static constexpr ConstCompDesc update_anim_frame_components[] = {
  {HASH("anim_graph"), Desc<AnimGraph>::Size, CompDescFlags::kNone},
  {HASH("anim_state"), Desc<AnimState>::Size, CompDescFlags::kWrite},
  {HASH("frame"), Desc<glm::vec4>::Size, CompDescFlags::kWrite},
};
static constexpr ConstQueryDesc update_anim_frame_query_desc = {
  make_const_array(update_anim_frame_components),
  empty_desc_array,
  empty_desc_array,
  empty_desc_array,
  empty_desc_array,
  empty_desc_array,
};
static constexpr ConstCompDesc render_walls_components[] = {
  {HASH("texture"), Desc<TextureAtlas>::Size, CompDescFlags::kNone},
  {HASH("frame"), Desc<glm::vec4>::Size, CompDescFlags::kNone},
  {HASH("pos"), Desc<glm::vec2>::Size, CompDescFlags::kNone},
};
static constexpr ConstCompDesc render_walls_have_components[] = {
  {HASH("wall"), 0},
  {HASH("is_alive"), 0},
};
static constexpr ConstCompDesc render_walls_track_components[] = {
  {HASH("is_alive"), Desc<bool>::Size},
};
static constexpr ConstQueryDesc render_walls_query_desc = {
  make_const_array(render_walls_components),
  make_const_array(render_walls_have_components),
  empty_desc_array,
  empty_desc_array,
  empty_desc_array,
  make_const_array(render_walls_track_components),
};
static constexpr ConstCompDesc render_normal_components[] = {
  {HASH("texture"), Desc<TextureAtlas>::Size, CompDescFlags::kNone},
  {HASH("frame"), Desc<glm::vec4>::Size, CompDescFlags::kNone},
  {HASH("pos"), Desc<glm::vec2>::Size, CompDescFlags::kNone},
  {HASH("dir"), Desc<float>::Size, CompDescFlags::kNone},
};
static constexpr ConstCompDesc render_normal_have_components[] = {
  {HASH("is_alive"), 0},
};
static constexpr ConstCompDesc render_normal_not_have_components[] = {
  {HASH("wall"), 0},
};
static constexpr ConstCompDesc render_normal_track_components[] = {
  {HASH("is_alive"), Desc<bool>::Size},
};
static constexpr ConstQueryDesc render_normal_query_desc = {
  make_const_array(render_normal_components),
  make_const_array(render_normal_have_components),
  make_const_array(render_normal_not_have_components),
  empty_desc_array,
  empty_desc_array,
  make_const_array(render_normal_track_components),
};
static constexpr ConstCompDesc read_controls_components[] = {
  {HASH("user_input"), Desc<UserInput>::Size, CompDescFlags::kWrite},
};
static constexpr ConstQueryDesc read_controls_query_desc = {
  make_const_array(read_controls_components),
  empty_desc_array,
  empty_desc_array,
  empty_desc_array,
  empty_desc_array,
  empty_desc_array,
};
static constexpr ConstCompDesc apply_controls_components[] = {
  {HASH("user_input"), Desc<UserInput>::Size, CompDescFlags::kNone},
  {HASH("is_on_ground"), Desc<bool>::Size, CompDescFlags::kNone},
  {HASH("jump"), Desc<Jump>::Size, CompDescFlags::kWrite},
  {HASH("vel"), Desc<glm::vec2>::Size, CompDescFlags::kWrite},
  {HASH("dir"), Desc<float>::Size, CompDescFlags::kWrite},
};
static constexpr ConstQueryDesc apply_controls_query_desc = {
  make_const_array(apply_controls_components),
  empty_desc_array,
  empty_desc_array,
  empty_desc_array,
  empty_desc_array,
  empty_desc_array,
};
static constexpr ConstCompDesc apply_jump_components[] = {
  {HASH("jump"), Desc<Jump>::Size, CompDescFlags::kWrite},
  {HASH("is_on_ground"), Desc<bool>::Size, CompDescFlags::kWrite},
  {HASH("vel"), Desc<glm::vec2>::Size, CompDescFlags::kWrite},
};
static constexpr ConstQueryDesc apply_jump_query_desc = {
  make_const_array(apply_jump_components),
  empty_desc_array,
  empty_desc_array,
  empty_desc_array,
  empty_desc_array,
  empty_desc_array,
};
static constexpr ConstCompDesc apply_gravity_components[] = {
  {HASH("gravity"), Desc<Gravity>::Size, CompDescFlags::kNone},
  {HASH("vel"), Desc<glm::vec2>::Size, CompDescFlags::kWrite},
};
static constexpr ConstCompDesc apply_gravity_have_components[] = {
  {HASH("is_alive"), 0},
};
static constexpr ConstCompDesc apply_gravity_track_components[] = {
  {HASH("is_alive"), Desc<bool>::Size},
};
static constexpr ConstQueryDesc apply_gravity_query_desc = {
  make_const_array(apply_gravity_components),
  make_const_array(apply_gravity_have_components),
  empty_desc_array,
  empty_desc_array,
  empty_desc_array,
  make_const_array(apply_gravity_track_components),
};
static constexpr ConstCompDesc select_current_anim_frame_components[] = {
  {HASH("vel"), Desc<glm::vec2>::Size, CompDescFlags::kNone},
  {HASH("anim_graph"), Desc<AnimGraph>::Size, CompDescFlags::kNone},
  {HASH("is_on_ground"), Desc<bool>::Size, CompDescFlags::kNone},
  {HASH("texture"), Desc<TextureAtlas>::Size, CompDescFlags::kWrite},
  {HASH("anim_state"), Desc<AnimState>::Size, CompDescFlags::kWrite},
};
static constexpr ConstCompDesc select_current_anim_frame_not_have_components[] = {
  {HASH("user_input"), 0},
};
static constexpr ConstQueryDesc select_current_anim_frame_query_desc = {
  make_const_array(select_current_anim_frame_components),
  empty_desc_array,
  make_const_array(select_current_anim_frame_not_have_components),
  empty_desc_array,
  empty_desc_array,
  empty_desc_array,
};
static constexpr ConstCompDesc select_current_anim_frame_for_player_components[] = {
  {HASH("vel"), Desc<glm::vec2>::Size, CompDescFlags::kNone},
  {HASH("anim_graph"), Desc<AnimGraph>::Size, CompDescFlags::kNone},
  {HASH("user_input"), Desc<UserInput>::Size, CompDescFlags::kNone},
  {HASH("is_on_ground"), Desc<bool>::Size, CompDescFlags::kNone},
  {HASH("texture"), Desc<TextureAtlas>::Size, CompDescFlags::kWrite},
  {HASH("anim_state"), Desc<AnimState>::Size, CompDescFlags::kWrite},
};
static constexpr ConstQueryDesc select_current_anim_frame_for_player_query_desc = {
  make_const_array(select_current_anim_frame_for_player_components),
  empty_desc_array,
  empty_desc_array,
  empty_desc_array,
  empty_desc_array,
  empty_desc_array,
};
static constexpr ConstCompDesc remove_death_fx_components[] = {
  {HASH("eid"), Desc<EntityId>::Size, CompDescFlags::kNone},
  {HASH("anim_state"), Desc<AnimState>::Size, CompDescFlags::kNone},
  {HASH("is_alive"), Desc<bool>::Size, CompDescFlags::kWrite},
};
static constexpr ConstCompDesc remove_death_fx_have_components[] = {
  {HASH("is_alive"), 0},
};
static constexpr ConstCompDesc remove_death_fx_track_components[] = {
  {HASH("is_alive"), Desc<bool>::Size},
};
static constexpr ConstQueryDesc remove_death_fx_query_desc = {
  make_const_array(remove_death_fx_components),
  make_const_array(remove_death_fx_have_components),
  empty_desc_array,
  empty_desc_array,
  empty_desc_array,
  make_const_array(remove_death_fx_track_components),
};
static constexpr ConstCompDesc update_camera_components[] = {
  {HASH("pos"), Desc<glm::vec2>::Size, CompDescFlags::kNone},
};
static constexpr ConstCompDesc update_camera_have_components[] = {
  {HASH("user_input"), 0},
};
static constexpr ConstQueryDesc update_camera_query_desc = {
  make_const_array(update_camera_components),
  make_const_array(update_camera_have_components),
  empty_desc_array,
  empty_desc_array,
  empty_desc_array,
  empty_desc_array,
};
static constexpr ConstCompDesc process_on_kill_event_components[] = {
  {HASH("hud"), Desc<HUD>::Size, CompDescFlags::kWrite},
};
static constexpr ConstQueryDesc process_on_kill_event_query_desc = {
  make_const_array(process_on_kill_event_components),
  empty_desc_array,
  empty_desc_array,
  empty_desc_array,
  empty_desc_array,
  empty_desc_array,
};
static constexpr ConstCompDesc update_active_auto_move_components[] = {
  {HASH("auto_move"), Desc<AutoMove>::Size, CompDescFlags::kWrite},
  {HASH("vel"), Desc<glm::vec2>::Size, CompDescFlags::kWrite},
  {HASH("dir"), Desc<float>::Size, CompDescFlags::kWrite},
};
static constexpr ConstCompDesc update_active_auto_move_have_components[] = {
  {HASH("is_alive"), 0},
  {HASH("is_active"), 0},
};
static constexpr ConstCompDesc update_active_auto_move_track_components[] = {
  {HASH("is_alive"), Desc<bool>::Size},
  {HASH("is_active"), Desc<bool>::Size},
};
static constexpr ConstQueryDesc update_active_auto_move_query_desc = {
  make_const_array(update_active_auto_move_components),
  make_const_array(update_active_auto_move_have_components),
  empty_desc_array,
  empty_desc_array,
  empty_desc_array,
  make_const_array(update_active_auto_move_track_components),
};
static constexpr ConstCompDesc update_always_active_auto_move_components[] = {
  {HASH("auto_move"), Desc<AutoMove>::Size, CompDescFlags::kWrite},
  {HASH("vel"), Desc<glm::vec2>::Size, CompDescFlags::kWrite},
  {HASH("dir"), Desc<float>::Size, CompDescFlags::kWrite},
};
static constexpr ConstCompDesc update_always_active_auto_move_have_components[] = {
  {HASH("is_alive"), 0},
};
static constexpr ConstCompDesc update_always_active_auto_move_not_have_components[] = {
  {HASH("is_active"), 0},
};
static constexpr ConstCompDesc update_always_active_auto_move_track_components[] = {
  {HASH("is_alive"), Desc<bool>::Size},
};
static constexpr ConstQueryDesc update_always_active_auto_move_query_desc = {
  make_const_array(update_always_active_auto_move_components),
  make_const_array(update_always_active_auto_move_have_components),
  make_const_array(update_always_active_auto_move_not_have_components),
  empty_desc_array,
  empty_desc_array,
  make_const_array(update_always_active_auto_move_track_components),
};
static constexpr ConstCompDesc on_enenmy_kill_handler_have_components[] = {
  {HASH("enemy"), 0},
};
static constexpr ConstQueryDesc on_enenmy_kill_handler_query_desc = {
  empty_desc_array,
  make_const_array(on_enenmy_kill_handler_have_components),
  empty_desc_array,
  empty_desc_array,
  empty_desc_array,
  empty_desc_array,
};
static constexpr ConstCompDesc update_auto_jump_components[] = {
  {HASH("is_alive"), Desc<bool>::Size, CompDescFlags::kNone},
  {HASH("jump"), Desc<Jump>::Size, CompDescFlags::kWrite},
  {HASH("auto_move"), Desc<AutoMove>::Size, CompDescFlags::kWrite},
  {HASH("vel"), Desc<glm::vec2>::Size, CompDescFlags::kWrite},
  {HASH("dir"), Desc<float>::Size, CompDescFlags::kWrite},
};
static constexpr ConstCompDesc update_auto_jump_have_components[] = {
  {HASH("is_alive"), 0},
};
static constexpr ConstCompDesc update_auto_jump_track_components[] = {
  {HASH("is_alive"), Desc<bool>::Size},
};
static constexpr ConstQueryDesc update_auto_jump_query_desc = {
  make_const_array(update_auto_jump_components),
  make_const_array(update_auto_jump_have_components),
  empty_desc_array,
  empty_desc_array,
  empty_desc_array,
  make_const_array(update_auto_jump_track_components),
};




static void load_texture_handler_run(const RawArg &stage_or_event, Query &query)
{
  for (auto q = query.begin(), e = query.end(); q != e; ++q)
    load_texture_handler::run(*(EventOnEntityCreate*)stage_or_event.mem,
      GET_COMPONENT(load_texture_handler, q, TextureAtlas, texture));
}
static RegSys _reg_sys_load_texture_handler("load_texture_handler", &load_texture_handler_run, "EventOnEntityCreate", load_texture_handler_query_desc, nullptr);

static void update_position_run(const RawArg &stage_or_event, Query &query)
{
  for (auto q = query.begin(), e = query.end(); q != e; ++q)
    update_position::run(*(UpdateStage*)stage_or_event.mem,
      GET_COMPONENT(update_position, q, glm::vec2, vel),
      GET_COMPONENT(update_position, q, glm::vec2, pos));
}
static RegSys _reg_sys_update_position("update_position", &update_position_run, "UpdateStage", update_position_query_desc, 
[](const Archetype &type, int entity_idx)
{
  GET_COMPONENT_VALUE(is_alive, bool);
  return is_alive == true;
});

static void update_position_for_active_run(const RawArg &stage_or_event, Query &query)
{
  for (auto q = query.begin(), e = query.end(); q != e; ++q)
    update_position_for_active::run(*(UpdateStage*)stage_or_event.mem,
      GET_COMPONENT(update_position_for_active, q, glm::vec2, vel),
      GET_COMPONENT(update_position_for_active, q, glm::vec2, pos));
}
static RegSys _reg_sys_update_position_for_active("update_position_for_active", &update_position_for_active_run, "UpdateStage", update_position_for_active_query_desc, 
[](const Archetype &type, int entity_idx)
{
  GET_COMPONENT_VALUE(is_alive, bool);
  GET_COMPONENT_VALUE(is_active, bool);
  return is_alive == true && is_active == true;
});

static void update_anim_frame_run(const RawArg &stage_or_event, Query &query)
{
  for (auto q = query.begin(), e = query.end(); q != e; ++q)
    update_anim_frame::run(*(UpdateStage*)stage_or_event.mem,
      GET_COMPONENT(update_anim_frame, q, AnimGraph, anim_graph),
      GET_COMPONENT(update_anim_frame, q, AnimState, anim_state),
      GET_COMPONENT(update_anim_frame, q, glm::vec4, frame));
}
static RegSys _reg_sys_update_anim_frame("update_anim_frame", &update_anim_frame_run, "UpdateStage", update_anim_frame_query_desc, nullptr);

static void render_walls_run(const RawArg &stage_or_event, Query &query)
{
  for (auto q = query.begin(), e = query.end(); q != e; ++q)
    render_walls::run(*(RenderStage*)stage_or_event.mem,
      GET_COMPONENT(render_walls, q, TextureAtlas, texture),
      GET_COMPONENT(render_walls, q, glm::vec4, frame),
      GET_COMPONENT(render_walls, q, glm::vec2, pos));
}
static RegSys _reg_sys_render_walls("render_walls", &render_walls_run, "RenderStage", render_walls_query_desc, 
[](const Archetype &type, int entity_idx)
{
  GET_COMPONENT_VALUE(is_alive, bool);
  return is_alive == true;
});

static void render_normal_run(const RawArg &stage_or_event, Query &query)
{
  for (auto q = query.begin(), e = query.end(); q != e; ++q)
    render_normal::run(*(RenderStage*)stage_or_event.mem,
      GET_COMPONENT(render_normal, q, TextureAtlas, texture),
      GET_COMPONENT(render_normal, q, glm::vec4, frame),
      GET_COMPONENT(render_normal, q, glm::vec2, pos),
      GET_COMPONENT(render_normal, q, float, dir));
}
static RegSys _reg_sys_render_normal("render_normal", &render_normal_run, "RenderStage", render_normal_query_desc, 
[](const Archetype &type, int entity_idx)
{
  GET_COMPONENT_VALUE(is_alive, bool);
  return is_alive == true;
});

static void read_controls_run(const RawArg &stage_or_event, Query &query)
{
  for (auto q = query.begin(), e = query.end(); q != e; ++q)
    read_controls::run(*(UpdateStage*)stage_or_event.mem,
      GET_COMPONENT(read_controls, q, UserInput, user_input));
}
static RegSys _reg_sys_read_controls("read_controls", &read_controls_run, "UpdateStage", read_controls_query_desc, nullptr);

static void apply_controls_run(const RawArg &stage_or_event, Query &query)
{
  for (auto q = query.begin(), e = query.end(); q != e; ++q)
    apply_controls::run(*(UpdateStage*)stage_or_event.mem,
      GET_COMPONENT(apply_controls, q, UserInput, user_input),
      GET_COMPONENT(apply_controls, q, bool, is_on_ground),
      GET_COMPONENT(apply_controls, q, Jump, jump),
      GET_COMPONENT(apply_controls, q, glm::vec2, vel),
      GET_COMPONENT(apply_controls, q, float, dir));
}
static RegSys _reg_sys_apply_controls("apply_controls", &apply_controls_run, "UpdateStage", apply_controls_query_desc, nullptr);

static void apply_jump_run(const RawArg &stage_or_event, Query &query)
{
  for (auto q = query.begin(), e = query.end(); q != e; ++q)
    apply_jump::run(*(UpdateStage*)stage_or_event.mem,
      GET_COMPONENT(apply_jump, q, Jump, jump),
      GET_COMPONENT(apply_jump, q, bool, is_on_ground),
      GET_COMPONENT(apply_jump, q, glm::vec2, vel));
}
static RegSys _reg_sys_apply_jump("apply_jump", &apply_jump_run, "UpdateStage", apply_jump_query_desc, nullptr);

static void apply_gravity_run(const RawArg &stage_or_event, Query &query)
{
  for (auto q = query.begin(), e = query.end(); q != e; ++q)
    apply_gravity::run(*(UpdateStage*)stage_or_event.mem,
      GET_COMPONENT(apply_gravity, q, Gravity, gravity),
      GET_COMPONENT(apply_gravity, q, glm::vec2, vel));
}
static RegSys _reg_sys_apply_gravity("apply_gravity", &apply_gravity_run, "UpdateStage", apply_gravity_query_desc, 
[](const Archetype &type, int entity_idx)
{
  GET_COMPONENT_VALUE(is_alive, bool);
  return is_alive == true;
});

static void select_current_anim_frame_run(const RawArg &stage_or_event, Query &query)
{
  for (auto q = query.begin(), e = query.end(); q != e; ++q)
    select_current_anim_frame::run(*(UpdateStage*)stage_or_event.mem,
      GET_COMPONENT(select_current_anim_frame, q, glm::vec2, vel),
      GET_COMPONENT(select_current_anim_frame, q, AnimGraph, anim_graph),
      GET_COMPONENT(select_current_anim_frame, q, bool, is_on_ground),
      GET_COMPONENT(select_current_anim_frame, q, TextureAtlas, texture),
      GET_COMPONENT(select_current_anim_frame, q, AnimState, anim_state));
}
static RegSys _reg_sys_select_current_anim_frame("select_current_anim_frame", &select_current_anim_frame_run, "UpdateStage", select_current_anim_frame_query_desc, nullptr);

static void select_current_anim_frame_for_player_run(const RawArg &stage_or_event, Query &query)
{
  for (auto q = query.begin(), e = query.end(); q != e; ++q)
    select_current_anim_frame_for_player::run(*(UpdateStage*)stage_or_event.mem,
      GET_COMPONENT(select_current_anim_frame_for_player, q, glm::vec2, vel),
      GET_COMPONENT(select_current_anim_frame_for_player, q, AnimGraph, anim_graph),
      GET_COMPONENT(select_current_anim_frame_for_player, q, UserInput, user_input),
      GET_COMPONENT(select_current_anim_frame_for_player, q, bool, is_on_ground),
      GET_COMPONENT(select_current_anim_frame_for_player, q, TextureAtlas, texture),
      GET_COMPONENT(select_current_anim_frame_for_player, q, AnimState, anim_state));
}
static RegSys _reg_sys_select_current_anim_frame_for_player("select_current_anim_frame_for_player", &select_current_anim_frame_for_player_run, "UpdateStage", select_current_anim_frame_for_player_query_desc, nullptr);

static void remove_death_fx_run(const RawArg &stage_or_event, Query &query)
{
  for (auto q = query.begin(), e = query.end(); q != e; ++q)
    remove_death_fx::run(*(UpdateStage*)stage_or_event.mem,
      GET_COMPONENT(remove_death_fx, q, EntityId, eid),
      GET_COMPONENT(remove_death_fx, q, AnimState, anim_state),
      GET_COMPONENT(remove_death_fx, q, bool, is_alive));
}
static RegSys _reg_sys_remove_death_fx("remove_death_fx", &remove_death_fx_run, "UpdateStage", remove_death_fx_query_desc, 
[](const Archetype &type, int entity_idx)
{
  GET_COMPONENT_VALUE(is_alive, bool);
  return is_alive == true;
});

static void update_camera_run(const RawArg &stage_or_event, Query &query)
{
  for (auto q = query.begin(), e = query.end(); q != e; ++q)
    update_camera::run(*(UpdateStage*)stage_or_event.mem,
      GET_COMPONENT(update_camera, q, glm::vec2, pos));
}
static RegSys _reg_sys_update_camera("update_camera", &update_camera_run, "UpdateStage", update_camera_query_desc, nullptr);

static void process_on_kill_event_run(const RawArg &stage_or_event, Query &query)
{
  for (auto q = query.begin(), e = query.end(); q != e; ++q)
    process_on_kill_event::run(*(EventOnKillEnemy*)stage_or_event.mem,
      GET_COMPONENT(process_on_kill_event, q, HUD, hud));
}
static RegSys _reg_sys_process_on_kill_event("process_on_kill_event", &process_on_kill_event_run, "EventOnKillEnemy", process_on_kill_event_query_desc, nullptr);

static void update_active_auto_move_run(const RawArg &stage_or_event, Query &query)
{
  for (auto q = query.begin(), e = query.end(); q != e; ++q)
    update_active_auto_move::run(*(UpdateStage*)stage_or_event.mem,
      GET_COMPONENT(update_active_auto_move, q, AutoMove, auto_move),
      GET_COMPONENT(update_active_auto_move, q, glm::vec2, vel),
      GET_COMPONENT(update_active_auto_move, q, float, dir));
}
static RegSys _reg_sys_update_active_auto_move("update_active_auto_move", &update_active_auto_move_run, "UpdateStage", update_active_auto_move_query_desc, 
[](const Archetype &type, int entity_idx)
{
  GET_COMPONENT_VALUE(is_alive, bool);
  GET_COMPONENT_VALUE(is_active, bool);
  return is_alive == true && is_active == true;
});

static void update_always_active_auto_move_run(const RawArg &stage_or_event, Query &query)
{
  for (auto q = query.begin(), e = query.end(); q != e; ++q)
    update_always_active_auto_move::run(*(UpdateStage*)stage_or_event.mem,
      GET_COMPONENT(update_always_active_auto_move, q, AutoMove, auto_move),
      GET_COMPONENT(update_always_active_auto_move, q, glm::vec2, vel),
      GET_COMPONENT(update_always_active_auto_move, q, float, dir));
}
static RegSys _reg_sys_update_always_active_auto_move("update_always_active_auto_move", &update_always_active_auto_move_run, "UpdateStage", update_always_active_auto_move_query_desc, 
[](const Archetype &type, int entity_idx)
{
  GET_COMPONENT_VALUE(is_alive, bool);
  return is_alive == true;
});

static void on_enenmy_kill_handler_run(const RawArg &stage_or_event, Query &query)
{
  for (auto q = query.begin(), e = query.end(); q != e; ++q)
    on_enenmy_kill_handler::run(*(EventOnKillEnemy*)stage_or_event.mem);
}
static RegSys _reg_sys_on_enenmy_kill_handler("on_enenmy_kill_handler", &on_enenmy_kill_handler_run, "EventOnKillEnemy", on_enenmy_kill_handler_query_desc, nullptr);

static void update_auto_jump_run(const RawArg &stage_or_event, Query &query)
{
  for (auto q = query.begin(), e = query.end(); q != e; ++q)
    update_auto_jump::run(*(UpdateStage*)stage_or_event.mem,
      GET_COMPONENT(update_auto_jump, q, bool, is_alive),
      GET_COMPONENT(update_auto_jump, q, Jump, jump),
      GET_COMPONENT(update_auto_jump, q, AutoMove, auto_move),
      GET_COMPONENT(update_auto_jump, q, glm::vec2, vel),
      GET_COMPONENT(update_auto_jump, q, float, dir));
}
static RegSys _reg_sys_update_auto_jump("update_auto_jump", &update_auto_jump_run, "UpdateStage", update_auto_jump_query_desc, 
[](const Archetype &type, int entity_idx)
{
  GET_COMPONENT_VALUE(is_alive, bool);
  return is_alive == true;
});

#endif // __CODEGEN__
