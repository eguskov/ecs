//! GENERATED FILE


#ifndef __CODEGEN__

#include "update.h"

static ComponentDescriptionDetails<Texture2D> _reg_comp_Texture2D("Texture2D");
static ComponentDescriptionDetails<AnimGraph> _reg_comp_AnimGraph("AnimGraph");
static ComponentDescriptionDetails<AnimState> _reg_comp_AnimState("AnimState");




struct AnimGraphAnnotation final : das::ManagedStructureAnnotation<AnimGraph, true>
{
  AnimGraphAnnotation(das::ModuleLibrary &lib) : das::ManagedStructureAnnotation<AnimGraph, true>("AnimGraph", lib)
  {
    cppName = " ::AnimGraph";
  }
  bool isRefType() const override { return true; }
  bool isPod() const override { return false; }
  bool isLocal() const override { return true; }
  bool canCopy() const override { return true; }
  bool canMove() const override { return true; }
  das::SimNode* simulateClone(das::Context & context, const das::LineInfo & at, das::SimNode * l, das::SimNode * r) const override
  {
    return context.code->makeNode<das::SimNode_CloneRefValueT<AnimGraph>>(at, l, r);
  }
};
struct AnimStateAnnotation final : das::ManagedStructureAnnotation<AnimState, false>
{
  AnimStateAnnotation(das::ModuleLibrary &lib) : das::ManagedStructureAnnotation<AnimState, false>("AnimState", lib)
  {
    cppName = " ::AnimState";
    addField<DAS_BIND_MANAGED_FIELD(currentNode)>("node");
  }
  bool isLocal() const override { return true; }
};
static void anim_auto_bind(das::Module &module, das::ModuleLibrary &lib)
{
  module.addAnnotation(das::make_smart<AnimGraphAnnotation>(lib));
  module.addAnnotation(das::make_smart<AnimStateAnnotation>(lib));
  das::addExtern<DAS_BIND_FUN(AnimGraph::add_node), das::SimNode_ExtFuncCall>(module, lib, "add_node", das::SideEffects::modifyArgument, "AnimGraph::add_node");
}
static AutoBindDescription _reg_auto_bind_anim(HASH("anim"), &anim_auto_bind);

uint32_t update_h_pull = HASH("update.h").hash;

#endif // __CODEGEN__
