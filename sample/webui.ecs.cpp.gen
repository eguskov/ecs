//! GENERATED FILE


#ifndef __CODEGEN__

#include "webui.ecs.cpp"

static RegCompSpec<WebsocketServer> _reg_comp_websocket_server("websocket_server");
template <> int RegCompSpec<WebsocketServer>::ID = -1;

static RegCompSpec<WSGetECSData> _reg_event_WSGetECSData;
int RegCompSpec<WSGetECSData>::ID = -1;

static RegSysSpec<1792234238, decltype(init_websocket_server_handler)> _reg_sys_init_websocket_server_handler("init_websocket_server_handler", init_websocket_server_handler, { "eid", "ws_server" }, {  }, {  }, {  }, {  }, true); 
static RegSysSpec<4294383132, decltype(update_websocket_server)> _reg_sys_update_websocket_server("update_websocket_server", update_websocket_server, { "ws_server" }, {  }, {  }, {  }, {  }, true); 
static RegSysSpec<2741717703, decltype(ws_get_ecs_data)> _reg_sys_ws_get_ecs_data("ws_get_ecs_data", ws_get_ecs_data, { "ws_server" }, {  }, {  }, {  }, {  }, true); 

static __forceinline void exec_AllScriptsQuery(const script::ScriptComponent & script) {}

static RegSysSpec<1753107198, decltype(exec_AllScriptsQuery)> _reg_sys_exec_AllScriptsQuery("exec_AllScriptsQuery", exec_AllScriptsQuery, { "script" }, {  }, {  }, {  }, {  }, false); 

template <> template <> __forceinline void RegSysSpec<1753107198, decltype(exec_AllScriptsQuery)>::execImpl<>(const ExtraArguments &args, Query &query, eastl::index_sequence<0>) const {}

template <typename C> void AllScriptsQuery::exec(C callback)
{
  using SysType = RegSysSpec<1753107198, decltype(exec_AllScriptsQuery)>;
  const auto &sys = _reg_sys_exec_AllScriptsQuery;
  const auto &components = sys.queryDesc.components;
  auto &query = g_mgr->queries[sys.id];
  for (int chunkIdx = 0; chunkIdx < query.chunksCount; ++chunkIdx)
  {
    const int compIdx_script = query.desc.getComponentIndex(hash::cstr("script"));
    QueryChunk &chunk_script = query.chunks[compIdx_script + chunkIdx * query.componentsCount];
    auto it_script = chunk_script.begin<script::ScriptComponent>();
    for (int i = 0; i < query.entitiesInChunk[chunkIdx]; ++i, ++it_script)
      callback(*it_script);
  }
}

template <> template <> __forceinline void RegSysSpec<1792234238, decltype(init_websocket_server_handler)>::execImpl<>(const ExtraArguments &args, Query &query, eastl::index_sequence<0, 1, 2>) const
{
  for (int chunkIdx = 0; chunkIdx < query.chunksCount; ++chunkIdx)
  {
    const int compIdx_eid = query.desc.getComponentIndex(hash::cstr("eid"));
    const int compIdx_ws_server = query.desc.getComponentIndex(hash::cstr("ws_server"));
    QueryChunk &chunk_eid = query.chunks[compIdx_eid + chunkIdx * query.componentsCount];
    QueryChunk &chunk_ws_server = query.chunks[compIdx_ws_server + chunkIdx * query.componentsCount];
    auto it_eid = chunk_eid.begin<EntityId>();
    auto it_ws_server = chunk_ws_server.begin<WebsocketServer>();
    for (int i = 0; i < query.entitiesInChunk[chunkIdx]; ++i, ++it_eid, ++it_ws_server)
      init_websocket_server_handler(*(EventOnEntityCreate*)args.stageOrEvent.mem, *it_eid, *it_ws_server);
  }
}

template <> template <> __forceinline void RegSysSpec<4294383132, decltype(update_websocket_server)>::execImpl<>(const ExtraArguments &args, Query &query, eastl::index_sequence<0, 1>) const
{
  for (int chunkIdx = 0; chunkIdx < query.chunksCount; ++chunkIdx)
  {
    const int compIdx_ws_server = query.desc.getComponentIndex(hash::cstr("ws_server"));
    QueryChunk &chunk_ws_server = query.chunks[compIdx_ws_server + chunkIdx * query.componentsCount];
    auto it_ws_server = chunk_ws_server.begin<WebsocketServer>();
    for (int i = 0; i < query.entitiesInChunk[chunkIdx]; ++i, ++it_ws_server)
      update_websocket_server(*(UpdateStage*)args.stageOrEvent.mem, *it_ws_server);
  }
}

template <> template <> __forceinline void RegSysSpec<2741717703, decltype(ws_get_ecs_data)>::execImpl<>(const ExtraArguments &args, Query &query, eastl::index_sequence<0, 1>) const
{
  for (int chunkIdx = 0; chunkIdx < query.chunksCount; ++chunkIdx)
  {
    const int compIdx_ws_server = query.desc.getComponentIndex(hash::cstr("ws_server"));
    QueryChunk &chunk_ws_server = query.chunks[compIdx_ws_server + chunkIdx * query.componentsCount];
    auto it_ws_server = chunk_ws_server.begin<WebsocketServer>();
    for (int i = 0; i < query.entitiesInChunk[chunkIdx]; ++i, ++it_ws_server)
      ws_get_ecs_data(*(WSGetECSData*)args.stageOrEvent.mem, *it_ws_server);
  }
}

#endif // __CODEGEN__
