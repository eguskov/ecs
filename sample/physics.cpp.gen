//! GENERATED FILE


#ifndef __CODEGEN__

#include "physics.cpp"

static ComponentDescriptionDetails<PhysicsWorld> _reg_comp_PhysicsWorld("PhysicsWorld");
static ComponentDescriptionDetails<CollisionShape> _reg_comp_CollisionShape("CollisionShape");
static ComponentDescriptionDetails<PhysicsBody> _reg_comp_PhysicsBody("PhysicsBody");
static constexpr ConstComponentDescription init_physics_collision_handler_components[] = {
  {HASH("eid"), ComponentType<EntityId>::size, ComponentDescriptionFlags::kNone},
  {HASH("phys_body"), ComponentType<PhysicsBody>::size, ComponentDescriptionFlags::kWrite},
  {HASH("collision_shape"), ComponentType<CollisionShape>::size, ComponentDescriptionFlags::kWrite},
};
static constexpr ConstQueryDescription init_physics_collision_handler_query_desc = {
  make_const_array(init_physics_collision_handler_components),
  empty_desc_array,
  empty_desc_array,
  empty_desc_array,
};
static constexpr ConstComponentDescription init_physics_body_handler_components[] = {
  {HASH("phys_body"), ComponentType<PhysicsBody>::size, ComponentDescriptionFlags::kWrite},
  {HASH("pos"), ComponentType<glm::vec2>::size, ComponentDescriptionFlags::kNone},
};
static constexpr ConstQueryDescription init_physics_body_handler_query_desc = {
  make_const_array(init_physics_body_handler_components),
  empty_desc_array,
  empty_desc_array,
  empty_desc_array,
};
static constexpr ConstComponentDescription delete_physics_body_handler_components[] = {
  {HASH("phys_body"), ComponentType<PhysicsBody>::size, ComponentDescriptionFlags::kWrite},
};
static constexpr ConstQueryDescription delete_physics_body_handler_query_desc = {
  make_const_array(delete_physics_body_handler_components),
  empty_desc_array,
  empty_desc_array,
  empty_desc_array,
};
static constexpr ConstComponentDescription init_physics_world_components[] = {
  {HASH("phys_world"), ComponentType<PhysicsWorld>::size, ComponentDescriptionFlags::kWrite},
};
static constexpr ConstQueryDescription init_physics_world_query_desc = {
  make_const_array(init_physics_world_components),
  empty_desc_array,
  empty_desc_array,
  empty_desc_array,
};
static constexpr ConstComponentDescription delete_physics_world_components[] = {
  {HASH("phys_world"), ComponentType<PhysicsWorld>::size, ComponentDescriptionFlags::kWrite},
};
static constexpr ConstQueryDescription delete_physics_world_query_desc = {
  make_const_array(delete_physics_world_components),
  empty_desc_array,
  empty_desc_array,
  empty_desc_array,
};
static constexpr ConstComponentDescription tick_physics_world_components[] = {
  {HASH("phys_world"), ComponentType<PhysicsWorld>::size, ComponentDescriptionFlags::kWrite},
};
static constexpr ConstQueryDescription tick_physics_world_query_desc = {
  make_const_array(tick_physics_world_components),
  empty_desc_array,
  empty_desc_array,
  empty_desc_array,
};
static constexpr ConstComponentDescription render_debug_physics_components[] = {
  {HASH("phys_world"), ComponentType<PhysicsWorld>::size, ComponentDescriptionFlags::kNone},
};
static constexpr ConstQueryDescription render_debug_physics_query_desc = {
  make_const_array(render_debug_physics_components),
  empty_desc_array,
  empty_desc_array,
  empty_desc_array,
};
static constexpr ConstComponentDescription copy_kinematic_body_state_to_physics_components[] = {
  {HASH("phys_body"), ComponentType<PhysicsBody>::size, ComponentDescriptionFlags::kWrite},
  {HASH("pos"), ComponentType<glm::vec2>::size, ComponentDescriptionFlags::kNone},
  {HASH("vel"), ComponentType<glm::vec2>::size, ComponentDescriptionFlags::kNone},
};
static constexpr ConstQueryDescription copy_kinematic_body_state_to_physics_query_desc = {
  make_const_array(copy_kinematic_body_state_to_physics_components),
  empty_desc_array,
  empty_desc_array,
  empty_desc_array,
};
static constexpr ConstComponentDescription render_debug_player_grid_cell_components[] = {
  {HASH("pos"), ComponentType<glm::vec2>::size, ComponentDescriptionFlags::kNone},
  {HASH("grid_cell"), ComponentType<int>::size, ComponentDescriptionFlags::kNone},
};
static constexpr ConstComponentDescription render_debug_player_grid_cell_have_components[] = {
  {HASH("user_input"), 0},
  {HASH("grid_cell"), 0},
};
static constexpr ConstComponentDescription render_debug_player_grid_cell_track_components[] = {
  {HASH("grid_cell"), ComponentType<bool>::size},
};
static constexpr ConstQueryDescription render_debug_player_grid_cell_query_desc = {
  make_const_array(render_debug_player_grid_cell_components),
  make_const_array(render_debug_player_grid_cell_have_components),
  empty_desc_array,
  make_const_array(render_debug_player_grid_cell_track_components),
};

static constexpr ConstComponentDescription Brick_components[] = {
  {HASH("collision_shape"), ComponentType<CollisionShape>::size, ComponentDescriptionFlags::kNone},
  {HASH("pos"), ComponentType<glm::vec2>::size, ComponentDescriptionFlags::kNone},
};
static constexpr ConstComponentDescription Brick_have_components[] = {
  {HASH("wall"), 0},
};
static constexpr ConstQueryDescription Brick_query_desc = {
  make_const_array(Brick_components),
  make_const_array(Brick_have_components),
  empty_desc_array,
  empty_desc_array,
};
static constexpr ConstComponentDescription MovingBrick_components[] = {
  {HASH("collision_shape"), ComponentType<CollisionShape>::size, ComponentDescriptionFlags::kNone},
  {HASH("pos"), ComponentType<glm::vec2>::size, ComponentDescriptionFlags::kNone},
  {HASH("vel"), ComponentType<glm::vec2>::size, ComponentDescriptionFlags::kNone},
};
static constexpr ConstComponentDescription MovingBrick_have_components[] = {
  {HASH("wall"), 0},
  {HASH("auto_move"), 0},
};
static constexpr ConstQueryDescription MovingBrick_query_desc = {
  make_const_array(MovingBrick_components),
  make_const_array(MovingBrick_have_components),
  empty_desc_array,
  empty_desc_array,
};
static constexpr ConstComponentDescription AliveEnemy_components[] = {
  {HASH("eid"), ComponentType<EntityId>::size, ComponentDescriptionFlags::kNone},
  {HASH("collision_shape"), ComponentType<CollisionShape>::size, ComponentDescriptionFlags::kNone},
  {HASH("pos"), ComponentType<glm::vec2>::size, ComponentDescriptionFlags::kNone},
  {HASH("is_alive"), ComponentType<bool>::size, ComponentDescriptionFlags::kWrite},
  {HASH("vel"), ComponentType<glm::vec2>::size, ComponentDescriptionFlags::kWrite},
};
static constexpr ConstComponentDescription AliveEnemy_have_components[] = {
  {HASH("enemy"), 0},
  {HASH("is_alive"), 0},
};
static constexpr ConstComponentDescription AliveEnemy_track_components[] = {
  {HASH("is_alive"), ComponentType<bool>::size},
};
static constexpr ConstQueryDescription AliveEnemy_query_desc = {
  make_const_array(AliveEnemy_components),
  make_const_array(AliveEnemy_have_components),
  empty_desc_array,
  make_const_array(AliveEnemy_track_components),
};
static constexpr ConstComponentDescription PlayerCollision_components[] = {
  {HASH("eid"), ComponentType<EntityId>::size, ComponentDescriptionFlags::kNone},
  {HASH("collision_shape"), ComponentType<CollisionShape>::size, ComponentDescriptionFlags::kNone},
  {HASH("gravity"), ComponentType<Gravity>::size, ComponentDescriptionFlags::kNone},
  {HASH("grid_cell"), ComponentType<int>::size, ComponentDescriptionFlags::kNone},
  {HASH("jump"), ComponentType<Jump>::size, ComponentDescriptionFlags::kWrite},
  {HASH("pos"), ComponentType<glm::vec2>::size, ComponentDescriptionFlags::kWrite},
  {HASH("vel"), ComponentType<glm::vec2>::size, ComponentDescriptionFlags::kWrite},
  {HASH("is_on_ground"), ComponentType<bool>::size, ComponentDescriptionFlags::kWrite},
};
static constexpr ConstComponentDescription PlayerCollision_have_components[] = {
  {HASH("user_input"), 0},
  {HASH("grid_cell"), 0},
};
static constexpr ConstComponentDescription PlayerCollision_track_components[] = {
  {HASH("grid_cell"), ComponentType<bool>::size},
};
static constexpr ConstQueryDescription PlayerCollision_query_desc = {
  make_const_array(PlayerCollision_components),
  make_const_array(PlayerCollision_have_components),
  empty_desc_array,
  make_const_array(PlayerCollision_track_components),
};
static constexpr ConstComponentDescription EnemyCollision_components[] = {
  {HASH("eid"), ComponentType<EntityId>::size, ComponentDescriptionFlags::kNone},
  {HASH("collision_shape"), ComponentType<CollisionShape>::size, ComponentDescriptionFlags::kNone},
  {HASH("pos"), ComponentType<glm::vec2>::size, ComponentDescriptionFlags::kWrite},
  {HASH("vel"), ComponentType<glm::vec2>::size, ComponentDescriptionFlags::kWrite},
  {HASH("dir"), ComponentType<float>::size, ComponentDescriptionFlags::kWrite},
  {HASH("is_on_ground"), ComponentType<bool>::size, ComponentDescriptionFlags::kWrite},
};
static constexpr ConstComponentDescription EnemyCollision_have_components[] = {
  {HASH("enemy"), 0},
  {HASH("auto_move"), 0},
  {HASH("wall_collidable"), 0},
  {HASH("is_alive"), 0},
};
static constexpr ConstComponentDescription EnemyCollision_track_components[] = {
  {HASH("is_alive"), ComponentType<bool>::size},
};
static constexpr ConstQueryDescription EnemyCollision_query_desc = {
  make_const_array(EnemyCollision_components),
  make_const_array(EnemyCollision_have_components),
  empty_desc_array,
  make_const_array(EnemyCollision_track_components),
};
using BrickBuilder = StructBuilder<
  StructField<CollisionShape, INDEX_OF_COMPONENT(Brick, collision_shape)>,
  StructField<glm::vec2, INDEX_OF_COMPONENT(Brick, pos)>
>;
using MovingBrickBuilder = StructBuilder<
  StructField<CollisionShape, INDEX_OF_COMPONENT(MovingBrick, collision_shape)>,
  StructField<glm::vec2, INDEX_OF_COMPONENT(MovingBrick, pos)>,
  StructField<glm::vec2, INDEX_OF_COMPONENT(MovingBrick, vel)>
>;
using AliveEnemyBuilder = StructBuilder<
  StructField<EntityId, INDEX_OF_COMPONENT(AliveEnemy, eid)>,
  StructField<CollisionShape, INDEX_OF_COMPONENT(AliveEnemy, collision_shape)>,
  StructField<glm::vec2, INDEX_OF_COMPONENT(AliveEnemy, pos)>,
  StructField<bool, INDEX_OF_COMPONENT(AliveEnemy, is_alive)>,
  StructField<glm::vec2, INDEX_OF_COMPONENT(AliveEnemy, vel)>
>;
using PlayerCollisionBuilder = StructBuilder<
  StructField<EntityId, INDEX_OF_COMPONENT(PlayerCollision, eid)>,
  StructField<CollisionShape, INDEX_OF_COMPONENT(PlayerCollision, collision_shape)>,
  StructField<Gravity, INDEX_OF_COMPONENT(PlayerCollision, gravity)>,
  StructField<int, INDEX_OF_COMPONENT(PlayerCollision, grid_cell)>,
  StructField<Jump, INDEX_OF_COMPONENT(PlayerCollision, jump)>,
  StructField<glm::vec2, INDEX_OF_COMPONENT(PlayerCollision, pos)>,
  StructField<glm::vec2, INDEX_OF_COMPONENT(PlayerCollision, vel)>,
  StructField<bool, INDEX_OF_COMPONENT(PlayerCollision, is_on_ground)>
>;
using EnemyCollisionBuilder = StructBuilder<
  StructField<EntityId, INDEX_OF_COMPONENT(EnemyCollision, eid)>,
  StructField<CollisionShape, INDEX_OF_COMPONENT(EnemyCollision, collision_shape)>,
  StructField<glm::vec2, INDEX_OF_COMPONENT(EnemyCollision, pos)>,
  StructField<glm::vec2, INDEX_OF_COMPONENT(EnemyCollision, vel)>,
  StructField<float, INDEX_OF_COMPONENT(EnemyCollision, dir)>,
  StructField<bool, INDEX_OF_COMPONENT(EnemyCollision, is_on_ground)>
>;
static constexpr ConstComponentDescription index_by_Brick_grid_cell_components[] = {
  {HASH("collision_shape"), ComponentType<CollisionShape>::size, ComponentDescriptionFlags::kNone},
  {HASH("pos"), ComponentType<glm::vec2>::size, ComponentDescriptionFlags::kNone},
};
static constexpr ConstComponentDescription index_by_Brick_grid_cell_have_components[] = {
  {HASH("wall"), 0},
  {HASH("grid_cell"), 0},
};
static constexpr ConstQueryDescription index_by_Brick_grid_cell_query_desc = {
  make_const_array(index_by_Brick_grid_cell_components),
  make_const_array(index_by_Brick_grid_cell_have_components),
  empty_desc_array,
  empty_desc_array,
};

static PersistentQueryDescription _reg_query_Brick(HASH("physics.cpp_Brick"), Brick_query_desc, nullptr);
static PersistentQueryDescription _reg_query_MovingBrick(HASH("physics.cpp_MovingBrick"), MovingBrick_query_desc, nullptr);
static PersistentQueryDescription _reg_query_AliveEnemy(HASH("physics.cpp_AliveEnemy"), AliveEnemy_query_desc, 
[](const Archetype &type, int entity_idx)
{
  GET_COMPONENT_VALUE(is_alive, bool);
  return is_alive == true;
});
static PersistentQueryDescription _reg_query_PlayerCollision(HASH("physics.cpp_PlayerCollision"), PlayerCollision_query_desc, 
[](const Archetype &type, int entity_idx)
{
  GET_COMPONENT_VALUE(grid_cell, int);
  return grid_cell != -1;
});
static PersistentQueryDescription _reg_query_EnemyCollision(HASH("physics.cpp_EnemyCollision"), EnemyCollision_query_desc, 
[](const Archetype &type, int entity_idx)
{
  GET_COMPONENT_VALUE(is_alive, bool);
  return is_alive == true;
});

static IndexDescription _reg_index_index_by_Brick_grid_cell(HASH("physics.cpp_index_by_Brick_grid_cell"), HASH("grid_cell"), index_by_Brick_grid_cell_query_desc, nullptr);

int Brick::count()
{
  return ecs::get_entities_count(_reg_query_Brick.queryId);
}
template <typename Callable> void Brick::foreach(Callable callback)
{
  Query &query = ecs::get_query(_reg_query_Brick.queryId);
  for (auto q = query.begin(), e = query.end(); q != e; ++q)
    callback(
    {
      GET_COMPONENT(Brick, q, CollisionShape, collision_shape),
      GET_COMPONENT(Brick, q, glm::vec2, pos)
    });
}
Index* Brick::index()
{
  return ecs::find_index(HASH("physics.cpp_index_by_Brick_grid_cell"));
}
Brick Brick::get(QueryIterator &iter)
{
  return {
      GET_COMPONENT(Brick, iter, CollisionShape, collision_shape),
      GET_COMPONENT(Brick, iter, glm::vec2, pos)
    };
}
int MovingBrick::count()
{
  return ecs::get_entities_count(_reg_query_MovingBrick.queryId);
}
template <typename Callable> void MovingBrick::foreach(Callable callback)
{
  Query &query = ecs::get_query(_reg_query_MovingBrick.queryId);
  for (auto q = query.begin(), e = query.end(); q != e; ++q)
    callback(
    {
      GET_COMPONENT(MovingBrick, q, CollisionShape, collision_shape),
      GET_COMPONENT(MovingBrick, q, glm::vec2, pos),
      GET_COMPONENT(MovingBrick, q, glm::vec2, vel)
    });
}
Index* MovingBrick::index()
{
  return nullptr;
}
MovingBrick MovingBrick::get(QueryIterator &iter)
{
  return {
      GET_COMPONENT(MovingBrick, iter, CollisionShape, collision_shape),
      GET_COMPONENT(MovingBrick, iter, glm::vec2, pos),
      GET_COMPONENT(MovingBrick, iter, glm::vec2, vel)
    };
}
int AliveEnemy::count()
{
  return ecs::get_entities_count(_reg_query_AliveEnemy.queryId);
}
template <typename Callable> void AliveEnemy::foreach(Callable callback)
{
  Query &query = ecs::get_query(_reg_query_AliveEnemy.queryId);
  for (auto q = query.begin(), e = query.end(); q != e; ++q)
    callback(
    {
      GET_COMPONENT(AliveEnemy, q, EntityId, eid),
      GET_COMPONENT(AliveEnemy, q, CollisionShape, collision_shape),
      GET_COMPONENT(AliveEnemy, q, glm::vec2, pos),
      GET_COMPONENT(AliveEnemy, q, bool, is_alive),
      GET_COMPONENT(AliveEnemy, q, glm::vec2, vel)
    });
}
Index* AliveEnemy::index()
{
  return nullptr;
}
AliveEnemy AliveEnemy::get(QueryIterator &iter)
{
  return {
      GET_COMPONENT(AliveEnemy, iter, EntityId, eid),
      GET_COMPONENT(AliveEnemy, iter, CollisionShape, collision_shape),
      GET_COMPONENT(AliveEnemy, iter, glm::vec2, pos),
      GET_COMPONENT(AliveEnemy, iter, bool, is_alive),
      GET_COMPONENT(AliveEnemy, iter, glm::vec2, vel)
    };
}
int PlayerCollision::count()
{
  return ecs::get_entities_count(_reg_query_PlayerCollision.queryId);
}
template <typename Callable> void PlayerCollision::foreach(Callable callback)
{
  Query &query = ecs::get_query(_reg_query_PlayerCollision.queryId);
  for (auto q = query.begin(), e = query.end(); q != e; ++q)
    callback(
    {
      GET_COMPONENT(PlayerCollision, q, EntityId, eid),
      GET_COMPONENT(PlayerCollision, q, CollisionShape, collision_shape),
      GET_COMPONENT(PlayerCollision, q, Gravity, gravity),
      GET_COMPONENT(PlayerCollision, q, int, grid_cell),
      GET_COMPONENT(PlayerCollision, q, Jump, jump),
      GET_COMPONENT(PlayerCollision, q, glm::vec2, pos),
      GET_COMPONENT(PlayerCollision, q, glm::vec2, vel),
      GET_COMPONENT(PlayerCollision, q, bool, is_on_ground)
    });
}
Index* PlayerCollision::index()
{
  return nullptr;
}
PlayerCollision PlayerCollision::get(QueryIterator &iter)
{
  return {
      GET_COMPONENT(PlayerCollision, iter, EntityId, eid),
      GET_COMPONENT(PlayerCollision, iter, CollisionShape, collision_shape),
      GET_COMPONENT(PlayerCollision, iter, Gravity, gravity),
      GET_COMPONENT(PlayerCollision, iter, int, grid_cell),
      GET_COMPONENT(PlayerCollision, iter, Jump, jump),
      GET_COMPONENT(PlayerCollision, iter, glm::vec2, pos),
      GET_COMPONENT(PlayerCollision, iter, glm::vec2, vel),
      GET_COMPONENT(PlayerCollision, iter, bool, is_on_ground)
    };
}
int EnemyCollision::count()
{
  return ecs::get_entities_count(_reg_query_EnemyCollision.queryId);
}
template <typename Callable> void EnemyCollision::foreach(Callable callback)
{
  Query &query = ecs::get_query(_reg_query_EnemyCollision.queryId);
  for (auto q = query.begin(), e = query.end(); q != e; ++q)
    callback(
    {
      GET_COMPONENT(EnemyCollision, q, EntityId, eid),
      GET_COMPONENT(EnemyCollision, q, CollisionShape, collision_shape),
      GET_COMPONENT(EnemyCollision, q, glm::vec2, pos),
      GET_COMPONENT(EnemyCollision, q, glm::vec2, vel),
      GET_COMPONENT(EnemyCollision, q, float, dir),
      GET_COMPONENT(EnemyCollision, q, bool, is_on_ground)
    });
}
Index* EnemyCollision::index()
{
  return nullptr;
}
EnemyCollision EnemyCollision::get(QueryIterator &iter)
{
  return {
      GET_COMPONENT(EnemyCollision, iter, EntityId, eid),
      GET_COMPONENT(EnemyCollision, iter, CollisionShape, collision_shape),
      GET_COMPONENT(EnemyCollision, iter, glm::vec2, pos),
      GET_COMPONENT(EnemyCollision, iter, glm::vec2, vel),
      GET_COMPONENT(EnemyCollision, iter, float, dir),
      GET_COMPONENT(EnemyCollision, iter, bool, is_on_ground)
    };
}
static void update_player_collisions_run(const RawArg &stage_or_event, Query&)
{
  ecs::wait_system_dependencies(HASH("update_player_collisions"));
  Query &query = ecs::get_query(_reg_query_PlayerCollision.queryId);
  for (auto q = query.begin(), e = query.end(); q != e; ++q)
    update_player_collisions::run(*(EventUpdate*)stage_or_event.mem,
    {
      GET_COMPONENT(PlayerCollision, q, EntityId, eid),
      GET_COMPONENT(PlayerCollision, q, CollisionShape, collision_shape),
      GET_COMPONENT(PlayerCollision, q, Gravity, gravity),
      GET_COMPONENT(PlayerCollision, q, int, grid_cell),
      GET_COMPONENT(PlayerCollision, q, Jump, jump),
      GET_COMPONENT(PlayerCollision, q, glm::vec2, pos),
      GET_COMPONENT(PlayerCollision, q, glm::vec2, vel),
      GET_COMPONENT(PlayerCollision, q, bool, is_on_ground)
    });
}
static SystemDescription _reg_sys_update_player_collisions(HASH("update_player_collisions"), &update_player_collisions_run, HASH("EventUpdate"), "*", "collisions_update");

static void update_auto_move_collisions_run(const RawArg &stage_or_event, Query&)
{
  ecs::wait_system_dependencies(HASH("update_auto_move_collisions"));
  Query &query = ecs::get_query(_reg_query_EnemyCollision.queryId);
  for (auto q = query.begin(), e = query.end(); q != e; ++q)
    update_auto_move_collisions::run(*(EventUpdate*)stage_or_event.mem,
    {
      GET_COMPONENT(EnemyCollision, q, EntityId, eid),
      GET_COMPONENT(EnemyCollision, q, CollisionShape, collision_shape),
      GET_COMPONENT(EnemyCollision, q, glm::vec2, pos),
      GET_COMPONENT(EnemyCollision, q, glm::vec2, vel),
      GET_COMPONENT(EnemyCollision, q, float, dir),
      GET_COMPONENT(EnemyCollision, q, bool, is_on_ground)
    });
}
static SystemDescription _reg_sys_update_auto_move_collisions(HASH("update_auto_move_collisions"), &update_auto_move_collisions_run, HASH("EventUpdate"), "update_player_collisions", "collisions_update");

static void init_physics_collision_handler_run(const RawArg &stage_or_event, Query &query)
{
  ecs::wait_system_dependencies(HASH("init_physics_collision_handler"));
  for (auto q = query.begin(), e = query.end(); q != e; ++q)
    init_physics_collision_handler::run(*(EventOnEntityCreate*)stage_or_event.mem,
      GET_COMPONENT(init_physics_collision_handler, q, EntityId, eid),
      GET_COMPONENT(init_physics_collision_handler, q, PhysicsBody, phys_body),
      GET_COMPONENT(init_physics_collision_handler, q, CollisionShape, collision_shape));
}
static SystemDescription _reg_sys_init_physics_collision_handler(HASH("init_physics_collision_handler"), &init_physics_collision_handler_run, HASH("EventOnEntityCreate"), init_physics_collision_handler_query_desc, "*", "init_physics_world,init_physics_body_handler", nullptr);

static void init_physics_body_handler_run(const RawArg &stage_or_event, Query &query)
{
  ecs::wait_system_dependencies(HASH("init_physics_body_handler"));
  for (auto q = query.begin(), e = query.end(); q != e; ++q)
    init_physics_body_handler::run(*(EventOnEntityCreate*)stage_or_event.mem,
      GET_COMPONENT(init_physics_body_handler, q, PhysicsBody, phys_body),
      GET_COMPONENT(init_physics_body_handler, q, glm::vec2, pos));
}
static SystemDescription _reg_sys_init_physics_body_handler(HASH("init_physics_body_handler"), &init_physics_body_handler_run, HASH("EventOnEntityCreate"), init_physics_body_handler_query_desc, "*", "init_physics_world", nullptr);

static void delete_physics_body_handler_run(const RawArg &stage_or_event, Query &query)
{
  ecs::wait_system_dependencies(HASH("delete_physics_body_handler"));
  for (auto q = query.begin(), e = query.end(); q != e; ++q)
    delete_physics_body_handler::run(*(EventOnEntityDelete*)stage_or_event.mem,
      GET_COMPONENT(delete_physics_body_handler, q, PhysicsBody, phys_body));
}
static SystemDescription _reg_sys_delete_physics_body_handler(HASH("delete_physics_body_handler"), &delete_physics_body_handler_run, HASH("EventOnEntityDelete"), delete_physics_body_handler_query_desc, "delete_physics_world", "*", nullptr);

static void init_physics_world_run(const RawArg &stage_or_event, Query &query)
{
  ecs::wait_system_dependencies(HASH("init_physics_world"));
  for (auto q = query.begin(), e = query.end(); q != e; ++q)
    init_physics_world::run(*(EventOnEntityCreate*)stage_or_event.mem,
      GET_COMPONENT(init_physics_world, q, PhysicsWorld, phys_world));
}
static SystemDescription _reg_sys_init_physics_world(HASH("init_physics_world"), &init_physics_world_run, HASH("EventOnEntityCreate"), init_physics_world_query_desc, "*", "*", nullptr);

static void delete_physics_world_run(const RawArg &stage_or_event, Query &query)
{
  ecs::wait_system_dependencies(HASH("delete_physics_world"));
  for (auto q = query.begin(), e = query.end(); q != e; ++q)
    delete_physics_world::run(*(EventOnEntityDelete*)stage_or_event.mem,
      GET_COMPONENT(delete_physics_world, q, PhysicsWorld, phys_world));
}
static SystemDescription _reg_sys_delete_physics_world(HASH("delete_physics_world"), &delete_physics_world_run, HASH("EventOnEntityDelete"), delete_physics_world_query_desc, "*", "*", nullptr);

static void tick_physics_world_run(const RawArg &stage_or_event, Query &query)
{
  ecs::wait_system_dependencies(HASH("tick_physics_world"));
  for (auto q = query.begin(), e = query.end(); q != e; ++q)
    tick_physics_world::run(*(EventUpdate*)stage_or_event.mem,
      GET_COMPONENT(tick_physics_world, q, PhysicsWorld, phys_world));
}
static SystemDescription _reg_sys_tick_physics_world(HASH("tick_physics_world"), &tick_physics_world_run, HASH("EventUpdate"), tick_physics_world_query_desc, "after_phys_update", "before_phys_update", nullptr);

static void render_debug_physics_run(const RawArg &stage_or_event, Query &query)
{
  ecs::wait_system_dependencies(HASH("render_debug_physics"));
  for (auto q = query.begin(), e = query.end(); q != e; ++q)
    render_debug_physics::run(*(EventRenderDebug*)stage_or_event.mem,
      GET_COMPONENT(render_debug_physics, q, PhysicsWorld, phys_world));
}
static SystemDescription _reg_sys_render_debug_physics(HASH("render_debug_physics"), &render_debug_physics_run, HASH("EventRenderDebug"), render_debug_physics_query_desc, "*", "after_render", nullptr);

static void copy_kinematic_body_state_to_physics_run(const RawArg &stage_or_event, Query &query)
{
  ecs::wait_system_dependencies(HASH("copy_kinematic_body_state_to_physics"));
  for (auto q = query.begin(), e = query.end(); q != e; ++q)
    copy_kinematic_body_state_to_physics::run(*(EventUpdate*)stage_or_event.mem,
      GET_COMPONENT(copy_kinematic_body_state_to_physics, q, PhysicsBody, phys_body),
      GET_COMPONENT(copy_kinematic_body_state_to_physics, q, glm::vec2, pos),
      GET_COMPONENT(copy_kinematic_body_state_to_physics, q, glm::vec2, vel));
}
static SystemDescription _reg_sys_copy_kinematic_body_state_to_physics(HASH("copy_kinematic_body_state_to_physics"), &copy_kinematic_body_state_to_physics_run, HASH("EventUpdate"), copy_kinematic_body_state_to_physics_query_desc, "*", "tick_physics_world", nullptr);

static void render_debug_player_grid_cell_run(const RawArg &stage_or_event, Query &query)
{
  ecs::wait_system_dependencies(HASH("render_debug_player_grid_cell"));
  for (auto q = query.begin(), e = query.end(); q != e; ++q)
    render_debug_player_grid_cell::run(*(EventRenderDebug*)stage_or_event.mem,
      GET_COMPONENT(render_debug_player_grid_cell, q, glm::vec2, pos),
      GET_COMPONENT(render_debug_player_grid_cell, q, int, grid_cell));
}
static SystemDescription _reg_sys_render_debug_player_grid_cell(HASH("render_debug_player_grid_cell"), &render_debug_player_grid_cell_run, HASH("EventRenderDebug"), render_debug_player_grid_cell_query_desc, "*", "after_render", 
[](const Archetype &type, int entity_idx)
{
  GET_COMPONENT_VALUE(grid_cell, int);
  return grid_cell != -1;
});


struct PhysicsWorldAnnotation final : das::ManagedStructureAnnotation<PhysicsWorld, false>
{
  PhysicsWorldAnnotation(das::ModuleLibrary &lib) : das::ManagedStructureAnnotation<PhysicsWorld, false>("PhysicsWorld", lib)
  {
    cppName = " ::PhysicsWorld";
  }
  bool isLocal() const override { return true; }
};
struct CollisionShapeAnnotation final : das::ManagedStructureAnnotation<CollisionShape, true>
{
  CollisionShapeAnnotation(das::ModuleLibrary &lib) : das::ManagedStructureAnnotation<CollisionShape, true>("CollisionShape", lib)
  {
    cppName = " ::CollisionShape";
  }
  bool isRefType() const override { return true; }
  bool isPod() const override { return false; }
  bool isLocal() const override { return true; }
  bool canCopy() const override { return true; }
  bool canMove() const override { return true; }
  das::SimNode* simulateClone(das::Context & context, const das::LineInfo & at, das::SimNode * l, das::SimNode * r) const override
  {
    return context.code->makeNode<das::SimNode_CloneRefValueT<CollisionShape>>(at, l, r);
  }
};
struct PhysicsBodyAnnotation final : das::ManagedStructureAnnotation<PhysicsBody, false>
{
  PhysicsBodyAnnotation(das::ModuleLibrary &lib) : das::ManagedStructureAnnotation<PhysicsBody, false>("PhysicsBody", lib)
  {
    cppName = " ::PhysicsBody";
  }
  bool isLocal() const override { return true; }
  bool canCopy() const override { return true; }
  das::SimNode* simulateClone(das::Context & context, const das::LineInfo & at, das::SimNode * l, das::SimNode * r) const override
  {
    return context.code->makeNode<das::SimNode_CloneRefValueT<PhysicsBody>>(at, l, r);
  }
};
static void phys_auto_bind(das::Module &module, das::ModuleLibrary &lib)
{
  module.addAnnotation(das::make_smart<PhysicsWorldAnnotation>(lib));
  module.addAnnotation(das::make_smart<CollisionShapeAnnotation>(lib));
  module.addAnnotation(das::make_smart<PhysicsBodyAnnotation>(lib));
  das::addExtern<DAS_BIND_FUN(CollisionShape::add_shape), das::SimNode_ExtFuncCall>(module, lib, "add_shape", das::SideEffects::modifyArgument, "CollisionShape::add_shape");
  das::addExtern<DAS_BIND_FUN(CollisionShape::add_sensor), das::SimNode_ExtFuncCall>(module, lib, "add_sensor", das::SideEffects::modifyArgument, "CollisionShape::add_sensor");
  das::addExtern<DAS_BIND_FUN(PhysicsBody::create_phys_body), das::SimNode_ExtFuncCallAndCopyOrMove>(module, lib, "create_phys_body", das::SideEffects::none, "PhysicsBody::create_phys_body");
}
static AutoBindDescription _reg_auto_bind_phys(HASH("phys"), &phys_auto_bind);
#endif // __CODEGEN__
