//! GENERATED FILE


#ifndef __CODEGEN__

#include "physics.cpp"

static RegCompSpec<PhysicsWorld> _reg_comp_phys_world("phys_world");
template <> int RegCompSpec<PhysicsWorld>::ID = -1;

static RegCompSpec<CollisionShape> _reg_comp_collision_shape("collision_shape");
template <> int RegCompSpec<CollisionShape>::ID = -1;

static RegCompSpec<PhysicsBody> _reg_comp_phys_body("phys_body");
template <> int RegCompSpec<PhysicsBody>::ID = -1;

static constexpr ConstCompDesc init_physics_collision_handler_components[] = {
  {HASH("eid"), Desc<EntityId>::Size},
  {HASH("phys_body"), Desc<PhysicsBody>::Size},
  {HASH("collision_shape"), Desc<CollisionShape>::Size},
};
static constexpr ConstQueryDesc init_physics_collision_handler_query_desc = {
  make_const_array(init_physics_collision_handler_components),
  empty_desc_array,
  empty_desc_array,
  empty_desc_array,
  empty_desc_array,
  empty_desc_array,
};
static constexpr ConstCompDesc init_physics_body_handler_components[] = {
  {HASH("phys_body"), Desc<PhysicsBody>::Size},
  {HASH("pos"), Desc<glm::vec2>::Size},
};
static constexpr ConstQueryDesc init_physics_body_handler_query_desc = {
  make_const_array(init_physics_body_handler_components),
  empty_desc_array,
  empty_desc_array,
  empty_desc_array,
  empty_desc_array,
  empty_desc_array,
};
static constexpr ConstCompDesc init_physics_world_handler_components[] = {
  {HASH("phys_world"), Desc<PhysicsWorld>::Size},
};
static constexpr ConstQueryDesc init_physics_world_handler_query_desc = {
  make_const_array(init_physics_world_handler_components),
  empty_desc_array,
  empty_desc_array,
  empty_desc_array,
  empty_desc_array,
  empty_desc_array,
};
static constexpr ConstCompDesc update_physics_components[] = {
  {HASH("phys_world"), Desc<PhysicsWorld>::Size},
};
static constexpr ConstQueryDesc update_physics_query_desc = {
  make_const_array(update_physics_components),
  empty_desc_array,
  empty_desc_array,
  empty_desc_array,
  empty_desc_array,
  empty_desc_array,
};
static constexpr ConstCompDesc render_debug_physics_components[] = {
  {HASH("phys_world"), Desc<PhysicsWorld>::Size},
};
static constexpr ConstQueryDesc render_debug_physics_query_desc = {
  make_const_array(render_debug_physics_components),
  empty_desc_array,
  empty_desc_array,
  empty_desc_array,
  empty_desc_array,
  empty_desc_array,
};
static constexpr ConstCompDesc update_kinematic_physics_body_components[] = {
  {HASH("phys_body"), Desc<PhysicsBody>::Size},
  {HASH("pos"), Desc<glm::vec2>::Size},
  {HASH("vel"), Desc<glm::vec2>::Size},
};
static constexpr ConstQueryDesc update_kinematic_physics_body_query_desc = {
  make_const_array(update_kinematic_physics_body_components),
  empty_desc_array,
  empty_desc_array,
  empty_desc_array,
  empty_desc_array,
  empty_desc_array,
};
static constexpr ConstCompDesc update_player_collisions_components[] = {
  {HASH("eid"), Desc<EntityId>::Size},
  {HASH("collision_shape"), Desc<CollisionShape>::Size},
  {HASH("gravity"), Desc<Gravity>::Size},
  {HASH("jump"), Desc<Jump>::Size},
  {HASH("is_on_ground"), Desc<bool>::Size},
  {HASH("pos"), Desc<glm::vec2>::Size},
  {HASH("vel"), Desc<glm::vec2>::Size},
};
static constexpr ConstCompDesc update_player_collisions_have_components[] = {
  {HASH("user_input"), 0},
};
static constexpr ConstQueryDesc update_player_collisions_query_desc = {
  make_const_array(update_player_collisions_components),
  make_const_array(update_player_collisions_have_components),
  empty_desc_array,
  empty_desc_array,
  empty_desc_array,
  empty_desc_array,
};
static constexpr ConstCompDesc update_auto_move_collisions_components[] = {
  {HASH("eid"), Desc<EntityId>::Size},
  {HASH("collision_shape"), Desc<CollisionShape>::Size},
  {HASH("pos"), Desc<glm::vec2>::Size},
  {HASH("vel"), Desc<glm::vec2>::Size},
  {HASH("dir"), Desc<float>::Size},
  {HASH("is_on_ground"), Desc<bool>::Size},
};
static constexpr ConstCompDesc update_auto_move_collisions_have_components[] = {
  {HASH("enemy"), 0},
  {HASH("auto_move"), 0},
  {HASH("wall_collidable"), 0},
  {HASH("is_alive"), 0},
};
static constexpr ConstCompDesc update_auto_move_collisions_track_components[] = {
  {HASH("is_alive"), Desc<bool>::Size},
};
static constexpr ConstQueryDesc update_auto_move_collisions_query_desc = {
  make_const_array(update_auto_move_collisions_components),
  make_const_array(update_auto_move_collisions_have_components),
  empty_desc_array,
  empty_desc_array,
  empty_desc_array,
  make_const_array(update_auto_move_collisions_track_components),
};

static constexpr ConstCompDesc Brick_components[] = {
  {HASH("collision_shape"), Desc<CollisionShape>::Size},
  {HASH("pos"), Desc<glm::vec2>::Size},
};
static constexpr ConstCompDesc Brick_have_components[] = {
  {HASH("wall"), 0},
};
static constexpr ConstQueryDesc Brick_query_desc = {
  make_const_array(Brick_components),
  make_const_array(Brick_have_components),
  empty_desc_array,
  empty_desc_array,
  empty_desc_array,
  empty_desc_array,
};
static constexpr ConstCompDesc MovingBrick_components[] = {
  {HASH("collision_shape"), Desc<CollisionShape>::Size},
  {HASH("pos"), Desc<glm::vec2>::Size},
  {HASH("vel"), Desc<glm::vec2>::Size},
};
static constexpr ConstCompDesc MovingBrick_have_components[] = {
  {HASH("wall"), 0},
  {HASH("auto_move"), 0},
};
static constexpr ConstQueryDesc MovingBrick_query_desc = {
  make_const_array(MovingBrick_components),
  make_const_array(MovingBrick_have_components),
  empty_desc_array,
  empty_desc_array,
  empty_desc_array,
  empty_desc_array,
};
static constexpr ConstCompDesc AliveEnemy_components[] = {
  {HASH("eid"), Desc<EntityId>::Size},
  {HASH("collision_shape"), Desc<CollisionShape>::Size},
  {HASH("pos"), Desc<glm::vec2>::Size},
  {HASH("is_alive"), Desc<bool>::Size},
  {HASH("vel"), Desc<glm::vec2>::Size},
};
static constexpr ConstCompDesc AliveEnemy_have_components[] = {
  {HASH("enemy"), 0},
  {HASH("is_alive"), 0},
};
static constexpr ConstCompDesc AliveEnemy_track_components[] = {
  {HASH("is_alive"), Desc<bool>::Size},
};
static constexpr ConstQueryDesc AliveEnemy_query_desc = {
  make_const_array(AliveEnemy_components),
  make_const_array(AliveEnemy_have_components),
  empty_desc_array,
  empty_desc_array,
  empty_desc_array,
  make_const_array(AliveEnemy_track_components),
};
using BrickBuilder = StructBuilder<
  StructField<CollisionShape, INDEX_OF_COMPONENT(Brick, collision_shape)>,
  StructField<glm::vec2, INDEX_OF_COMPONENT(Brick, pos)>
>;
using MovingBrickBuilder = StructBuilder<
  StructField<CollisionShape, INDEX_OF_COMPONENT(MovingBrick, collision_shape)>,
  StructField<glm::vec2, INDEX_OF_COMPONENT(MovingBrick, pos)>,
  StructField<glm::vec2, INDEX_OF_COMPONENT(MovingBrick, vel)>
>;
using AliveEnemyBuilder = StructBuilder<
  StructField<EntityId, INDEX_OF_COMPONENT(AliveEnemy, eid)>,
  StructField<CollisionShape, INDEX_OF_COMPONENT(AliveEnemy, collision_shape)>,
  StructField<glm::vec2, INDEX_OF_COMPONENT(AliveEnemy, pos)>,
  StructField<bool, INDEX_OF_COMPONENT(AliveEnemy, is_alive)>,
  StructField<glm::vec2, INDEX_OF_COMPONENT(AliveEnemy, vel)>
>;

static RegQuery _reg_query_Brick(HASH("physics.cpp_Brick"), Brick_query_desc, nullptr);
static RegQuery _reg_query_MovingBrick(HASH("physics.cpp_MovingBrick"), MovingBrick_query_desc, nullptr);
static RegQuery _reg_query_AliveEnemy(HASH("physics.cpp_AliveEnemy"), AliveEnemy_query_desc, 
[](const Archetype &type, int entity_idx)
{
  GET_COMPONENT_VALUE(is_alive, bool);
  return is_alive == true;
});


int Brick::count()
{
  Query &query = *g_mgr->getQueryByName(HASH("physics.cpp_Brick"));
  return query.entitiesCount;
}
template <typename Callable> void Brick::foreach(Callable callback)
{
  Query &query = *g_mgr->getQueryByName(HASH("physics.cpp_Brick"));
  for (auto q = query.begin(), e = query.end(); q != e; ++q)
    callback(
    {
      GET_COMPONENT(Brick, q, CollisionShape, collision_shape),
      GET_COMPONENT(Brick, q, glm::vec2, pos)
    });
}
int MovingBrick::count()
{
  Query &query = *g_mgr->getQueryByName(HASH("physics.cpp_MovingBrick"));
  return query.entitiesCount;
}
template <typename Callable> void MovingBrick::foreach(Callable callback)
{
  Query &query = *g_mgr->getQueryByName(HASH("physics.cpp_MovingBrick"));
  for (auto q = query.begin(), e = query.end(); q != e; ++q)
    callback(
    {
      GET_COMPONENT(MovingBrick, q, CollisionShape, collision_shape),
      GET_COMPONENT(MovingBrick, q, glm::vec2, pos),
      GET_COMPONENT(MovingBrick, q, glm::vec2, vel)
    });
}
int AliveEnemy::count()
{
  Query &query = *g_mgr->getQueryByName(HASH("physics.cpp_AliveEnemy"));
  return query.entitiesCount;
}
template <typename Callable> void AliveEnemy::foreach(Callable callback)
{
  Query &query = *g_mgr->getQueryByName(HASH("physics.cpp_AliveEnemy"));
  for (auto q = query.begin(), e = query.end(); q != e; ++q)
    callback(
    {
      GET_COMPONENT(AliveEnemy, q, EntityId, eid),
      GET_COMPONENT(AliveEnemy, q, CollisionShape, collision_shape),
      GET_COMPONENT(AliveEnemy, q, glm::vec2, pos),
      GET_COMPONENT(AliveEnemy, q, bool, is_alive),
      GET_COMPONENT(AliveEnemy, q, glm::vec2, vel)
    });
}
static void init_physics_collision_handler_run(const RawArg &stage_or_event, Query &query)
{
  for (auto q = query.begin(), e = query.end(); q != e; ++q)
    init_physics_collision_handler::run(*(EventOnEntityCreate*)stage_or_event.mem,
      GET_COMPONENT(init_physics_collision_handler, q, EntityId, eid),
      GET_COMPONENT(init_physics_collision_handler, q, PhysicsBody, phys_body),
      GET_COMPONENT(init_physics_collision_handler, q, CollisionShape, collision_shape));
}
static RegSys _reg_sys_init_physics_collision_handler("init_physics_collision_handler", &init_physics_collision_handler_run, "EventOnEntityCreate", init_physics_collision_handler_query_desc, nullptr);

static void init_physics_body_handler_run(const RawArg &stage_or_event, Query &query)
{
  for (auto q = query.begin(), e = query.end(); q != e; ++q)
    init_physics_body_handler::run(*(EventOnEntityCreate*)stage_or_event.mem,
      GET_COMPONENT(init_physics_body_handler, q, PhysicsBody, phys_body),
      GET_COMPONENT(init_physics_body_handler, q, glm::vec2, pos));
}
static RegSys _reg_sys_init_physics_body_handler("init_physics_body_handler", &init_physics_body_handler_run, "EventOnEntityCreate", init_physics_body_handler_query_desc, nullptr);

static void init_physics_world_handler_run(const RawArg &stage_or_event, Query &query)
{
  for (auto q = query.begin(), e = query.end(); q != e; ++q)
    init_physics_world_handler::run(*(EventOnEntityCreate*)stage_or_event.mem,
      GET_COMPONENT(init_physics_world_handler, q, PhysicsWorld, phys_world));
}
static RegSys _reg_sys_init_physics_world_handler("init_physics_world_handler", &init_physics_world_handler_run, "EventOnEntityCreate", init_physics_world_handler_query_desc, nullptr);

static void update_physics_run(const RawArg &stage_or_event, Query &query)
{
  for (auto q = query.begin(), e = query.end(); q != e; ++q)
    update_physics::run(*(UpdateStage*)stage_or_event.mem,
      GET_COMPONENT(update_physics, q, PhysicsWorld, phys_world));
}
static RegSys _reg_sys_update_physics("update_physics", &update_physics_run, "UpdateStage", update_physics_query_desc, nullptr);

static void render_debug_physics_run(const RawArg &stage_or_event, Query &query)
{
  for (auto q = query.begin(), e = query.end(); q != e; ++q)
    render_debug_physics::run(*(RenderDebugStage*)stage_or_event.mem,
      GET_COMPONENT(render_debug_physics, q, PhysicsWorld, phys_world));
}
static RegSys _reg_sys_render_debug_physics("render_debug_physics", &render_debug_physics_run, "RenderDebugStage", render_debug_physics_query_desc, nullptr);

static void update_kinematic_physics_body_run(const RawArg &stage_or_event, Query &query)
{
  for (auto q = query.begin(), e = query.end(); q != e; ++q)
    update_kinematic_physics_body::run(*(UpdateStage*)stage_or_event.mem,
      GET_COMPONENT(update_kinematic_physics_body, q, PhysicsBody, phys_body),
      GET_COMPONENT(update_kinematic_physics_body, q, glm::vec2, pos),
      GET_COMPONENT(update_kinematic_physics_body, q, glm::vec2, vel));
}
static RegSys _reg_sys_update_kinematic_physics_body("update_kinematic_physics_body", &update_kinematic_physics_body_run, "UpdateStage", update_kinematic_physics_body_query_desc, nullptr);

static void update_player_collisions_run(const RawArg &stage_or_event, Query &query)
{
  for (auto q = query.begin(), e = query.end(); q != e; ++q)
    update_player_collisions::run(*(UpdateStage*)stage_or_event.mem,
      GET_COMPONENT(update_player_collisions, q, EntityId, eid),
      GET_COMPONENT(update_player_collisions, q, CollisionShape, collision_shape),
      GET_COMPONENT(update_player_collisions, q, Gravity, gravity),
      GET_COMPONENT(update_player_collisions, q, Jump, jump),
      GET_COMPONENT(update_player_collisions, q, bool, is_on_ground),
      GET_COMPONENT(update_player_collisions, q, glm::vec2, pos),
      GET_COMPONENT(update_player_collisions, q, glm::vec2, vel));
}
static RegSys _reg_sys_update_player_collisions("update_player_collisions", &update_player_collisions_run, "UpdateStage", update_player_collisions_query_desc, nullptr);

static void update_auto_move_collisions_run(const RawArg &stage_or_event, Query &query)
{
  for (auto q = query.begin(), e = query.end(); q != e; ++q)
    update_auto_move_collisions::run(*(UpdateStage*)stage_or_event.mem,
      GET_COMPONENT(update_auto_move_collisions, q, EntityId, eid),
      GET_COMPONENT(update_auto_move_collisions, q, CollisionShape, collision_shape),
      GET_COMPONENT(update_auto_move_collisions, q, glm::vec2, pos),
      GET_COMPONENT(update_auto_move_collisions, q, glm::vec2, vel),
      GET_COMPONENT(update_auto_move_collisions, q, float, dir),
      GET_COMPONENT(update_auto_move_collisions, q, bool, is_on_ground));
}
static RegSys _reg_sys_update_auto_move_collisions("update_auto_move_collisions", &update_auto_move_collisions_run, "UpdateStage", update_auto_move_collisions_query_desc, 
[](const Archetype &type, int entity_idx)
{
  GET_COMPONENT_VALUE(is_alive, bool);
  return is_alive == true;
});

#endif // __CODEGEN__
