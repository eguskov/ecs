//! GENERATED FILE


#ifndef __CODEGEN__

#include "boids.cpp"

static constexpr ConstComponentDescription on_mouse_click_handler_boid_have_components[] = {
  {HASH("click_handler_boid"), 0},
};
static constexpr ConstQueryDescription on_mouse_click_handler_boid_query_desc = {
  empty_desc_array,
  make_const_array(on_mouse_click_handler_boid_have_components),
  empty_desc_array,
  empty_desc_array,
};
static constexpr ConstComponentDescription on_click_space_handler_boid_have_components[] = {
  {HASH("click_handler_boid"), 0},
};
static constexpr ConstQueryDescription on_click_space_handler_boid_query_desc = {
  empty_desc_array,
  make_const_array(on_click_space_handler_boid_have_components),
  empty_desc_array,
  empty_desc_array,
};
static constexpr ConstComponentDescription on_click_left_control_handler_boid_have_components[] = {
  {HASH("click_handler_boid"), 0},
};
static constexpr ConstQueryDescription on_click_left_control_handler_boid_query_desc = {
  empty_desc_array,
  make_const_array(on_click_left_control_handler_boid_have_components),
  empty_desc_array,
  empty_desc_array,
};
static constexpr ConstComponentDescription on_change_cohesion_handler_boid_have_components[] = {
  {HASH("click_handler_boid"), 0},
};
static constexpr ConstQueryDescription on_change_cohesion_handler_boid_query_desc = {
  empty_desc_array,
  make_const_array(on_change_cohesion_handler_boid_have_components),
  empty_desc_array,
  empty_desc_array,
};
static constexpr ConstComponentDescription on_change_alignment_handler_boid_have_components[] = {
  {HASH("click_handler_boid"), 0},
};
static constexpr ConstQueryDescription on_change_alignment_handler_boid_query_desc = {
  empty_desc_array,
  make_const_array(on_change_alignment_handler_boid_have_components),
  empty_desc_array,
  empty_desc_array,
};
static constexpr ConstComponentDescription on_change_separation_handler_boid_have_components[] = {
  {HASH("click_handler_boid"), 0},
};
static constexpr ConstQueryDescription on_change_separation_handler_boid_query_desc = {
  empty_desc_array,
  make_const_array(on_change_separation_handler_boid_have_components),
  empty_desc_array,
  empty_desc_array,
};
static constexpr ConstComponentDescription on_change_wander_handler_boid_have_components[] = {
  {HASH("click_handler_boid"), 0},
};
static constexpr ConstQueryDescription on_change_wander_handler_boid_query_desc = {
  empty_desc_array,
  make_const_array(on_change_wander_handler_boid_have_components),
  empty_desc_array,
  empty_desc_array,
};
static constexpr ConstComponentDescription render_hud_boid_have_components[] = {
  {HASH("click_handler_boid"), 0},
};
static constexpr ConstQueryDescription render_hud_boid_query_desc = {
  empty_desc_array,
  make_const_array(render_hud_boid_have_components),
  empty_desc_array,
  empty_desc_array,
};
static constexpr ConstComponentDescription render_boid_obstacle_components[] = {
  {HASH("texture"), ComponentType<TextureAtlas>::size, ComponentDescriptionFlags::kNone},
  {HASH("frame"), ComponentType<glm::vec4>::size, ComponentDescriptionFlags::kNone},
  {HASH("pos"), ComponentType<glm::vec2>::size, ComponentDescriptionFlags::kNone},
};
static constexpr ConstComponentDescription render_boid_obstacle_have_components[] = {
  {HASH("boid_obstacle"), 0},
};
static constexpr ConstQueryDescription render_boid_obstacle_query_desc = {
  make_const_array(render_boid_obstacle_components),
  make_const_array(render_boid_obstacle_have_components),
  empty_desc_array,
  empty_desc_array,
};
static constexpr ConstComponentDescription render_boid_components[] = {
  {HASH("texture"), ComponentType<TextureAtlas>::size, ComponentDescriptionFlags::kNone},
  {HASH("frame"), ComponentType<glm::vec4>::size, ComponentDescriptionFlags::kNone},
  {HASH("cur_pos"), ComponentType<glm::vec2>::size, ComponentDescriptionFlags::kNone},
  {HASH("cur_separation_center"), ComponentType<glm::vec2>::size, ComponentDescriptionFlags::kNone},
  {HASH("cur_cohesion_center"), ComponentType<glm::vec2>::size, ComponentDescriptionFlags::kNone},
  {HASH("mass"), ComponentType<float>::size, ComponentDescriptionFlags::kNone},
  {HASH("cur_rotation"), ComponentType<float>::size, ComponentDescriptionFlags::kNone},
};
static constexpr ConstComponentDescription render_boid_have_components[] = {
  {HASH("boid"), 0},
};
static constexpr ConstQueryDescription render_boid_query_desc = {
  make_const_array(render_boid_components),
  make_const_array(render_boid_have_components),
  empty_desc_array,
  empty_desc_array,
};
static constexpr ConstComponentDescription copy_boid_state_components[] = {
  {HASH("pos"), ComponentType<glm::vec2>::size, ComponentDescriptionFlags::kNone},
  {HASH("separation_center"), ComponentType<glm::vec2>::size, ComponentDescriptionFlags::kNone},
  {HASH("cohesion_center"), ComponentType<glm::vec2>::size, ComponentDescriptionFlags::kNone},
  {HASH("alignment_dir"), ComponentType<glm::vec2>::size, ComponentDescriptionFlags::kNone},
  {HASH("rotation"), ComponentType<float>::size, ComponentDescriptionFlags::kNone},
  {HASH("cur_pos"), ComponentType<glm::vec2>::size, ComponentDescriptionFlags::kWrite},
  {HASH("cur_rotation"), ComponentType<float>::size, ComponentDescriptionFlags::kWrite},
  {HASH("cur_separation_center"), ComponentType<glm::vec2>::size, ComponentDescriptionFlags::kWrite},
  {HASH("cur_cohesion_center"), ComponentType<glm::vec2>::size, ComponentDescriptionFlags::kWrite},
  {HASH("cur_alignment_dir"), ComponentType<glm::vec2>::size, ComponentDescriptionFlags::kWrite},
};
static constexpr ConstComponentDescription copy_boid_state_have_components[] = {
  {HASH("boid"), 0},
};
static constexpr ConstQueryDescription copy_boid_state_query_desc = {
  make_const_array(copy_boid_state_components),
  make_const_array(copy_boid_state_have_components),
  empty_desc_array,
  empty_desc_array,
};
static constexpr ConstComponentDescription update_boid_position_components[] = {
  {HASH("vel"), ComponentType<glm::vec2>::size, ComponentDescriptionFlags::kNone},
  {HASH("pos"), ComponentType<glm::vec2>::size, ComponentDescriptionFlags::kWrite},
};
static constexpr ConstComponentDescription update_boid_position_have_components[] = {
  {HASH("boid"), 0},
};
static constexpr ConstQueryDescription update_boid_position_query_desc = {
  make_const_array(update_boid_position_components),
  make_const_array(update_boid_position_have_components),
  empty_desc_array,
  empty_desc_array,
};
static constexpr ConstComponentDescription update_boid_rotation_components[] = {
  {HASH("vel"), ComponentType<glm::vec2>::size, ComponentDescriptionFlags::kNone},
  {HASH("rotation"), ComponentType<float>::size, ComponentDescriptionFlags::kWrite},
};
static constexpr ConstComponentDescription update_boid_rotation_have_components[] = {
  {HASH("boid"), 0},
};
static constexpr ConstQueryDescription update_boid_rotation_query_desc = {
  make_const_array(update_boid_rotation_components),
  make_const_array(update_boid_rotation_have_components),
  empty_desc_array,
  empty_desc_array,
};
static constexpr ConstComponentDescription update_boid_avoid_walls_components[] = {
  {HASH("pos"), ComponentType<glm::vec2>::size, ComponentDescriptionFlags::kNone},
  {HASH("vel"), ComponentType<glm::vec2>::size, ComponentDescriptionFlags::kNone},
  {HASH("mass"), ComponentType<float>::size, ComponentDescriptionFlags::kNone},
  {HASH("move_to_center_timer"), ComponentType<float>::size, ComponentDescriptionFlags::kWrite},
  {HASH("force"), ComponentType<glm::vec2>::size, ComponentDescriptionFlags::kWrite},
};
static constexpr ConstComponentDescription update_boid_avoid_walls_have_components[] = {
  {HASH("boid"), 0},
};
static constexpr ConstQueryDescription update_boid_avoid_walls_query_desc = {
  make_const_array(update_boid_avoid_walls_components),
  make_const_array(update_boid_avoid_walls_have_components),
  empty_desc_array,
  empty_desc_array,
};
static constexpr ConstComponentDescription update_boid_avoid_obstacle_components[] = {
  {HASH("pos"), ComponentType<glm::vec2>::size, ComponentDescriptionFlags::kNone},
  {HASH("force"), ComponentType<glm::vec2>::size, ComponentDescriptionFlags::kWrite},
};
static constexpr ConstComponentDescription update_boid_avoid_obstacle_have_components[] = {
  {HASH("boid"), 0},
};
static constexpr ConstQueryDescription update_boid_avoid_obstacle_query_desc = {
  make_const_array(update_boid_avoid_obstacle_components),
  make_const_array(update_boid_avoid_obstacle_have_components),
  empty_desc_array,
  empty_desc_array,
};
static constexpr ConstComponentDescription update_boid_move_to_center_components[] = {
  {HASH("pos"), ComponentType<glm::vec2>::size, ComponentDescriptionFlags::kNone},
  {HASH("move_to_center_timer"), ComponentType<float>::size, ComponentDescriptionFlags::kWrite},
  {HASH("force"), ComponentType<glm::vec2>::size, ComponentDescriptionFlags::kWrite},
};
static constexpr ConstComponentDescription update_boid_move_to_center_have_components[] = {
  {HASH("boid"), 0},
};
static constexpr ConstQueryDescription update_boid_move_to_center_query_desc = {
  make_const_array(update_boid_move_to_center_components),
  make_const_array(update_boid_move_to_center_have_components),
  empty_desc_array,
  empty_desc_array,
};
static constexpr ConstComponentDescription update_boid_wander_components[] = {
  {HASH("vel"), ComponentType<glm::vec2>::size, ComponentDescriptionFlags::kNone},
  {HASH("force"), ComponentType<glm::vec2>::size, ComponentDescriptionFlags::kWrite},
  {HASH("wander_vel"), ComponentType<glm::vec2>::size, ComponentDescriptionFlags::kWrite},
  {HASH("wander_timer"), ComponentType<float>::size, ComponentDescriptionFlags::kWrite},
};
static constexpr ConstComponentDescription update_boid_wander_have_components[] = {
  {HASH("boid"), 0},
};
static constexpr ConstQueryDescription update_boid_wander_query_desc = {
  make_const_array(update_boid_wander_components),
  make_const_array(update_boid_wander_have_components),
  empty_desc_array,
  empty_desc_array,
};
static constexpr ConstComponentDescription control_boid_velocity_components[] = {
  {HASH("max_vel"), ComponentType<float>::size, ComponentDescriptionFlags::kNone},
  {HASH("vel"), ComponentType<glm::vec2>::size, ComponentDescriptionFlags::kWrite},
};
static constexpr ConstComponentDescription control_boid_velocity_have_components[] = {
  {HASH("boid"), 0},
};
static constexpr ConstQueryDescription control_boid_velocity_query_desc = {
  make_const_array(control_boid_velocity_components),
  make_const_array(control_boid_velocity_have_components),
  empty_desc_array,
  empty_desc_array,
};
static constexpr ConstComponentDescription apply_boid_force_components[] = {
  {HASH("mass"), ComponentType<float>::size, ComponentDescriptionFlags::kNone},
  {HASH("force"), ComponentType<glm::vec2>::size, ComponentDescriptionFlags::kWrite},
  {HASH("vel"), ComponentType<glm::vec2>::size, ComponentDescriptionFlags::kWrite},
};
static constexpr ConstComponentDescription apply_boid_force_have_components[] = {
  {HASH("boid"), 0},
};
static constexpr ConstQueryDescription apply_boid_force_query_desc = {
  make_const_array(apply_boid_force_components),
  make_const_array(apply_boid_force_have_components),
  empty_desc_array,
  empty_desc_array,
};

static constexpr ConstComponentDescription Boid_components[] = {
  {HASH("pos"), ComponentType<glm::vec2>::size, ComponentDescriptionFlags::kNone},
  {HASH("vel"), ComponentType<glm::vec2>::size, ComponentDescriptionFlags::kNone},
  {HASH("mass"), ComponentType<float>::size, ComponentDescriptionFlags::kNone},
};
static constexpr ConstComponentDescription Boid_have_components[] = {
  {HASH("boid"), 0},
};
static constexpr ConstQueryDescription Boid_query_desc = {
  make_const_array(Boid_components),
  make_const_array(Boid_have_components),
  empty_desc_array,
  empty_desc_array,
};
static constexpr ConstComponentDescription BoidObstacle_components[] = {
  {HASH("pos"), ComponentType<glm::vec2>::size, ComponentDescriptionFlags::kNone},
};
static constexpr ConstComponentDescription BoidObstacle_have_components[] = {
  {HASH("boid_obstacle"), 0},
};
static constexpr ConstQueryDescription BoidObstacle_query_desc = {
  make_const_array(BoidObstacle_components),
  make_const_array(BoidObstacle_have_components),
  empty_desc_array,
  empty_desc_array,
};
static constexpr ConstComponentDescription BoidSeparation_components[] = {
  {HASH("eid"), ComponentType<EntityId>::size, ComponentDescriptionFlags::kNone},
  {HASH("pos"), ComponentType<glm::vec2>::size, ComponentDescriptionFlags::kNone},
  {HASH("vel"), ComponentType<glm::vec2>::size, ComponentDescriptionFlags::kNone},
  {HASH("force"), ComponentType<glm::vec2>::size, ComponentDescriptionFlags::kWrite},
  {HASH("separation_center"), ComponentType<glm::vec2>::size, ComponentDescriptionFlags::kWrite},
  {HASH("cohesion_center"), ComponentType<glm::vec2>::size, ComponentDescriptionFlags::kWrite},
  {HASH("alignment_dir"), ComponentType<glm::vec2>::size, ComponentDescriptionFlags::kWrite},
};
static constexpr ConstComponentDescription BoidSeparation_have_components[] = {
  {HASH("boid"), 0},
};
static constexpr ConstQueryDescription BoidSeparation_query_desc = {
  make_const_array(BoidSeparation_components),
  make_const_array(BoidSeparation_have_components),
  empty_desc_array,
  empty_desc_array,
};
using BoidBuilder = StructBuilder<
  StructField<glm::vec2, INDEX_OF_COMPONENT(Boid, pos)>,
  StructField<glm::vec2, INDEX_OF_COMPONENT(Boid, vel)>,
  StructField<float, INDEX_OF_COMPONENT(Boid, mass)>
>;
using BoidObstacleBuilder = StructBuilder<
  StructField<glm::vec2, INDEX_OF_COMPONENT(BoidObstacle, pos)>
>;
using BoidSeparationBuilder = StructBuilder<
  StructField<EntityId, INDEX_OF_COMPONENT(BoidSeparation, eid)>,
  StructField<glm::vec2, INDEX_OF_COMPONENT(BoidSeparation, pos)>,
  StructField<glm::vec2, INDEX_OF_COMPONENT(BoidSeparation, vel)>,
  StructField<glm::vec2, INDEX_OF_COMPONENT(BoidSeparation, force)>,
  StructField<glm::vec2, INDEX_OF_COMPONENT(BoidSeparation, separation_center)>,
  StructField<glm::vec2, INDEX_OF_COMPONENT(BoidSeparation, cohesion_center)>,
  StructField<glm::vec2, INDEX_OF_COMPONENT(BoidSeparation, alignment_dir)>
>;

static PersistentQueryDescription _reg_query_Boid(HASH("boids.cpp_Boid"), Boid_query_desc, nullptr);
static PersistentQueryDescription _reg_query_BoidObstacle(HASH("boids.cpp_BoidObstacle"), BoidObstacle_query_desc, nullptr);
static PersistentQueryDescription _reg_query_BoidSeparation(HASH("boids.cpp_BoidSeparation"), BoidSeparation_query_desc, nullptr);


int Boid::count()
{
  return ecs::get_entities_count(_reg_query_Boid.queryId);
}
template <typename Callable> void Boid::foreach(Callable callback)
{
  Query &query = ecs::get_query(_reg_query_Boid.queryId);
  for (auto q = query.begin(), e = query.end(); q != e; ++q)
    callback(
    {
      GET_COMPONENT(Boid, q, glm::vec2, pos),
      GET_COMPONENT(Boid, q, glm::vec2, vel),
      GET_COMPONENT(Boid, q, float, mass)
    });
}
Index* Boid::index()
{
  return nullptr;
}
Boid Boid::get(QueryIterator &iter)
{
  return {
      GET_COMPONENT(Boid, iter, glm::vec2, pos),
      GET_COMPONENT(Boid, iter, glm::vec2, vel),
      GET_COMPONENT(Boid, iter, float, mass)
    };
}
int BoidObstacle::count()
{
  return ecs::get_entities_count(_reg_query_BoidObstacle.queryId);
}
template <typename Callable> void BoidObstacle::foreach(Callable callback)
{
  Query &query = ecs::get_query(_reg_query_BoidObstacle.queryId);
  for (auto q = query.begin(), e = query.end(); q != e; ++q)
    callback(
    {
      GET_COMPONENT(BoidObstacle, q, glm::vec2, pos)
    });
}
Index* BoidObstacle::index()
{
  return nullptr;
}
BoidObstacle BoidObstacle::get(QueryIterator &iter)
{
  return {
      GET_COMPONENT(BoidObstacle, iter, glm::vec2, pos)
    };
}
int BoidSeparation::count()
{
  return ecs::get_entities_count(_reg_query_BoidSeparation.queryId);
}
template <typename Callable> void BoidSeparation::foreach(Callable callback)
{
  Query &query = ecs::get_query(_reg_query_BoidSeparation.queryId);
  for (auto q = query.begin(), e = query.end(); q != e; ++q)
    callback(
    {
      GET_COMPONENT(BoidSeparation, q, EntityId, eid),
      GET_COMPONENT(BoidSeparation, q, glm::vec2, pos),
      GET_COMPONENT(BoidSeparation, q, glm::vec2, vel),
      GET_COMPONENT(BoidSeparation, q, glm::vec2, force),
      GET_COMPONENT(BoidSeparation, q, glm::vec2, separation_center),
      GET_COMPONENT(BoidSeparation, q, glm::vec2, cohesion_center),
      GET_COMPONENT(BoidSeparation, q, glm::vec2, alignment_dir)
    });
}
Index* BoidSeparation::index()
{
  return nullptr;
}
BoidSeparation BoidSeparation::get(QueryIterator &iter)
{
  return {
      GET_COMPONENT(BoidSeparation, iter, EntityId, eid),
      GET_COMPONENT(BoidSeparation, iter, glm::vec2, pos),
      GET_COMPONENT(BoidSeparation, iter, glm::vec2, vel),
      GET_COMPONENT(BoidSeparation, iter, glm::vec2, force),
      GET_COMPONENT(BoidSeparation, iter, glm::vec2, separation_center),
      GET_COMPONENT(BoidSeparation, iter, glm::vec2, cohesion_center),
      GET_COMPONENT(BoidSeparation, iter, glm::vec2, alignment_dir)
    };
}
static void update_boid_rules_run(const RawArg &stage_or_event, Query&)
{
  Query &query = ecs::get_query(_reg_query_BoidSeparation.queryId);
  if (query.entitiesCount <= 0)
    return;
  update_boid_rules::run(*(EventUpdate*)stage_or_event.mem, QueryIterable<BoidSeparation, BoidSeparationBuilder>(query));
}
static SystemDescription _reg_sys_update_boid_rules(HASH("update_boid_rules"), &update_boid_rules_run, HASH("EventUpdate"), BoidSeparation_query_desc, "*", "*", SystemDescription::Mode::FROM_EXTERNAL_QUERY);

static void on_mouse_click_handler_boid_run(const RawArg &stage_or_event, Query &query)
{
  ecs::wait_system_dependencies(HASH("on_mouse_click_handler_boid"));
  for (auto q = query.begin(), e = query.end(); q != e; ++q)
    on_mouse_click_handler_boid::run(*(EventOnClickMouseLeftButton*)stage_or_event.mem);
}
static SystemDescription _reg_sys_on_mouse_click_handler_boid(HASH("on_mouse_click_handler_boid"), &on_mouse_click_handler_boid_run, HASH("EventOnClickMouseLeftButton"), on_mouse_click_handler_boid_query_desc, "*", "*", nullptr);

static void on_click_space_handler_boid_run(const RawArg &stage_or_event, Query &query)
{
  ecs::wait_system_dependencies(HASH("on_click_space_handler_boid"));
  for (auto q = query.begin(), e = query.end(); q != e; ++q)
    on_click_space_handler_boid::run(*(EventOnClickSpace*)stage_or_event.mem);
}
static SystemDescription _reg_sys_on_click_space_handler_boid(HASH("on_click_space_handler_boid"), &on_click_space_handler_boid_run, HASH("EventOnClickSpace"), on_click_space_handler_boid_query_desc, "*", "*", nullptr);

static void on_click_left_control_handler_boid_run(const RawArg &stage_or_event, Query &query)
{
  ecs::wait_system_dependencies(HASH("on_click_left_control_handler_boid"));
  for (auto q = query.begin(), e = query.end(); q != e; ++q)
    on_click_left_control_handler_boid::run(*(EventOnClickLeftControl*)stage_or_event.mem);
}
static SystemDescription _reg_sys_on_click_left_control_handler_boid(HASH("on_click_left_control_handler_boid"), &on_click_left_control_handler_boid_run, HASH("EventOnClickLeftControl"), on_click_left_control_handler_boid_query_desc, "*", "*", nullptr);

static void on_change_cohesion_handler_boid_run(const RawArg &stage_or_event, Query &query)
{
  ecs::wait_system_dependencies(HASH("on_change_cohesion_handler_boid"));
  for (auto q = query.begin(), e = query.end(); q != e; ++q)
    on_change_cohesion_handler_boid::run(*(EventOnChangeCohesion*)stage_or_event.mem);
}
static SystemDescription _reg_sys_on_change_cohesion_handler_boid(HASH("on_change_cohesion_handler_boid"), &on_change_cohesion_handler_boid_run, HASH("EventOnChangeCohesion"), on_change_cohesion_handler_boid_query_desc, "*", "*", nullptr);

static void on_change_alignment_handler_boid_run(const RawArg &stage_or_event, Query &query)
{
  ecs::wait_system_dependencies(HASH("on_change_alignment_handler_boid"));
  for (auto q = query.begin(), e = query.end(); q != e; ++q)
    on_change_alignment_handler_boid::run(*(EventOnChangeAlignment*)stage_or_event.mem);
}
static SystemDescription _reg_sys_on_change_alignment_handler_boid(HASH("on_change_alignment_handler_boid"), &on_change_alignment_handler_boid_run, HASH("EventOnChangeAlignment"), on_change_alignment_handler_boid_query_desc, "*", "*", nullptr);

static void on_change_separation_handler_boid_run(const RawArg &stage_or_event, Query &query)
{
  ecs::wait_system_dependencies(HASH("on_change_separation_handler_boid"));
  for (auto q = query.begin(), e = query.end(); q != e; ++q)
    on_change_separation_handler_boid::run(*(EventOnChangeSeparation*)stage_or_event.mem);
}
static SystemDescription _reg_sys_on_change_separation_handler_boid(HASH("on_change_separation_handler_boid"), &on_change_separation_handler_boid_run, HASH("EventOnChangeSeparation"), on_change_separation_handler_boid_query_desc, "*", "*", nullptr);

static void on_change_wander_handler_boid_run(const RawArg &stage_or_event, Query &query)
{
  ecs::wait_system_dependencies(HASH("on_change_wander_handler_boid"));
  for (auto q = query.begin(), e = query.end(); q != e; ++q)
    on_change_wander_handler_boid::run(*(EventOnChangeWander*)stage_or_event.mem);
}
static SystemDescription _reg_sys_on_change_wander_handler_boid(HASH("on_change_wander_handler_boid"), &on_change_wander_handler_boid_run, HASH("EventOnChangeWander"), on_change_wander_handler_boid_query_desc, "*", "*", nullptr);

static void render_hud_boid_run(const RawArg &stage_or_event, Query &query)
{
  ecs::wait_system_dependencies(HASH("render_hud_boid"));
  for (auto q = query.begin(), e = query.end(); q != e; ++q)
    render_hud_boid::run(*(EventRenderHUD*)stage_or_event.mem);
}
static SystemDescription _reg_sys_render_hud_boid(HASH("render_hud_boid"), &render_hud_boid_run, HASH("EventRenderHUD"), render_hud_boid_query_desc, "*", "after_render", nullptr);

static void render_boid_obstacle_run(const RawArg &stage_or_event, Query &query)
{
  ecs::wait_system_dependencies(HASH("render_boid_obstacle"));
  for (auto q = query.begin(), e = query.end(); q != e; ++q)
    render_boid_obstacle::run(*(EventRender*)stage_or_event.mem,
      GET_COMPONENT(render_boid_obstacle, q, TextureAtlas, texture),
      GET_COMPONENT(render_boid_obstacle, q, glm::vec4, frame),
      GET_COMPONENT(render_boid_obstacle, q, glm::vec2, pos));
}
static SystemDescription _reg_sys_render_boid_obstacle(HASH("render_boid_obstacle"), &render_boid_obstacle_run, HASH("EventRender"), render_boid_obstacle_query_desc, "after_render", "before_render", nullptr);

static void render_boid_run(const RawArg &stage_or_event, Query &query)
{
  ecs::wait_system_dependencies(HASH("render_boid"));
  for (auto q = query.begin(), e = query.end(); q != e; ++q)
    render_boid::run(*(EventRender*)stage_or_event.mem,
      GET_COMPONENT(render_boid, q, TextureAtlas, texture),
      GET_COMPONENT(render_boid, q, glm::vec4, frame),
      GET_COMPONENT(render_boid, q, glm::vec2, cur_pos),
      GET_COMPONENT(render_boid, q, glm::vec2, cur_separation_center),
      GET_COMPONENT(render_boid, q, glm::vec2, cur_cohesion_center),
      GET_COMPONENT(render_boid, q, float, mass),
      GET_COMPONENT(render_boid, q, float, cur_rotation));
}
static SystemDescription _reg_sys_render_boid(HASH("render_boid"), &render_boid_run, HASH("EventRender"), render_boid_query_desc, "after_render", "before_render", nullptr);

static void copy_boid_state_run(const RawArg &stage_or_event, Query &query)
{
  ecs::wait_system_dependencies(HASH("copy_boid_state"));
  for (auto q = query.begin(), e = query.end(); q != e; ++q)
    copy_boid_state::run(*(EventUpdate*)stage_or_event.mem,
      GET_COMPONENT(copy_boid_state, q, glm::vec2, pos),
      GET_COMPONENT(copy_boid_state, q, glm::vec2, separation_center),
      GET_COMPONENT(copy_boid_state, q, glm::vec2, cohesion_center),
      GET_COMPONENT(copy_boid_state, q, glm::vec2, alignment_dir),
      GET_COMPONENT(copy_boid_state, q, float, rotation),
      GET_COMPONENT(copy_boid_state, q, glm::vec2, cur_pos),
      GET_COMPONENT(copy_boid_state, q, float, cur_rotation),
      GET_COMPONENT(copy_boid_state, q, glm::vec2, cur_separation_center),
      GET_COMPONENT(copy_boid_state, q, glm::vec2, cur_cohesion_center),
      GET_COMPONENT(copy_boid_state, q, glm::vec2, cur_alignment_dir));
}
static SystemDescription _reg_sys_copy_boid_state(HASH("copy_boid_state"), &copy_boid_state_run, HASH("EventUpdate"), copy_boid_state_query_desc, "*", "*", nullptr);

static void update_boid_position_add_jobs(const RawArg &stage_or_event, Query &query)
{
  const int systemId = ecs::get_system_id(HASH("update_boid_position"));
  auto stage = *(EventUpdate*)stage_or_event.mem;
  jobmanager::callback_t task = [&query, stage](int from, int count)
  {
    auto begin = query.begin(from);
    auto end = query.begin(from + count);
    for (auto q = begin, e = end; q != e; ++q)
      update_boid_position::run(stage,
        GET_COMPONENT(update_boid_position, q, glm::vec2, vel),
        GET_COMPONENT(update_boid_position, q, glm::vec2, pos));
  };
  ecs::set_system_job(systemId, update_boid_position::addJobs(eastl::move(ecs::get_system_dependency_list(systemId)), eastl::move(task), query.entitiesCount));
  jobmanager::start_jobs();
}
static SystemDescription _reg_sys_update_boid_position(HASH("update_boid_position"), &update_boid_position_add_jobs, HASH("EventUpdate"), update_boid_position_query_desc, "*", "*", nullptr);

static void update_boid_rotation_add_jobs(const RawArg &stage_or_event, Query &query)
{
  const int systemId = ecs::get_system_id(HASH("update_boid_rotation"));
  auto stage = *(EventUpdate*)stage_or_event.mem;
  jobmanager::callback_t task = [&query, stage](int from, int count)
  {
    auto begin = query.begin(from);
    auto end = query.begin(from + count);
    for (auto q = begin, e = end; q != e; ++q)
      update_boid_rotation::run(stage,
        GET_COMPONENT(update_boid_rotation, q, glm::vec2, vel),
        GET_COMPONENT(update_boid_rotation, q, float, rotation));
  };
  ecs::set_system_job(systemId, update_boid_rotation::addJobs(eastl::move(ecs::get_system_dependency_list(systemId)), eastl::move(task), query.entitiesCount));
  jobmanager::start_jobs();
}
static SystemDescription _reg_sys_update_boid_rotation(HASH("update_boid_rotation"), &update_boid_rotation_add_jobs, HASH("EventUpdate"), update_boid_rotation_query_desc, "*", "*", nullptr);

static void update_boid_avoid_walls_add_jobs(const RawArg &stage_or_event, Query &query)
{
  const int systemId = ecs::get_system_id(HASH("update_boid_avoid_walls"));
  auto stage = *(EventUpdate*)stage_or_event.mem;
  jobmanager::callback_t task = [&query, stage](int from, int count)
  {
    auto begin = query.begin(from);
    auto end = query.begin(from + count);
    for (auto q = begin, e = end; q != e; ++q)
      update_boid_avoid_walls::run(stage,
        GET_COMPONENT(update_boid_avoid_walls, q, glm::vec2, pos),
        GET_COMPONENT(update_boid_avoid_walls, q, glm::vec2, vel),
        GET_COMPONENT(update_boid_avoid_walls, q, float, mass),
        GET_COMPONENT(update_boid_avoid_walls, q, float, move_to_center_timer),
        GET_COMPONENT(update_boid_avoid_walls, q, glm::vec2, force));
  };
  ecs::set_system_job(systemId, update_boid_avoid_walls::addJobs(eastl::move(ecs::get_system_dependency_list(systemId)), eastl::move(task), query.entitiesCount));
  jobmanager::start_jobs();
}
static SystemDescription _reg_sys_update_boid_avoid_walls(HASH("update_boid_avoid_walls"), &update_boid_avoid_walls_add_jobs, HASH("EventUpdate"), update_boid_avoid_walls_query_desc, "*", "*", nullptr);

static void update_boid_avoid_obstacle_add_jobs(const RawArg &stage_or_event, Query &query)
{
  const int systemId = ecs::get_system_id(HASH("update_boid_avoid_obstacle"));
  auto stage = *(EventUpdate*)stage_or_event.mem;
  jobmanager::callback_t task = [&query, stage](int from, int count)
  {
    auto begin = query.begin(from);
    auto end = query.begin(from + count);
    for (auto q = begin, e = end; q != e; ++q)
      update_boid_avoid_obstacle::run(stage,
        GET_COMPONENT(update_boid_avoid_obstacle, q, glm::vec2, pos),
        GET_COMPONENT(update_boid_avoid_obstacle, q, glm::vec2, force));
  };
  ecs::set_system_job(systemId, update_boid_avoid_obstacle::addJobs(eastl::move(ecs::get_system_dependency_list(systemId)), eastl::move(task), query.entitiesCount));
  jobmanager::start_jobs();
}
static SystemDescription _reg_sys_update_boid_avoid_obstacle(HASH("update_boid_avoid_obstacle"), &update_boid_avoid_obstacle_add_jobs, HASH("EventUpdate"), update_boid_avoid_obstacle_query_desc, "*", "*", nullptr);

static void update_boid_move_to_center_add_jobs(const RawArg &stage_or_event, Query &query)
{
  const int systemId = ecs::get_system_id(HASH("update_boid_move_to_center"));
  auto stage = *(EventUpdate*)stage_or_event.mem;
  jobmanager::callback_t task = [&query, stage](int from, int count)
  {
    auto begin = query.begin(from);
    auto end = query.begin(from + count);
    for (auto q = begin, e = end; q != e; ++q)
      update_boid_move_to_center::run(stage,
        GET_COMPONENT(update_boid_move_to_center, q, glm::vec2, pos),
        GET_COMPONENT(update_boid_move_to_center, q, float, move_to_center_timer),
        GET_COMPONENT(update_boid_move_to_center, q, glm::vec2, force));
  };
  ecs::set_system_job(systemId, update_boid_move_to_center::addJobs(eastl::move(ecs::get_system_dependency_list(systemId)), eastl::move(task), query.entitiesCount));
  jobmanager::start_jobs();
}
static SystemDescription _reg_sys_update_boid_move_to_center(HASH("update_boid_move_to_center"), &update_boid_move_to_center_add_jobs, HASH("EventUpdate"), update_boid_move_to_center_query_desc, "*", "*", nullptr);

static void update_boid_wander_add_jobs(const RawArg &stage_or_event, Query &query)
{
  const int systemId = ecs::get_system_id(HASH("update_boid_wander"));
  auto stage = *(EventUpdate*)stage_or_event.mem;
  jobmanager::callback_t task = [&query, stage](int from, int count)
  {
    auto begin = query.begin(from);
    auto end = query.begin(from + count);
    for (auto q = begin, e = end; q != e; ++q)
      update_boid_wander::run(stage,
        GET_COMPONENT(update_boid_wander, q, glm::vec2, vel),
        GET_COMPONENT(update_boid_wander, q, glm::vec2, force),
        GET_COMPONENT(update_boid_wander, q, glm::vec2, wander_vel),
        GET_COMPONENT(update_boid_wander, q, float, wander_timer));
  };
  ecs::set_system_job(systemId, update_boid_wander::addJobs(eastl::move(ecs::get_system_dependency_list(systemId)), eastl::move(task), query.entitiesCount));
  jobmanager::start_jobs();
}
static SystemDescription _reg_sys_update_boid_wander(HASH("update_boid_wander"), &update_boid_wander_add_jobs, HASH("EventUpdate"), update_boid_wander_query_desc, "*", "*", nullptr);

static void control_boid_velocity_add_jobs(const RawArg &stage_or_event, Query &query)
{
  const int systemId = ecs::get_system_id(HASH("control_boid_velocity"));
  auto stage = *(EventUpdate*)stage_or_event.mem;
  jobmanager::callback_t task = [&query, stage](int from, int count)
  {
    auto begin = query.begin(from);
    auto end = query.begin(from + count);
    for (auto q = begin, e = end; q != e; ++q)
      control_boid_velocity::run(stage,
        GET_COMPONENT(control_boid_velocity, q, float, max_vel),
        GET_COMPONENT(control_boid_velocity, q, glm::vec2, vel));
  };
  ecs::set_system_job(systemId, control_boid_velocity::addJobs(eastl::move(ecs::get_system_dependency_list(systemId)), eastl::move(task), query.entitiesCount));
  jobmanager::start_jobs();
}
static SystemDescription _reg_sys_control_boid_velocity(HASH("control_boid_velocity"), &control_boid_velocity_add_jobs, HASH("EventUpdate"), control_boid_velocity_query_desc, "*", "*", nullptr);

static void apply_boid_force_add_jobs(const RawArg &stage_or_event, Query &query)
{
  const int systemId = ecs::get_system_id(HASH("apply_boid_force"));
  auto stage = *(EventUpdate*)stage_or_event.mem;
  jobmanager::callback_t task = [&query, stage](int from, int count)
  {
    auto begin = query.begin(from);
    auto end = query.begin(from + count);
    for (auto q = begin, e = end; q != e; ++q)
      apply_boid_force::run(stage,
        GET_COMPONENT(apply_boid_force, q, float, mass),
        GET_COMPONENT(apply_boid_force, q, glm::vec2, force),
        GET_COMPONENT(apply_boid_force, q, glm::vec2, vel));
  };
  ecs::set_system_job(systemId, apply_boid_force::addJobs(eastl::move(ecs::get_system_dependency_list(systemId)), eastl::move(task), query.entitiesCount));
  jobmanager::start_jobs();
}
static SystemDescription _reg_sys_apply_boid_force(HASH("apply_boid_force"), &apply_boid_force_add_jobs, HASH("EventUpdate"), apply_boid_force_query_desc, "*", "*", nullptr);


#endif // __CODEGEN__
